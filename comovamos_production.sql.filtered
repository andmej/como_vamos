-- phpMyAdmin SQL Dump
-- version 3.3.10.4
-- http://www.phpmyadmin.net
--
-- Host: mysql.zinterno.com
-- Generation Time: Sep 10, 2014 at 10:29 PM
-- Server version: 5.1.56
-- PHP Version: 5.4.20

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `comovamos_production`
--

-- --------------------------------------------------------

--
-- Table structure for table `comments`
--

CREATE TABLE IF NOT EXISTS `comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `commentable_id` int(11) DEFAULT NULL,
  `content` text,
  `commentable_type` varchar(255) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

--
-- Dumping data for table `comments`
--


-- --------------------------------------------------------

--
-- Table structure for table `judges`
--

CREATE TABLE IF NOT EXISTS `judges` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `owner_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=15 ;

--
-- Dumping data for table `judges`
--

INSERT INTO `judges` (`id`, `name`, `url`, `created_at`, `updated_at`, `owner_id`) VALUES
(1, 'UVa Online Judge', 'http://uva.onlinejudge.org/', '2008-12-05 01:10:44', '2008-12-05 01:10:44', 1),
(2, 'TopCoder', 'http://topcoder.com/tc', '2008-12-06 05:00:49', '2008-12-06 05:00:49', 1),
(3, 'SPOJ', 'http://spoj.pl', '2008-12-06 05:11:36', '2008-12-06 05:11:36', 1),
(4, 'Live Archive', 'http://acm.uva.es/archive/nuevoportal/', '2008-12-06 05:12:40', '2008-12-06 05:12:40', 1),
(5, 'TJU Online Judge', 'http://acm.tju.edu.cn/', '2008-12-06 05:13:03', '2008-12-06 05:13:03', 1),
(6, 'USACO', 'http://ace.delos.com/ioigate', '2009-01-02 21:50:42', '2009-01-02 21:50:42', 6),
(7, 'PKU Online Judge', 'http://acm.pku.edu.cn/JudgeOnline/', '2009-01-16 00:30:18', '2009-01-16 00:30:18', 1),
(8, 'ZOJ Online Judge', 'http://acm.zju.edu.cn/', '2009-04-06 00:47:59', '2009-04-06 00:47:59', 1),
(9, 'Hangzou Dianzi University', 'http://acm.hdu.edu.cn/', '2009-08-28 17:28:11', '2009-08-28 17:28:11', 22),
(10, 'Google Code Jam', 'http://code.google.com/codejam/', '2009-09-04 13:09:00', '2009-09-04 13:09:00', 41),
(11, 'Google Code Jam', 'http://code.google.com/codejam/contest', '2009-09-12 21:24:27', '2009-09-12 21:24:27', 6),
(12, 'FZU Online Judge', 'http://acm.fzu.edu.cn/', '2009-09-23 07:02:33', '2009-09-23 07:02:33', 75),
(14, 'Codeforces', 'http://codeforces.com/', '2012-04-07 16:26:37', '2012-04-07 16:26:37', 32);

-- --------------------------------------------------------

--
-- Table structure for table `problems`
--

CREATE TABLE IF NOT EXISTS `problems` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `judge_id` int(11) DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `number` varchar(255) DEFAULT NULL,
  `owner_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=547 ;

--
-- Dumping data for table `problems`
--

INSERT INTO `problems` (`id`, `judge_id`, `title`, `url`, `created_at`, `updated_at`, `number`, `owner_id`) VALUES
(1, 1, 'Bubbles and Buckets', 'http://uva.onlinejudge.org/external/114/11495.html', '2008-12-05 01:12:14', '2008-12-05 01:12:14', '11495', 1),
(2, 1, 'Gopher II', 'http://uva.onlinejudge.org/external/100/10080.html', '2008-12-05 01:51:34', '2008-12-05 01:51:34', '10080', 1),
(3, 5, 'Buy One Get One Free', 'http://acm.tju.edu.cn/toj/showp2761.html', '2008-12-06 05:33:19', '2008-12-06 05:33:19', '2761', 1),
(4, 1, 'Parking', 'http://uva.onlinejudge.org/external/113/11364.html', '2008-12-06 05:34:02', '2008-12-06 05:34:02', '11364', 3),
(5, 1, 'Train Swapping', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=4&page=show_problem&problem=235', '2008-12-06 20:30:24', '2008-12-06 20:30:24', '299', 6),
(6, 4, 'Strategic game', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=2038', '2008-12-06 22:21:57', '2008-12-06 22:21:57', '2038', 1),
(7, 1, 'Da Vinci Code', 'http://uva.onlinejudge.org/external/113/11385.html', '2008-12-06 23:13:06', '2008-12-06 23:13:06', '11385', 3),
(8, 1, 'Border', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=5&page=show_problem&problem=256', '2008-12-07 00:27:52', '2008-12-07 00:27:52', '320', 6),
(9, 3, 'Game of lines', 'http://www.spoj.pl/problems/LINES/', '2008-12-07 05:55:38', '2008-12-07 05:55:38', '3184', 1),
(10, 1, 'Tight words', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=12&page=show_problem&problem=1022', '2008-12-07 16:15:43', '2008-12-07 16:15:43', '10081', 1),
(11, 4, 'Equilibrium Mobile', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4286', '2008-12-08 08:19:32', '2008-12-08 08:19:32', '4286', 1),
(12, 4, 'Proving Equivalences', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4287', '2008-12-08 15:43:56', '2008-12-08 15:44:19', '4287', 3),
(13, 4, 'Matchsticks', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4292', '2008-12-08 15:46:31', '2008-12-08 15:46:31', '4292', 3),
(14, 4, 'Shuffle', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4294', '2008-12-08 15:47:47', '2008-12-08 15:47:47', '4294', 3),
(15, 4, 'Disgruntled Judge', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4289', '2008-12-08 16:18:50', '2008-12-08 16:18:50', '4289', 3),
(16, 1, 'Recycling', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=90', '2008-12-08 22:05:37', '2008-12-08 22:05:37', '154', NULL),
(17, 3, 'Prime Generator', 'http://www.spoj.pl/problems/PRIME1/', '2008-12-09 04:36:35', '2008-12-09 04:36:35', '2', 6),
(18, 3, 'Bitmap', 'http://www.spoj.pl/problems/BITMAP/', '2008-12-09 04:51:34', '2008-12-09 04:51:34', '206', 6),
(19, 3, 'Hangover', 'http://www.spoj.pl/problems/HANGOVER/', '2008-12-11 00:15:09', '2008-12-11 00:15:09', '902', 6),
(20, 3, 'Dance floor', 'http://www.spoj.pl/problems/DFLOOR/', '2008-12-12 19:21:41', '2008-12-12 19:21:41', '98', 1),
(21, 1, 'Even parity', 'http://uva.onlinejudge.org/external/114/11464.html', '2008-12-12 19:29:41', '2008-12-12 19:29:41', '11464', 1),
(22, 2, 'LinearPolyominoCovering', 'http://www.topcoder.com/stat?c=problem_statement&pm=10251&rd=13520', '2008-12-13 00:47:00', '2008-12-16 03:48:19', 'SRM 429 - Div 2 Easy', 1),
(23, 2, 'SubrectanglesOfTable', 'http://www.topcoder.com/stat?c=problem_statement&pm=10246&rd=13520', '2008-12-13 00:47:42', '2008-12-20 20:11:49', 'SRM 429 - Div 1 Easy', 1),
(24, 2, 'IngredientProportions', 'http://www.topcoder.com/stat?c=problem_statement&pm=8729&rd=13520', '2008-12-13 00:48:39', '2008-12-20 20:12:01', 'SRM 429 - Div 1 Medium', 1),
(25, 4, 'Cat vs. Dog', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4288', '2008-12-13 02:50:10', '2008-12-13 02:50:10', '4288', 1),
(26, 1, 'Risk', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=7&page=show_problem&problem=508', '2008-12-13 03:08:21', '2008-12-13 03:08:21', '567', 6),
(27, 4, 'Lazy jumping frog', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3652', '2008-12-14 20:13:21', '2008-12-14 20:13:21', '3652', 1),
(28, 1, 'Sending email', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=21&page=show_problem&problem=1927', '2008-12-15 02:36:53', '2008-12-15 02:36:53', '10986', 6),
(29, 2, 'SpecificPolyominoCovering', 'http://www.topcoder.com/stat?c=problem_statement&pm=8560', '2008-12-15 20:32:14', '2008-12-16 03:48:37', 'SRM 429 - Div 1 Hard', 1),
(30, 4, 'Bora Bora', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4219', '2008-12-15 21:59:34', '2008-12-15 21:59:34', '4219', 12),
(31, 2, 'BestRoads', 'http://www.topcoder.com/stat?c=problem_statement&pm=10172&rd=13515', '2008-12-16 03:47:40', '2008-12-16 03:47:40', 'SRM 424 - Div 2 Hard', 1),
(32, 1, 'Pick-up Sticks', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=21&page=show_problem&problem=1843', '2008-12-16 14:21:20', '2008-12-16 14:21:20', '10902', 12),
(33, 1, 'MPI Maelstrom', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=6&page=show_problem&problem=364', '2008-12-17 02:07:40', '2008-12-17 02:07:40', '423', 6),
(34, 1, 'Travelling Distance', 'http://uva.onlinejudge.org/external/108/10897.html', '2008-12-17 17:02:38', '2008-12-17 17:02:38', '10897', 3),
(35, 1, 'Bee', 'http://uva.onlinejudge.org/external/110/11000.html', '2008-12-17 18:12:29', '2008-12-17 18:12:29', '11000', 3),
(36, 1, 'Lining Up', 'http://uva.onlinejudge.org/external/2/270.html', '2008-12-17 20:38:44', '2008-12-17 20:38:44', '270', 3),
(37, 1, 'Intersection', 'http://uva.onlinejudge.org/external/1/191.html', '2008-12-18 05:07:24', '2008-12-18 05:07:24', '191', 3),
(38, 1, 'Intersecting Lines', 'http://uva.onlinejudge.org/external/3/378.html', '2008-12-18 16:35:07', '2008-12-18 16:35:07', '378', 3),
(39, 1, 'Number maze', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=11&page=show_problem&problem=870', '2008-12-20 00:02:01', '2008-12-20 00:02:01', '929', 1),
(40, 2, 'CreateGroups', 'http://www.topcoder.com/stat?c=problem_statement&pm=8376', '2008-12-20 20:04:30', '2008-12-20 20:04:30', 'SRM 430 - Div 2 Easy', 1),
(41, 2, 'BitwiseEquations', 'http://www.topcoder.com/stat?c=problem_statement&pm=9921', '2008-12-20 20:04:58', '2008-12-20 20:12:19', 'SRM 430 - Div 1 Easy', 1),
(42, 2, 'ImageTraders', 'http://www.topcoder.com/stat?c=problem_statement&pm=7583', '2008-12-21 04:31:13', '2008-12-21 04:31:13', 'SRM 430 - Div 2 Hard', 1),
(43, 2, 'TwinTowns', 'http://www.topcoder.com/stat?c=problem_statement&pm=10138', '2008-12-21 22:19:59', '2008-12-21 22:19:59', 'SRM 430 - Div 1 Medium', 1),
(44, 4, 'Higgs Boson', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4217', '2008-12-22 03:48:54', '2008-12-22 03:48:54', '4217', 1),
(45, 4, 'Petanque', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3152', '2008-12-22 15:45:27', '2008-12-22 15:45:27', '3152', 1),
(46, 1, 'King', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=7&page=show_problem&problem=456', '2008-12-25 06:48:04', '2008-12-25 06:48:04', '515', 6),
(47, 4, 'Bases', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4211', '2008-12-25 17:21:21', '2008-12-25 17:21:21', '4211', 1),
(48, 2, 'MegaCoolNumbersEasy', 'http://www.topcoder.com/stat?c=problem_statement&pm=10281', '2008-12-26 05:08:19', '2008-12-26 05:08:19', 'SRM 431 - Div 2 Easy', 1),
(49, 2, 'FallingPoints', 'http://www.topcoder.com/stat?c=problem_statement&pm=10261', '2008-12-26 06:06:35', '2008-12-26 06:06:35', 'SRM 431 - Div 2 Medium', 1),
(50, 2, 'SumAndProduct', 'http://www.topcoder.com/stat?c=problem_statement&pm=10257', '2008-12-26 06:07:55', '2008-12-26 06:07:55', 'SRM 431 - Div 2 Hard', 1),
(51, 2, 'MegaCoolNumbers', 'http://www.topcoder.com/stat?c=problem_statement&pm=10259&rd=13522', '2008-12-26 06:12:18', '2008-12-26 06:12:18', 'SRM 431 - Div 1 Medium', 1),
(52, 2, 'LaserShooting', 'http://www.topcoder.com/stat?c=problem_statement&pm=10258&rd=13522', '2008-12-26 06:12:54', '2008-12-26 06:12:54', 'SRM 431 - Div 1 Easy', 1),
(53, 4, 'Traveling Shoemaker Problem', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4218', '2008-12-26 23:40:28', '2008-12-26 23:40:28', '4218', 1),
(55, 4, 'Stock Exchange', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4183', '2008-12-28 23:59:12', '2008-12-28 23:59:12', '4183', 6),
(56, 4, 'Sky Code', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4184', '2008-12-29 00:00:11', '2008-12-29 00:00:11', '4184', 6),
(57, 4, 'Perfect Election', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4185', '2008-12-29 00:01:46', '2008-12-29 00:01:46', '4185', 6),
(58, 4, 'Lucky cities', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4186', '2008-12-29 00:03:26', '2008-12-29 00:03:26', '4186', 6),
(59, 4, 'Build Your Home', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4187', '2008-12-29 00:04:41', '2008-12-29 00:04:41', '4187', 6),
(60, 4, 'Quick answer', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4188', '2008-12-29 00:05:34', '2008-12-29 00:05:34', '4188', 6),
(61, 4, 'Lucky numbers', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4189', '2008-12-29 00:07:43', '2008-12-29 00:07:43', '4189', 6),
(62, 4, 'GCD Determinant', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4190', '2008-12-29 00:08:33', '2008-12-29 00:08:33', '4190', 6),
(63, 4, 'Internet Service Providers', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4191', '2008-12-29 00:09:23', '2008-12-29 00:09:23', '4191', 6),
(64, 4, 'Almost Shortest Path', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4210', '2008-12-29 13:23:29', '2008-12-29 13:23:29', '4210', 6),
(65, 4, 'Candy', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4212', '2008-12-29 13:24:17', '2008-12-29 13:24:17', '4212', 6),
(66, 4, 'DNA Sequences', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4213', '2008-12-29 13:29:05', '2008-12-29 13:29:05', '4213', 6),
(67, 4, 'Electricity', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4214', '2008-12-29 13:32:09', '2008-12-29 13:32:09', '4214', 6),
(68, 4, 'Feynman', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4215', '2008-12-29 13:34:13', '2008-12-29 13:34:13', '4215', 6),
(69, 4, 'Pole Position', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4216', '2008-12-29 13:35:44', '2008-12-29 13:35:44', '4216', 6),
(70, 4, 'Shrinking Polygons', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4220', '2008-12-29 13:37:35', '2008-12-29 13:37:35', '4220', 6),
(71, 3, 'Evaluate the polynomial', 'http://www.spoj.pl/problems/POLEVAL/', '2008-12-30 21:56:01', '2008-12-30 21:56:01', '1774', 1),
(72, 1, 'The Necklace', 'http://uva.onlinejudge.org/external/100/10054.html', '2008-12-30 22:07:37', '2008-12-30 22:07:37', '10054', 1),
(73, 1, 'Critical links', 'http://uva.onlinejudge.org/external/7/796.html', '2008-12-30 22:09:26', '2008-12-30 22:09:26', '796', 1),
(74, 1, 'John''s trip', 'http://uva.onlinejudge.org/external/3/302.html', '2008-12-31 00:21:23', '2008-12-31 00:21:42', '302', 1),
(75, 2, 'Div 1 Medium - Marketing', 'http://www.topcoder.com/stat?c=problem_statement&pm=1524&rd=4472', '2008-12-31 05:54:45', '2008-12-31 05:54:45', 'TCCC ''03 Round 2', 6),
(76, 4, 'X-Mart', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=2886', '2008-12-31 07:06:02', '2008-12-31 07:06:02', '2886', 1),
(77, 6, 'Tablero', 'http://ace.delos.com/ioiupload?d=bronze&a=jDqZvyOXwDy&lang=sp', '2009-01-02 21:53:09', '2009-01-02 22:40:03', 'Bronze demo - 12', 6),
(78, 2, 'DecorationDay', 'http://www.topcoder.com/tc?module=HSProblemStatement&pm=8213&rd=11153', '2009-01-03 20:23:29', '2009-01-03 20:23:29', 'TCHS08 Round 1 - Divison 1 Hard', 1),
(79, 2, 'SubwayTrip', 'http://www.topcoder.com/tc?module=HSProblemStatement&pm=10254&rd=13728', '2009-01-03 20:24:55', '2009-01-03 20:24:55', 'TCHS Elimination Round 1 - Division 1 Easy', 1),
(80, 2, 'BankLoans', 'http://www.topcoder.com/tc?module=HSProblemStatement&pm=9929&rd=13728', '2009-01-03 20:26:04', '2009-01-03 20:26:04', 'TCHS Elimination Round 1 - Division 1 Medium', 1),
(81, 2, 'MazeReconstruction', 'http://www.topcoder.com/tc?module=HSProblemStatement&pm=10004&rd=13728', '2009-01-03 20:26:59', '2009-01-03 20:26:59', 'TCHS Elimination Round 1 - Division 1 Hard', 1),
(82, 6, 'Scrabble', 'http://ace.delos.com/ioiupload?d=bronze&a=MAPhY8R6x8p&lang=en', '2009-01-13 19:46:05', '2009-01-13 19:46:05', 'Elite 2009 January Competition - Bronze - 11', 1),
(83, 6, 'Back to the Barn', 'http://ace.delos.com/ioiupload?d=bronze&a=MAPhY8R6x8p&lang=en#12', '2009-01-13 19:48:01', '2009-01-13 19:48:01', 'Elite 2009 January Competition - Bronze - 12', 1),
(84, 6, 'Music Notes', 'http://ace.delos.com/ioiupload?d=bronze&a=MAPhY8R6x8p&lang=en#13', '2009-01-13 19:49:52', '2009-01-13 19:49:52', 'Elite 2009 January Competition - Bronze - 13', 1),
(85, 6, 'Laserphones', 'http://ace.delos.com/ioiupload?d=silver&a=MAPhY8R6x8p&lang=en#8', '2009-01-13 20:57:14', '2009-01-14 14:42:01', 'Elite 2009 January Competition - Silver - 8', 1),
(86, 6, 'Total flow', 'http://ace.delos.com/ioiupload?d=gold&a=MAPhY8R6x8p&lang=en', '2009-01-14 14:42:17', '2009-01-14 14:42:17', 'Elite 2009 January Competition - Silver - 7', 1),
(87, 6, 'Best spot', 'http://ace.delos.com/ioiupload?d=silver&a=MAPhY8R6x8p&lang=en#6', '2009-01-14 14:43:48', '2009-01-14 14:43:48', 'Elite 2009 January Competition - Silver - 6', 1),
(88, 4, 'Assemble', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3971', '2009-01-14 15:59:23', '2009-01-14 15:59:23', '3971', 1),
(89, 6, 'The Baric Bovine', 'http://ace.delos.com/ioiupload?d=gold&a=MAPhY8R6x8p&lang=en#2', '2009-01-14 21:53:32', '2009-01-14 21:53:32', 'Elite 2009 January Competition - Gold - 2', 1),
(90, 2, 'GroupedWordChecker', 'http://www.topcoder.com/stat?c=problem_statement&pm=10295', '2009-01-15 13:57:54', '2009-01-15 13:57:54', 'SRM 432 - Div 2 Easy', 6),
(91, 4, 'Finding seats', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3932', '2009-01-15 15:56:29', '2009-01-15 15:56:29', '3932', 1),
(92, 7, 'Balanced lineup', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=3264', '2009-01-16 00:31:00', '2009-01-16 00:31:00', '3264', 1),
(93, 6, 'Earthquake damage', 'http://ace.delos.com/ioiupload?d=gold&a=MAPhY8R6x8p&lang=en#1', '2009-01-16 00:44:03', '2009-01-16 00:46:45', 'Elite 2009 January Competition - Gold - 1', 1),
(94, 4, 'Sixth grade math', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4232', '2009-01-18 19:26:46', '2009-01-18 19:26:46', '4232', 1),
(95, 4, 'Cryptoquote', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4233', '2009-01-18 19:34:11', '2009-01-18 19:34:11', '4233', 1),
(96, 4, 'Binary clock', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4234', '2009-01-18 19:43:17', '2009-01-18 19:44:12', '4234', 1),
(97, 4, 'Recursively Palindromic Partitions', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4235', '2009-01-18 19:47:51', '2009-01-18 19:47:51', '4235', 1),
(98, 4, 'Extended Normal Order Sort', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4237', '2009-01-18 19:55:00', '2009-01-18 19:55:00', '4237', 1),
(99, 4, 'Area of polycubes', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4238', '2009-01-18 19:59:42', '2009-01-18 19:59:42', '4238', 1),
(100, 4, 'Text messaging improvement?', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4236', '2009-01-18 20:21:53', '2009-01-18 20:21:53', '4236', 1),
(101, 4, 'The Two Note Rag', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4239', '2009-01-19 05:05:55', '2009-01-19 05:05:55', '4239', 6),
(102, 4, 'Joe''s Triangular Gardens', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4240', '2009-01-19 05:07:51', '2009-01-19 05:07:51', '4240', 6),
(103, 4, 'The Great Wall Game', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3276', '2009-01-23 21:05:13', '2009-01-23 21:05:13', '3276', 1),
(104, 1, 'Ant on a chessboard', 'http://uva.onlinejudge.org/external/101/10161.html', '2009-01-24 02:05:59', '2009-01-24 02:05:59', '10161', 1),
(105, 1, 'Power of Cryptography ', 'http://uva.onlinejudge.org/external/1/113.html', '2009-01-31 20:42:38', '2009-01-31 20:42:38', '113', 3),
(106, 3, 'Street', 'http://www.spoj.pl/problems/STREET/', '2009-01-31 22:46:15', '2009-01-31 22:46:15', '3791', 1),
(108, 5, 'Encrypted SMS', 'http://acm.tju.edu.cn/toj/showp3050.html', '2009-02-01 04:32:30', '2009-02-01 04:32:30', '3050', 22),
(109, 4, 'Always An Integer', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4119', '2009-02-01 04:57:35', '2009-02-01 04:57:35', '4119', 22),
(110, 4, 'Huffman Codes', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4122', '2009-02-01 05:16:18', '2009-02-01 05:16:18', '4122', 22),
(111, 1, 'How many pieces of land?', 'http://uva.onlinejudge.org/external/102/10213.html', '2009-02-05 15:25:16', '2009-02-05 15:25:16', '10213', 1),
(112, 1, 'Counting', 'http://uva.onlinejudge.org/external/101/10198.html', '2009-02-06 01:25:25', '2009-02-06 01:25:25', '10198', 1),
(113, 2, 'MakingPotions', 'http://www.topcoder.com/stat?c=problem_statement&pm=10009&rd=13695', '2009-02-07 04:09:38', '2009-02-07 04:09:38', 'SRM 433 - Div 2 - Hard', 1),
(114, 1, 'Geometry Paradox', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=17&problem=1514&mosmsg=Submission+received+with+ID+6925831', '2009-02-07 15:51:21', '2009-02-07 15:51:21', '10573', 3),
(115, 2, 'HexatridecimalSum', 'http://www.topcoder.com/stat?c=problem_statement&pm=10266', '2009-02-07 23:07:45', '2009-02-07 23:07:45', 'SRM 434 - Div 1 - Medium', 1),
(116, 2, 'FindingSquareInTable', 'http://www.topcoder.com/stat?c=problem_statement&pm=10268', '2009-02-08 18:09:12', '2009-02-08 18:09:12', 'SRM 434 - Div 1 - Easy', 1),
(117, 1, 'Divisors', 'http://online-judge.uva.es/problemset/v2/294.html', '2009-02-08 22:31:23', '2009-02-08 22:31:23', '294', 22),
(118, 1, 'Soundex', 'http://acm.uva.es/p/v102/10260.html', '2009-02-08 23:11:03', '2009-02-09 01:14:23', '10260', 22),
(119, 1, 'Prime Factors', 'http://acm.uva.es/problemset/v5/583.html', '2009-02-09 02:10:52', '2009-02-09 02:10:52', '583', 3),
(120, 1, 'H(n)', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=27&problem=2521&mosmsg=Submission+received+with+ID+6936432', '2009-02-09 03:48:23', '2009-02-09 03:48:23', '11526', 3),
(121, 1, 'Prime Cuts', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=6&problem=347&mosmsg=Submission+received+with+ID+6936491', '2009-02-09 05:10:48', '2009-02-09 05:10:48', '406', 3),
(122, 1, 'Summation of Polynomials', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=15&problem=1243&mosmsg=Submission+received+with+ID+6939380', '2009-02-10 15:26:17', '2009-02-10 15:26:17', '10302', 3),
(123, 2, 'FenceRepairing', 'http://www.topcoder.com/stat?c=problem_statement&pm=6827&rd=10005', '2009-02-10 23:54:05', '2009-02-26 00:56:20', 'SRM 325 - Div 1  Easy', 1),
(124, 6, 'Cruel Math Teacher, I', 'http://ace.delos.com/ioiupload?d=bronze&a=6Byz5ytYcVm&lang=en#1', '2009-02-11 00:11:32', '2009-02-11 02:47:49', 'Elite 2009 February Competition - Bronze - 11', 1),
(125, 6, 'Cruel Math Teacher, II', 'http://ace.delos.com/ioiupload?d=bronze&a=6Byz5ytYcVm&lang=en#2', '2009-02-11 00:40:41', '2009-02-11 02:48:06', 'Elite 2009 February Competition - Bronze - 12', 1),
(126, 6, 'Coggle', 'http://ace.delos.com/ioiupload?d=bronze&a=6Byz5ytYcVm&lang=en#3', '2009-02-11 01:06:36', '2009-02-11 02:49:22', 'Elite 2009 February Competition - Bronze - 13', 1),
(127, 6, 'Bulls and cows', 'http://ace.delos.com/ioiupload?d=silver&a=6Byz5ytYcVm&lang=en#8', '2009-02-11 02:51:10', '2009-02-11 02:51:10', 'Elite 2009 February Competition - Silver - 8', 1),
(128, 1, 'Cola', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=23&page=show_problem&problem=2091', '2009-02-11 04:30:30', '2009-02-11 04:30:30', '11150', 22),
(129, 1, 'Prime Words', 'http://online-judge.uva.es/problemset/v109/10924.html', '2009-02-11 04:38:05', '2009-02-11 04:38:05', '10924', 22),
(130, 6, 'The Leprechaun', 'http://ace.delos.com/ioiupload?d=silver&a=6Byz5ytYcVm&lang=en', '2009-02-11 14:50:09', '2009-02-11 14:50:09', 'Elite 2009 February Competition - Silver - 6', 1),
(131, 1, 'Light, more light', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=13&page=show_problem&problem=1051', '2009-02-11 19:31:28', '2009-02-11 19:31:28', '10110', 20),
(132, 6, 'Surround the Islands', 'http://ace.delos.com/ioiupload?d=silver&a=odJE49J8eUT&lang=en', '2009-02-11 23:04:54', '2009-02-11 23:04:54', 'Elite 2009 February Competition - Silver - 7', 1),
(133, 6, 'Stock Market', 'http://ace.delos.com/ioiupload?d=gold&a=odJE49J8eUT&lang=en', '2009-02-12 00:30:14', '2009-02-12 00:30:14', 'Elite 2009 February Competition - Gold - 2', 1),
(134, 6, 'Revamping Trails', 'http://ace.delos.com/ioiupload?d=gold&a=odJE49J8eUT&lang=en#3', '2009-02-12 03:07:58', '2009-02-12 03:07:58', 'Elite 2009 February Competition - Gold - 3', 1),
(135, 1, 'Goldbach''s Conjecture (II)', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=8&page=show_problem&problem=627', '2009-02-12 03:12:46', '2009-02-12 03:12:46', '686', 22),
(136, 1, 'Goldbach''s Conjecture', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=7&page=show_problem&problem=484', '2009-02-12 04:44:09', '2009-02-12 04:44:09', '543', 22),
(137, 6, 'Fair Shuttle', 'http://ace.delos.com/ioiupload?d=gold&a=odJE49J8eUT&lang=en#1', '2009-02-12 16:21:23', '2009-02-12 16:21:23', 'Elite 2009 February Competition - Gold - 1', 1),
(138, 1, 'Weights and Measures', 'http://acm.uva.es/problemset/v101/10154.html', '2009-02-13 03:16:34', '2009-02-13 03:16:34', '10154', 13),
(139, 1, 'You Can Say 11', 'http://online-judge.uva.es/problemset/v109/10929.html', '2009-02-13 05:26:17', '2009-02-13 05:26:17', '10929', 22),
(140, 1, 'Reverse And Add', 'http://uva.onlinejudge.org/external/100/10018.html', '2009-02-13 05:42:04', '2009-02-13 05:42:04', '10018', 5),
(141, 2, 'SkiFriction', 'http://www.topcoder.com/stat?c=problem_statement&pm=10294', '2009-02-13 21:23:40', '2009-02-13 21:23:40', 'SRM 435 - Div 2 - Easy', 1),
(142, 2, 'CellRemoval', 'http://www.topcoder.com/stat?c=problem_statement&pm=10275', '2009-02-13 23:40:54', '2009-02-14 16:08:27', 'SRM 435 - Div 1 - Easy', 6),
(143, 1, 'Bowling', 'http://online-judge.uva.es/problemset/v5/584.html', '2009-02-14 15:36:21', '2009-03-23 16:34:55', '584', 22),
(144, 2, 'BirdsCounting', 'http://www.topcoder.com/stat?c=problem_statement&pm=10243', '2009-02-14 16:12:26', '2009-02-14 16:12:26', 'SRM 435 - Div 2 - Hard', 1),
(145, 2, 'DNADeletion', 'http://www.topcoder.com/stat?c=problem_statement&pm=10229&rd=13697&rm=&cr=10574855', '2009-02-14 19:26:14', '2009-02-14 19:26:14', 'SRM 435 - Div 1 - Medium', 1),
(146, 1, 'What Base Is This?', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=5&page=show_problem&problem=279', '2009-02-15 17:52:36', '2009-02-15 17:52:36', '343', 4),
(147, 1, 'Simple Base Conversion', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=16&page=show_problem&problem=1414', '2009-02-15 17:57:07', '2009-02-15 17:57:07', '10473', 4),
(148, 1, 'Base Equality', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=18&page=show_problem&problem=1618', '2009-02-15 18:03:30', '2009-02-15 18:03:30', '10677', 4),
(149, 1, 'Base -2', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=23&page=show_problem&problem=2062', '2009-02-15 18:06:04', '2009-02-15 18:06:04', '11121', 4),
(150, 1, 'Yahtzee', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=13&page=show_problem&problem=1090', '2009-02-15 18:18:31', '2009-02-15 18:18:31', '10149', 3),
(151, 1, 'Unique Snowflakes', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=27&page=show_problem&problem=2619', '2009-02-15 18:58:26', '2009-02-15 18:58:26', '11572', 3),
(152, 1, 'Ocean Currents', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=27&page=show_problem&problem=2620', '2009-02-15 18:59:21', '2009-02-15 18:59:21', '11573', 3),
(153, 1, 'Colliding Traffic', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=27&page=show_problem&problem=2621', '2009-02-15 18:59:52', '2009-02-15 18:59:52', '11574', 3),
(154, 1, 'Zerg Rush!!!', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=27&page=show_problem&problem=2622', '2009-02-15 19:00:30', '2009-02-15 19:00:30', '11575 ', 3),
(155, 1, 'Scrolling Sign', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=27&page=show_problem&problem=2623', '2009-02-15 19:01:22', '2009-02-15 19:01:22', '11576', 3),
(156, 1, 'Joana and the Odd Numbers', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=11&problem=854&mosmsg=Submission+received+with+ID+6948797', '2009-02-16 00:16:03', '2009-02-16 00:16:03', '913', 4),
(157, 2, 'SignatureDecorator', 'http://www.topcoder.com/stat?c=problem_statement&pm=3077&rd=5871', '2009-02-16 02:50:51', '2009-02-16 02:50:51', 'SRM 225 - Div 2 Easy', 22),
(158, 2, 'ParameterSubstitution', 'http://www.topcoder.com/stat?c=problem_statement&pm=3092&rd=5871', '2009-02-16 03:21:22', '2009-02-16 03:21:22', 'SRM 225 - Div 2 Medium', 22),
(159, 2, 'Div 2 Hard - ImageSteganography', 'http://www.topcoder.com/stat?c=problem_statement&pm=3094&rd=5871', '2009-02-16 05:22:36', '2009-02-16 05:22:36', 'SRM 225', 3),
(160, 2, 'Div 2 Easy - InsideOut', 'http://www.topcoder.com/stat?c=problem_statement&pm=3452&rd=5870', '2009-02-16 14:40:55', '2009-02-16 14:40:55', 'SRM 224', 3),
(161, 2, 'TwoTurtledoves', 'http://www.topcoder.com/stat?c=problem_statement&pm=1948&rd=5870', '2009-02-16 14:49:22', '2009-02-16 14:49:22', 'SRM 224 - Div 2 Medium', 3),
(162, 2, 'ParenReduction', 'http://www.topcoder.com/stat?c=problem_statement&pm=3035&rd=5870', '2009-02-16 15:33:33', '2009-02-16 15:33:33', 'SRM 224 - Div 2 Hard', 3),
(163, 2, 'MonstersAndBunnies', 'http://www.topcoder.com/stat?c=problem_statement&pm=8595&rd=12007', '2009-02-16 16:40:46', '2009-02-16 16:40:46', 'TCO08 Qual 1 - Div 1 Easy', 3),
(164, 2, 'PrimeSums', 'http://www.topcoder.com/stat?c=problem_statement&pm=8596&rd=12007', '2009-02-16 17:19:04', '2009-02-26 23:46:31', 'TCO08 Qual 1 - Div 1 Medium', 3),
(165, 2, 'MagicFingerprint', 'http://www.topcoder.com/stat?c=problem_statement&pm=8600&rd=12007', '2009-02-16 17:20:04', '2009-02-16 17:20:04', 'TCO08 Qual 1 - Div 1 Hard', 3),
(166, 2, 'Chocolate', 'http://www.topcoder.com/stat?c=problem_statement&pm=6598&rd=10001', '2009-02-16 19:34:42', '2009-02-18 00:38:09', 'SRM 321 - Div 2 Medium', 22),
(167, 2, 'ComboBoxKeystrokes', 'http://www.topcoder.com/stat?c=problem_statement&pm=3098', '2009-02-16 21:10:30', '2009-02-16 21:10:30', 'SRM 225 - Div 1 - Medium', 1),
(168, 2, 'IntegerGenerator', 'http://www.topcoder.com/stat?c=problem_statement&pm=5984&rd=8078', '2009-02-17 02:19:38', '2009-02-17 02:19:38', 'SRM 281 - Div 2 Medium', 3),
(169, 2, 'BinarySearchable', 'http://www.topcoder.com/stat?c=problem_statement&pm=5869', '2009-02-17 03:01:44', '2009-02-26 00:55:15', 'SRM 281 - Div 2 Hard', 1),
(170, 2, 'SequenceOfNumbers', 'http://www.topcoder.com/stat?c=problem_statement&pm=4659&rd=7228', '2009-02-17 14:05:44', '2009-02-17 14:05:44', 'SRM 255 - Div 2 Easy', 3),
(171, 2, 'WordCompositionGame', 'http://www.topcoder.com/stat?c=problem_statement&pm=4483&rd=7228', '2009-02-17 14:09:00', '2009-02-17 14:09:00', 'SRM 255 - Div 2 Medium', 3),
(172, 2, 'KthElement', 'http://www.topcoder.com/stat?c=problem_statement&pm=4622&rd=7228', '2009-02-17 16:08:20', '2009-02-17 16:08:20', 'SRM 255 - Div 2 Hard', 3),
(173, 2, 'Time', 'http://www.topcoder.com/stat?c=problem_statement&pm=1708&rd=4515', '2009-02-17 21:05:14', '2009-02-17 21:05:14', 'SRM 144 - Div 2 Easy', 3),
(174, 2, 'RunLengthEncoding', 'http://www.topcoder.com/stat?c=problem_statement&pm=5983&rd=8078', '2009-02-17 21:57:16', '2009-02-18 00:38:36', 'SRM 281 - Div 2 Easy', 22),
(175, 2, 'Workshop', 'http://www.topcoder.com/stat?c=problem_statement&pm=1880&rd=4635', '2009-02-18 00:30:00', '2009-02-18 00:38:58', 'SRM 166 - Div 2 Easy', 22),
(176, 2, 'BinaryCardinality', 'http://www.topcoder.com/stat?c=problem_statement&pm=1519&rd=4635', '2009-02-18 00:32:35', '2009-02-18 00:39:18', 'SRM 166 - Div 2 Medium', 22),
(177, 2, 'ConvexPolygon', 'http://www.topcoder.com/stat?c=problem_statement&pm=1660&rd=4635', '2009-02-18 00:33:26', '2009-02-18 00:39:39', 'SRM 166 - Div 2 Hard', 22),
(178, 2, 'StairClimb', 'http://www.topcoder.com/stat?c=problem_statement&pm=1937&rd=4645', '2009-02-18 04:53:44', '2009-02-18 17:07:55', 'SRM 168 - Div 2 Easy', 22),
(179, 2, 'LongNumber', 'http://www.topcoder.com/stat?c=problem_statement&pm=1863&rd=4635', '2009-02-18 23:01:11', '2009-02-18 23:01:11', 'SRM 166 Div 1 - Hard', 22),
(181, 2, 'GroceryBagger', 'http://www.topcoder.com/stat?c=problem_statement&pm=3450&rd=5868', '2009-02-19 00:32:49', '2009-02-19 00:39:28', 'SRM 222 - Div 2 Medium', 22),
(182, 2, 'TextCompressor', 'http://www.topcoder.com/stat?c=problem_statement&pm=3442&rd=5868', '2009-02-19 00:38:21', '2009-02-21 03:29:29', 'SRM 222 - Div 2 - Easy', 22),
(183, 2, 'SpreadsheetColumn', 'http://www.topcoder.com/stat?c=problem_statement&pm=4651', '2009-02-20 00:23:08', '2009-02-20 05:24:19', 'SRM 261 - Div 2 Easy', 22),
(184, 1, '(2/3/4)-D Sqr/Rects/Cubes/Boxes?', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=13&page=show_problem&problem=1118', '2009-02-20 15:33:11', '2009-02-20 15:33:11', '10177', 1),
(185, 2, 'TeamSplit', 'http://www.topcoder.com/stat?c=problem_statement&pm=4564&rd=7217', '2009-02-21 03:06:02', '2009-02-21 03:06:02', 'SRM 242 - Div 2 Easy', 22),
(186, 2, 'GuessCard', 'http://www.topcoder.com/stat?c=problem_statement&pm=4490&rd=7217', '2009-02-21 03:09:19', '2009-02-21 03:09:33', 'SRM 242 - Div 2 Medium', 22),
(187, 2, 'NumberSplit', 'http://www.topcoder.com/stat?c=problem_statement&pm=4451&rd=7217', '2009-02-21 03:10:22', '2009-02-21 03:10:22', 'SRM 242 - Div 2 Hard', 22),
(188, 2, 'DiceThrows', 'http://www.topcoder.com/stat?c=problem_statement&pm=4450&rd=7217', '2009-02-21 04:22:01', '2009-02-21 04:22:01', 'SRM 242 - Div 1 - Medium', 1),
(189, 2, 'BinaryCode', 'http://www.topcoder.com/stat?c=problem_statement&pm=1704&rd=4515', '2009-02-23 03:06:26', '2009-02-23 03:06:26', 'SRM 144 - Div 2 Medium', 22),
(190, 7, 'Pascal''s Travels', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=2704', '2009-02-23 23:27:57', '2009-02-23 23:27:57', '2704', 22),
(191, 1, 'Ugly Numbers', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=72', '2009-02-24 01:37:21', '2009-02-24 01:37:21', '136', 27),
(192, 2, 'MultiRead', 'http://www.topcoder.com/stat?c=problem_statement&pm=3526&rd=9826', '2009-02-25 18:42:58', '2009-03-02 20:46:15', 'SRM 305 - Div 2 Easy', 22),
(193, 2, 'PrimePairs', 'http://www.topcoder.com/stat?c=problem_statement&pm=10187&rd=13742', '2009-02-26 00:53:16', '2009-02-26 00:57:24', 'TCO09 Qual 1 - Div 1 Hard', 1),
(194, 1, 'Dungeon Master', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=7&page=show_problem&problem=473', '2009-02-26 15:03:29', '2009-02-26 15:03:29', '532', 17),
(195, 1, 'Bombs! NO they are Mines!!', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=18&page=show_problem&problem=1594', '2009-02-26 15:07:24', '2009-02-26 15:07:24', '10653', 17),
(196, 2, 'AzimuthMonitoring', 'http://www.topcoder.com/stat?c=problem_statement&pm=8027', '2009-02-26 15:27:26', '2009-02-26 15:27:26', 'SRM 360 - Div 2 Easy', 3),
(197, 2, 'InputBoxChecker', 'http://www.topcoder.com/stat?c=problem_statement&pm=6542', '2009-02-26 15:31:09', '2009-02-26 15:31:09', 'SRM 310 - Div 2 Medium', 3),
(198, 2, 'MeasuringTemperature', 'http://www.topcoder.com/stat?c=problem_statement&pm=6553', '2009-02-26 15:36:38', '2009-02-26 15:36:38', 'SRM 310 - Div 2 Easy', 3),
(199, 2, 'Shuffling', 'http://www.topcoder.com/stat?c=problem_statement&pm=6114', '2009-02-26 15:47:17', '2009-02-26 15:47:17', 'SRM 294 - Div 2 Medium', 3),
(200, 1, 'Flying to Fredericton', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=2255', '2009-02-26 16:36:15', '2009-02-26 16:36:15', '11280', 4),
(201, 2, 'ThreeCardMonte', 'http://www.topcoder.com/stat?c=problem_statement&pm=6109', '2009-02-26 23:39:50', '2009-02-26 23:39:50', 'SRM 294 - Div 2 Easy', 3),
(202, 2, 'SortingWithPermutation', 'http://www.topcoder.com/stat?c=problem_statement&pm=7952', '2009-02-26 23:48:10', '2009-02-26 23:48:10', 'TCO09 Qual 1 - Div 1 Easy', 3),
(203, 2, 'YearProgressbar', 'http://www.topcoder.com/stat?c=problem_statement&pm=10058', '2009-02-26 23:51:24', '2009-02-26 23:51:24', 'SRM 420 - Div 2 Medium', 3),
(204, 2, 'DeckRearranging', 'http://www.topcoder.com/stat?c=problem_statement&pm=9914&rd=13511', '2009-02-26 23:54:14', '2009-02-26 23:54:14', 'SRM 420 - Div 2 Easy', 3),
(205, 2, 'PrettyPrintingProduct', 'http://www.topcoder.com/stat?c=problem_statement&pm=9916&rd=13511', '2009-02-26 23:55:53', '2009-02-26 23:55:53', 'SRM 420 - Div 2 Hard', 3),
(206, 5, 'Jackpot', 'http://acm.tju.edu.cn/toj/showp2654.html', '2009-02-28 19:26:45', '2009-02-28 19:26:45', '2654', 4),
(208, 5, 'Budget', 'http://acm.tju.edu.cn/toj/showp2616.html', '2009-02-28 19:37:38', '2009-02-28 19:37:38', '2616', 4),
(215, 2, 'TireRotation', 'http://www.topcoder.com/stat?c=problem_statement&pm=1791', '2009-03-02 04:25:03', '2009-03-02 20:44:36', 'SRM 158 - Div 2 Easy', 22),
(216, 5, 'Hardware', 'http://acm.tju.edu.cn/toj/showp2651.html', '2009-03-02 17:19:01', '2009-03-02 17:19:01', '2651', 1),
(217, 5, 'Frogger', 'http://acm.tju.edu.cn/toj/showp2652.html', '2009-03-02 17:19:37', '2009-03-02 17:19:37', '2652', 1),
(218, 5, 'Gallup', 'http://acm.tju.edu.cn/toj/showp2653.html', '2009-03-02 17:20:16', '2009-03-02 17:20:16', '2653', 1),
(219, 5, 'Subway planning', 'http://acm.tju.edu.cn/toj/showp2655.html', '2009-03-02 17:20:53', '2009-03-02 17:20:53', '2655', 1),
(220, 5, 'Exploding CPU', 'http://acm.tju.edu.cn/toj/showp2656.html', '2009-03-02 17:21:32', '2009-03-02 17:21:32', '2656', 1),
(221, 2, 'ImageDithering', 'http://www.topcoder.com/stat?c=problem_statement&pm=1728', '2009-03-02 19:33:35', '2009-03-02 19:33:35', 'SRM 145 - Div 2 Easy', 22),
(222, 2, 'ExerciseMachine', 'http://www.topcoder.com/stat?c=problem_statement&pm=1675&rd=4530', '2009-03-02 19:38:42', '2009-03-02 19:38:42', 'SRM 145 - Div 2 Medium', 22),
(225, 2, 'HuffmanDecoding', 'http://www.topcoder.com/stat?c=problem_statement&pm=6477', '2009-03-02 22:05:21', '2009-03-02 22:05:21', 'SRM 308 - Div 2 Medium', 22),
(227, 2, 'FolderSize', 'http://www.topcoder.com/stat?c=problem_statement&pm=3102&rd=5864', '2009-03-02 23:40:00', '2009-03-02 23:40:00', 'SRM 218 - Div 2 Medium', 22),
(228, 4, 'Two Ends', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3379', '2009-03-03 02:14:25', '2009-03-03 02:14:25', '3379', 1),
(230, 2, 'Substitute', 'http://www.topcoder.com/stat?c=problem_statement&pm=1333', '2009-03-03 03:14:08', '2009-03-03 03:14:08', 'SRM 160 - Div 2 Easy', 22),
(231, 2, 'BinaryIncrementation', 'http://www.topcoder.com/stat?c=problem_statement&pm=7385', '2009-03-03 03:37:19', '2009-03-03 03:37:19', 'SRM 338 - Div 2 Easy', 22),
(232, 2, 'SuperRot', 'http://www.topcoder.com/stat?c=problem_statement&pm=1625', '2009-03-03 05:46:58', '2009-03-03 05:46:58', 'SRM 154 - Div 2 Medium', 22),
(234, 5, 'Spiderman''s workout', 'http://acm.tju.edu.cn/toj/showp2617.html', '2009-03-03 15:19:23', '2009-03-03 15:19:23', '2617', 1),
(235, 2, 'HanoiState', 'http://www.topcoder.com/stat?c=problem_statement&pm=8303&rd=10798', '2009-03-04 01:13:41', '2009-03-04 01:13:41', 'SRM 378 - Div 2 Hard', 22),
(236, 2, 'TrueStatements', 'http://www.topcoder.com/stat?c=problem_statement&pm=8390&rd=10798', '2009-03-04 13:48:06', '2009-03-04 13:48:06', 'SRM 378 - Div 2 Medium', 22),
(237, 1, 'Count on Cantor', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=4&page=show_problem&problem=200', '2009-03-05 00:13:41', '2009-03-05 00:13:41', '264', 27),
(238, 2, 'ProblemsToSolve', 'http://www.topcoder.com/stat?c=problem_statement&pm=7504&rd=10664', '2009-03-05 01:11:46', '2009-03-05 01:11:46', 'SRM 340 - Div 2 Medium', 6),
(239, 2, 'RepaintTheChessboard', 'http://www.topcoder.com/stat?c=problem_statement&pm=10330&rd=13757', '2009-03-06 02:10:19', '2009-03-06 02:10:19', 'TCO09 Qual 2 - Div 1 Easy', 22),
(240, 2, 'BidirectionalQueue', 'http://www.topcoder.com/stat?c=problem_statement&pm=10331&rd=13758', '2009-03-06 03:02:38', '2009-03-06 03:02:38', 'TCO09 Qual 3 - Div 1 Easy', 6),
(241, 2, 'PrettyPrintASpiral', 'http://www.topcoder.com/stat?c=round_overview&er=5&rd=13758', '2009-03-06 20:53:12', '2009-03-06 22:55:12', 'TCO09 Qual 3 - Div 1 Medium', 1),
(242, 2, 'MismatchedStrings', 'http://www.topcoder.com/stat?c=problem_statement&pm=10326', '2009-03-07 03:04:19', '2009-03-07 03:04:19', 'TCO09 Qual 3 - Div 1 Hard', 1),
(243, 2, 'KthProbableElement', 'http://www.topcoder.com/stat?c=problem_statement&pm=10335&rd=13759&rm=300540&cr=22713031', '2009-03-07 21:11:29', '2009-03-07 21:11:29', 'TCO09 Round 1 - Div 1 Medium', 1),
(244, 2, 'SequenceSums', 'http://www.topcoder.com/stat?c=problem_statement&pm=10241&rd=13759', '2009-03-08 06:34:26', '2009-03-08 06:34:26', 'TCO09 Round 1 - Div 1 Easy', 6),
(245, 2, 'Unicorn', 'http://www.topcoder.com/stat?c=problem_statement&pm=10317', '2009-03-08 20:36:18', '2009-03-08 20:36:18', 'TCO09 Round 1 - Div 1 Hard', 1),
(246, 1, 'Strategic Defense Initiative', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=6&problem=438&mosmsg=Submission+received+with+ID+6994147', '2009-03-10 16:14:33', '2009-03-10 16:14:33', '497', 4),
(247, 2, 'PageNumbers', 'http://www.topcoder.com/stat?c=problem_statement&pm=10329&rd=13757', '2009-03-10 23:07:53', '2009-03-10 23:07:53', 'TCO09 Qual 2 - Div 1 Medium', 1),
(248, 2, 'MedalTable', 'http://www.topcoder.com/stat?c=problem_statement&pm=2922&rd=5855', '2009-03-11 04:04:04', '2009-03-11 04:04:04', 'SRM 209 - Div 2 Medium', 22),
(249, 2, 'TallPeople', 'http://www.topcoder.com/stat?c=problem_statement&pm=2923&rd=5854', '2009-03-11 16:38:12', '2009-03-11 16:38:12', 'SRM 208 - Div 1 Easy', 22),
(250, 2, 'FriendScore', 'http://www.topcoder.com/stat?c=problem_statement&pm=10343&rd=13698&rm=300599&cr=22715336', '2009-03-11 17:47:33', '2009-03-11 17:47:33', 'SRM 436 - Div 2 Easy', 22),
(251, 1, 'Where''s Waldorf? ', 'http://acm.uva.es/p/v100/10010.html', '2009-03-15 21:05:59', '2009-03-15 21:05:59', '10010', 13),
(252, 3, 'Team Selection', 'http://www.spoj.pl/problems/NKTEAM/en/', '2009-03-18 02:14:29', '2009-03-18 02:14:29', '2224', 1),
(253, 1, 'Crimewave', 'http://uva.onlinejudge.org/external/5/563.html', '2009-03-18 03:04:55', '2009-03-18 03:04:55', '563', 1),
(254, 7, 'A Bug''s Life', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=2492', '2009-03-18 03:14:56', '2009-03-18 03:14:56', '2492', 22),
(255, 2, 'PalindromeMaker', 'http://www.topcoder.com/stat?c=problem_statement&pm=5881&rd=8071', '2009-03-18 04:57:02', '2009-03-18 04:57:02', 'SRM 274 - Div 2 Medium', 22),
(256, 2, 'AmountApproximation', 'http://www.topcoder.com/stat?c=problem_statement&pm=4845&rd=8071', '2009-03-18 05:06:17', '2009-03-18 05:06:17', 'SRM 274 - Div 2 Hard', 22),
(257, 1, 'Modular Fibonacci', 'http://uva.onlinejudge.org/external/102/10229.html', '2009-03-20 01:32:17', '2009-03-20 01:32:17', '10299', 1),
(258, 5, 'Task', 'http://acm.tju.edu.cn/toj/showp2892.html', '2009-03-22 03:10:42', '2009-03-22 03:10:42', '2892', 1),
(259, 7, 'Period', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1961', '2009-03-22 23:25:21', '2009-03-22 23:25:21', '1961', 1),
(260, 7, 'Corporative Network', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1962', '2009-03-22 23:25:57', '2009-03-22 23:25:57', '1962', 1),
(261, 7, 'Cave Exploration', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1963', '2009-03-22 23:26:25', '2009-03-22 23:26:25', '1963', 1),
(262, 7, 'City game', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1964', '2009-03-22 23:26:53', '2009-03-22 23:26:53', '1964', 1),
(263, 7, 'Cube Root', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1965', '2009-03-22 23:27:22', '2009-03-22 23:27:22', '1965', 1),
(264, 7, 'Cable TV Network', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1966', '2009-03-22 23:28:20', '2009-03-22 23:28:20', '1966', 1),
(265, 7, 'Alibaba', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1967', '2009-03-22 23:28:42', '2009-03-22 23:28:42', '1967', 1),
(266, 7, 'Booklets', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1968', '2009-03-22 23:29:13', '2009-03-22 23:29:13', '1968', 1),
(267, 7, 'Count on Cantor', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1969', '2009-03-22 23:29:44', '2009-03-22 23:29:44', '1969', 1),
(268, 5, 'Period', 'http://acm.tju.edu.cn/toj/showp1687.html', '2009-03-23 05:07:46', '2009-03-23 05:07:46', '1687', 13),
(269, 1, 'Polynomial coefficients', 'http://acm.uva.es/problemset/v101/10105.html', '2009-03-24 01:32:36', '2009-03-24 01:32:36', '10105', 13),
(270, 5, 'Homework', 'http://acm.tju.edu.cn/toj/showp2780.html', '2009-03-24 06:01:35', '2009-03-24 06:01:35', '2780', 27),
(271, 2, 'TheSwap', 'http://www.topcoder.com/stat?c=problem_statement&pm=10369&rd=13699&rm=300712&cr=22713031', '2009-03-25 03:23:34', '2009-03-25 03:23:34', 'SRM 437 - Div 1 Easy', 1),
(272, 2, 'TennisSet', 'http://www.topcoder.com/stat?c=problem_statement&pm=2339', '2009-03-26 03:01:43', '2009-03-26 03:01:43', 'SRM 183 - Div 1 Easy', 22),
(273, 2, 'TheInteger', 'http://www.topcoder.com/stat?c=problem_statement&pm=10231&rd=13699', '2009-03-27 00:58:26', '2009-03-27 00:58:26', 'SRM 437 - Div 1 Medium', 1),
(274, 7, 'Knight Moves', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1915', '2009-03-27 17:30:04', '2009-03-27 17:30:04', '1915', 4),
(275, 1, 'GCD', 'http://uva.onlinejudge.org/external/114/11417.html', '2009-03-28 18:09:02', '2009-03-28 18:09:02', '11417', 32),
(276, 4, 'Close Enough Computations', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4192', '2009-03-28 21:48:07', '2009-03-28 21:49:25', '4192', 1),
(277, 4, 'I-Soar', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4193', '2009-03-28 21:48:35', '2009-03-28 21:49:56', '4193', 1),
(278, 4, 'Trie, Trie again', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4194', '2009-03-28 21:50:29', '2009-03-28 21:50:29', '4194', 1),
(279, 4, 'Lawrence of Arabia', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4195', '2009-03-28 21:50:51', '2009-03-28 21:50:51', '4195', 1),
(280, 4, 'Series / Parallel Resistor Circuits', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4196', '2009-03-28 21:51:21', '2009-03-28 21:51:21', '4196', 1),
(281, 4, 'Combination Lock', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4197', '2009-03-28 21:52:00', '2009-03-28 21:52:00', '4197', 1),
(282, 4, 'Stems Sell', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4198', '2009-03-28 21:52:29', '2009-03-28 21:52:29', '4198', 1),
(283, 4, 'Signal Strength', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4199', '2009-03-28 21:53:00', '2009-03-28 21:53:00', '4199', 1),
(284, 5, 'Hanafuda Shuffle', 'http://acm.tju.edu.cn/toj/showp2636.html', '2009-03-30 02:29:36', '2009-03-30 02:29:36', '2636', 27),
(285, 5, 'HERMAN', 'http://acm.tju.edu.cn/toj/showp2945.html', '2009-03-31 05:24:34', '2009-03-31 05:24:34', '2945', 32),
(286, 5, 'Red and Black', 'http://acm.tju.edu.cn/toj/showp2637.html', '2009-03-31 05:32:42', '2009-03-31 05:32:42', '2637', 32),
(287, 5, '01000001', 'http://acm.tju.edu.cn/toj/showp2149.html', '2009-03-31 05:47:37', '2009-03-31 05:47:37', '2149', 32),
(288, 5, 'OKVIRI', 'http://acm.tju.edu.cn/toj/showp2946.html', '2009-03-31 06:05:28', '2009-03-31 06:05:28', '2946', 32),
(289, 1, 'Counting Stars', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=2201', '2009-03-31 06:09:14', '2009-03-31 06:09:14', '11244', 32),
(290, 5, 'Dirichlet''s Theorem on Arithmetic Progressions', 'http://acm.tju.edu.cn/toj/showp2601.html', '2009-03-31 20:13:16', '2009-03-31 20:13:16', '2601', 32),
(291, 1, 'Prefix lookup', 'http://uva.onlinejudge.org/external/115/11590.html', '2009-04-02 22:35:02', '2009-04-02 22:35:02', '11590', 1),
(292, 4, 'Bit Compressor', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3565', '2009-04-03 03:36:10', '2009-04-03 03:36:10', '3565', 1),
(293, 1, '9 Puzzle', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=27&page=show_problem&problem=2508', '2009-04-03 04:14:13', '2009-04-03 04:14:13', '11513', 12),
(294, 7, 'Party Lamps', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1176', '2009-04-04 03:41:41', '2009-04-04 03:41:41', '1176', 12),
(295, 8, 'Pattern Matching Using Regular Expression', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1448', '2009-04-06 00:48:54', '2009-04-06 00:48:54', '1448', 1),
(296, 8, 'Maximum sum', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1449', '2009-04-06 00:49:29', '2009-04-06 00:49:29', '1449', 1),
(297, 8, 'Minimal circle', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1450', '2009-04-06 00:49:59', '2009-04-06 00:49:59', '1450', 1),
(298, 8, 'Elevator simulation', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1451', '2009-04-06 00:50:31', '2009-04-06 00:50:31', '1451', 1),
(299, 8, 'Card Game - Kitty Fishing', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1452', '2009-04-06 00:51:05', '2009-04-06 00:51:05', '1452', 1),
(300, 8, 'Surround the trees', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1453', '2009-04-06 00:51:50', '2009-04-06 00:51:50', '1453', 1),
(301, 8, 'Employment planning', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1454', '2009-04-06 00:52:37', '2009-04-06 00:52:37', '1454', 1),
(302, 5, 'The Circumference of the Circle', 'http://acm.tju.edu.cn/toj/showp1131.html', '2009-04-06 03:14:49', '2009-04-06 03:15:33', '1131', 27),
(303, 5, 'All in All', 'http://acm.tju.edu.cn/toj/showp1401.html', '2009-04-07 22:47:29', '2009-04-07 22:47:29', '1401', 38),
(304, 5, 'Web Navigation', 'http://acm.tju.edu.cn/toj/showp1196.html', '2009-04-07 22:58:45', '2009-04-07 22:58:45', '1196', 38),
(305, 5, 'Temple of Dune', 'http://acm.tju.edu.cn/toj/showp1414.html', '2009-04-07 23:16:28', '2009-04-07 23:16:28', '1414', 38),
(306, 5, 'Sales Report', 'http://acm.tju.edu.cn/toj/showp2366.html', '2009-04-09 14:03:24', '2009-04-09 14:03:24', '2366', 38),
(307, 7, 'The Clocks', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1166', '2009-04-09 20:15:53', '2009-04-09 20:15:53', '1166', 12),
(308, 7, 'Rotating Rings', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=3509', '2009-04-11 00:36:04', '2009-04-11 00:36:04', '3509', 38),
(309, 1, 'Graphical Editor', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=14&page=show_problem&problem=1208', '2009-04-11 07:14:26', '2009-04-11 07:14:26', '10267', 22),
(310, 5, 'Fermat square prime', 'http://acm.tju.edu.cn/toj/showp3241.html', '2009-04-18 23:28:09', '2009-04-18 23:28:09', '3241', 20),
(311, 5, 'Cowculations', 'http://acm.tju.edu.cn/toj/showp1566.html', '2009-04-19 00:23:57', '2009-04-19 00:23:57', '1566', 32),
(312, 5, 'Euchre Results', 'http://acm.tju.edu.cn/toj/showp1527.html', '2009-04-19 02:42:23', '2009-04-19 02:42:23', '1527', 32),
(313, 2, 'Unlucky Numbers', 'http://www.topcoder.com/stat?c=problem_statement&pm=10396&rd=13803&rm=300977&cr=22778231', '2009-04-19 18:36:28', '2009-04-20 17:36:14', 'SRM 438 - Div 2 Easy', 22),
(314, 2, 'SRM 438 - Div 1 Easy - UnluckyIntervals', 'http://www.topcoder.com/stat?c=problem_statement&pm=10356&rd=13803&rm=300939&cr=15608708', '2009-04-20 04:58:25', '2009-04-20 04:58:25', '4', 35),
(315, 5, 'Spin', 'http://acm.tju.edu.cn/toj/showp1973.html', '2009-04-21 00:25:06', '2009-04-21 00:25:06', '1973', 32),
(316, 4, 'Emoticons :-)', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3931', '2009-04-21 05:29:42', '2009-04-21 05:29:42', '3931', 32),
(317, 2, 'FeudaliasBattle', 'http://www.topcoder.com/stat?c=problem_statement&pm=10360&rd=13803', '2009-04-21 18:45:05', '2009-04-21 18:45:05', 'SRM 438 - Div 2 Medium', 22),
(318, 1, 'Bicoloring', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=12&page=show_problem&problem=945', '2009-04-24 05:06:54', '2009-04-24 05:06:54', '10004', 27),
(319, 1, 'Oil Deposits', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=7&page=show_problem&problem=513', '2009-04-26 21:54:52', '2009-04-26 21:54:52', '572', 27),
(320, 1, 'What''s Cryptanalysis?', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=63&page=show_problem&problem=949', '2009-04-27 06:07:41', '2009-04-27 06:07:41', '10008', 32),
(321, 1, 'All Roads Lead Where?', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=63&page=show_problem&problem=950', '2009-04-27 07:25:33', '2009-04-27 07:25:33', '10009', 27),
(322, 1, 'Minesweeper', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=13&page=show_problem&problem=1130', '2009-04-28 05:48:16', '2009-04-28 05:48:16', '10189', 27),
(323, 5, 'Doubles', 'http://acm.tju.edu.cn/toj/showp1930.html', '2009-04-29 21:12:45', '2009-04-29 21:12:45', '1930', 32);
INSERT INTO `problems` (`id`, `judge_id`, `title`, `url`, `created_at`, `updated_at`, `number`, `owner_id`) VALUES
(324, 7, 'Bridge Hands', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=1786', '2009-04-30 00:06:47', '2009-04-30 00:06:47', '1786', 22),
(325, 5, 'A Simple Task', 'http://acm.tju.edu.cn/toj/showp1476.html', '2009-04-30 02:43:09', '2009-04-30 02:43:09', '1476', 32),
(326, 1, 'Pascal''s Triangle of Death', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=6&page=show_problem&problem=426', '2009-05-02 04:40:26', '2009-05-02 04:40:26', '485', 45),
(327, 4, 'Multiple', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=2040', '2009-05-03 02:21:43', '2009-05-03 02:21:43', '2040', 45),
(328, 1, 'How Many Fibs?', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=13&page=show_problem&problem=1124', '2009-05-03 02:36:45', '2009-05-03 02:36:45', '10183', 45),
(329, 1, 'Football  (aka Soccer)', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=13&page=show_problem&problem=1135', '2009-05-03 02:43:52', '2009-05-03 02:43:52', '10194', 45),
(330, 5, 'Pay Back', 'http://acm.tju.edu.cn/toj/showp3203.html', '2009-05-06 20:30:42', '2009-05-06 20:30:42', '3203', 32),
(331, 1, 'UltraQuickSort', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=20&page=show_problem&problem=1751', '2009-05-07 04:38:15', '2009-05-07 04:38:15', '10810', 45),
(332, 1, 'Digit PrimeTest', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=17&page=show_problem&problem=1474', '2009-05-07 04:39:19', '2009-05-07 04:39:19', '10533', 45),
(333, 1, 'Heavy Cargo', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=7&page=show_problem&problem=485', '2009-05-08 05:32:13', '2009-05-08 05:32:13', '544', 22),
(334, 1, 'Frogger', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=7&page=show_problem&problem=475', '2009-05-09 00:22:20', '2009-05-09 00:22:20', '534', 22),
(335, 4, 'Frogger', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=2307', '2009-05-10 17:12:07', '2009-05-10 17:12:07', '2307', 6),
(336, 8, 'Server Relocation', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=1886', '2009-05-12 03:21:24', '2009-05-12 03:26:00', '2887', 38),
(337, 4, 'My Bad', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/p4446.pdf', '2009-05-12 03:59:11', '2009-05-12 03:59:11', '4446', 6),
(338, 8, 'Do The Untwist', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1006', '2009-05-13 01:21:02', '2009-05-13 01:21:02', '1006', 38),
(339, 5, 'Parencodings', 'http://acm.tju.edu.cn/toj/showp1242.html', '2009-05-15 03:21:26', '2009-05-15 03:21:26', '1242', 38),
(340, 5, 'The Worm Turns', 'http://acm.tju.edu.cn/toj/showp1191.html', '2009-05-15 15:03:29', '2009-05-15 15:03:29', '1191', 3),
(341, 5, 'Friends', 'http://acm.tju.edu.cn/toj/showp2469.html', '2009-05-18 21:45:16', '2009-05-18 21:45:16', '2469', 27),
(342, 7, 'Hide That Number', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=3508', '2009-05-18 23:28:53', '2009-05-18 23:28:53', '3508', 12),
(343, 7, 'Fermat''s Christmas Theorem', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=3511', '2009-05-20 04:21:08', '2009-05-20 04:21:08', '3511', 4),
(344, 7, 'Judging Olympia', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=3507', '2009-05-20 13:43:44', '2009-05-20 13:43:44', '3507', 4),
(345, 7, 'Incidental Points', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=3512', '2009-05-20 16:18:08', '2009-05-20 16:18:08', '3512', 38),
(346, 1, 'Common Permutation', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=14&page=show_problem&problem=1193', '2009-05-23 18:15:22', '2009-05-23 18:15:22', '10252', 49),
(347, 1, 'hartals', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=12&page=show_problem&problem=991', '2009-05-23 19:09:37', '2009-05-23 19:09:37', '10050', 49),
(348, 1, 'WERTYU', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=12&problem=1023&mosmsg=Submission+received+with+ID+7105843', '2009-05-23 19:12:47', '2009-05-23 19:12:47', '10082', 49),
(349, 1, 'Fibonacci Freeze', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=6&problem=436&mosmsg=Submission+received+with+ID+7098960', '2009-05-23 19:17:20', '2009-05-23 19:17:20', '495', 49),
(350, 8, 'Build The Electric System', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=2966', '2009-05-23 22:16:23', '2009-05-23 22:16:23', '2966', 22),
(351, 1, 'Galactic Import', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=5&page=show_problem&problem=324', '2009-05-26 15:15:35', '2009-05-26 15:16:46', '388', 4),
(352, 1, 'Freckles', 'http://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=975', '2009-05-27 04:15:22', '2009-05-27 04:15:22', '10034', 22),
(353, 2, 'PerfectPermutation', 'http://www.topcoder.com/stat?c=problem_statement&pm=10463', '2009-05-28 20:52:44', '2009-05-28 20:52:44', 'SRM 441 - Div 1 Easy', 6),
(354, 2, 'DifferentStrings', 'http://www.topcoder.com/stat?c=problem_statement&pm=10376', '2009-05-30 03:07:23', '2009-05-30 03:07:23', 'SRM 441 - Div 2 Easy', 6),
(355, 5, 'Mispelling', 'http://acm.tju.edu.cn/toj/showp3004.html', '2009-05-31 05:47:36', '2009-05-31 05:47:36', '3004', 35),
(356, 5, 'Conversions', 'http://acm.tju.edu.cn/toj/showp3005.html', '2009-05-31 05:48:33', '2009-05-31 05:48:33', '3005', 35),
(357, 5, 'Encoding ', 'http://acm.tju.edu.cn/toj/showp3006.html', '2009-05-31 05:55:35', '2009-05-31 05:55:35', '3006', 35),
(358, 5, 'Decoding', 'http://acm.tju.edu.cn/toj/showp3007.html', '2009-05-31 06:21:35', '2009-05-31 06:21:35', '3007', 35),
(359, 5, 'Flipping Burned Pancakes', 'http://acm.tju.edu.cn/toj/showp3008.html', '2009-05-31 06:26:45', '2009-05-31 06:26:45', '3008', 35),
(360, 5, 'Monkey Vines', 'http://acm.tju.edu.cn/toj/showp3009.html', '2009-05-31 06:27:54', '2009-05-31 06:27:54', '3009', 35),
(361, 5, 'Model Rocket Height', 'http://acm.tju.edu.cn/toj/showp3010.html', '2009-05-31 06:37:32', '2009-05-31 06:37:32', '3010', 35),
(362, 5, 'Tiling a Grid With Dominoes', 'http://acm.tju.edu.cn/toj/showp3011.html', '2009-05-31 06:38:16', '2009-05-31 06:38:16', '3011', 35),
(363, 5, 'Spatial Concepts Test', 'http://acm.tju.edu.cn/toj/showp3012.html', '2009-05-31 06:38:59', '2009-05-31 06:38:59', '3012', 35),
(364, 5, 'Alfredo''s Pizza Restaurant', 'http://acm.tju.edu.cn/toj/showp3013.html', '2009-05-31 06:39:52', '2009-05-31 06:39:52', '3013', 35),
(365, 5, 'Broken Keyboard', 'http://acm.tju.edu.cn/toj/showp3014.html', '2009-05-31 06:45:49', '2009-05-31 06:45:49', '3014', 35),
(366, 5, 'Convert Kilometers to Miles', 'http://acm.tju.edu.cn/toj/showp3015.html', '2009-05-31 06:53:57', '2009-05-31 06:53:57', '3015', 35),
(367, 5, 'Decode the Strings', 'http://acm.tju.edu.cn/toj/showp3016.html', '2009-05-31 07:01:10', '2009-05-31 07:01:10', '3016', 35),
(368, 5, 'El Dorado', 'http://acm.tju.edu.cn/toj/showp3017.html', '2009-05-31 07:10:05', '2009-05-31 07:10:05', '3017', 35),
(369, 5, 'String Matching', 'http://acm.tju.edu.cn/toj/showp1630.html', '2009-05-31 07:20:19', '2009-05-31 07:20:19', '1630', 22),
(370, 1, 'Super long sums', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=12&page=show_problem&problem=954', '2009-05-31 23:04:21', '2009-05-31 23:04:21', '10013 ', 32),
(371, 1, 'Integer Inquiry', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=6&page=show_problem&problem=365', '2009-05-31 23:19:49', '2009-05-31 23:19:49', '424', 32),
(372, 1, 'Haiku Review', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=7&page=show_problem&problem=517', '2009-05-31 23:23:41', '2009-05-31 23:23:41', '576', 32),
(373, 1, 'Word Scramble', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=6&page=show_problem&problem=424', '2009-05-31 23:32:40', '2009-05-31 23:32:40', '483', 32),
(374, 1, 'Automatic Poetry', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=15&page=show_problem&problem=1302', '2009-05-31 23:36:16', '2009-05-31 23:36:16', '10361', 32),
(375, 1, 'Love Calculator', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=16&page=show_problem&problem=1365', '2009-05-31 23:39:52', '2009-05-31 23:39:52', '10424', 32),
(376, 1, 'Maximum Sum (II)', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=18&page=show_problem&problem=1597', '2009-05-31 23:55:25', '2009-05-31 23:55:25', '10656', 32),
(377, 5, 'Shipping Routes', 'http://acm.tju.edu.cn/toj/showp1572.html', '2009-06-07 07:37:46', '2009-06-07 07:37:46', '1572', 38),
(378, 5, 'Slurpys', 'http://acm.tju.edu.cn/toj/showp1573.html', '2009-06-07 07:40:17', '2009-06-07 07:40:17', '1573', 38),
(379, 5, 'Tower Parking', 'http://acm.tju.edu.cn/toj/showp3037.html', '2009-06-07 07:41:12', '2009-06-07 07:41:12', '3037', 38),
(380, 8, 'Professor John', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1589', '2009-06-08 04:28:32', '2009-06-08 04:28:32', '1589', 22),
(381, 3, 'Marbles', 'http://www.spoj.pl/problems/MARBLES/', '2009-06-08 19:48:12', '2009-06-08 19:48:12', '78', 53),
(382, 3, 'Matrix Summation', 'http://www.spoj.pl/problems/MATSUM/', '2009-06-08 20:06:07', '2009-06-08 20:06:07', '1029', 53),
(383, 3, 'Order statistic set', 'http://www.spoj.pl/problems/ORDERSET/', '2009-06-08 20:10:04', '2009-06-08 20:10:04', '3273', 53),
(384, 3, '106 miles to Chicago', 'http://www.spoj.pl/problems/CHICAGO/', '2009-06-08 20:17:22', '2009-06-08 20:17:22', '381', 53),
(385, 5, 'Nearest number - 2', 'http://acm.tju.edu.cn/toj/showp2322.html', '2009-06-10 07:57:06', '2009-06-10 07:57:06', '2322', 53),
(386, 5, 'Advanced ASCII Cubes', 'http://acm.tju.edu.cn/toj/showp2323.html', '2009-06-10 07:57:48', '2009-06-10 07:57:48', '2323', 53),
(387, 5, 'Water pipe', 'http://acm.tju.edu.cn/toj/showp2324.html', '2009-06-10 07:58:07', '2009-06-10 07:58:07', '2324', 53),
(388, 5, 'Simple prefix compression', 'http://acm.tju.edu.cn/toj/showp2327.html', '2009-06-10 07:58:28', '2009-06-10 07:58:28', '2327', 53),
(389, 5, 'Crashing Robots', 'http://acm.tju.edu.cn/toj/showp1801.html', '2009-06-11 08:26:39', '2009-06-11 08:26:39', '1801', 53),
(390, 5, 'Electrical Outlets', 'http://acm.tju.edu.cn/toj/showp1805.html', '2009-06-11 08:26:56', '2009-06-11 08:26:56', '1805', 53),
(391, 5, 'Necklace Decomposition', 'http://acm.tju.edu.cn/toj/showp1808.html', '2009-06-11 08:27:15', '2009-06-11 08:27:15', '1808', 53),
(392, 5, 'SLIKAR', 'http://acm.tju.edu.cn/toj/showp2947.html', '2009-06-12 07:42:36', '2009-06-12 07:42:36', '2947', 53),
(393, 5, 'PATULJCI', 'http://acm.tju.edu.cn/toj/showp2950.html', '2009-06-12 07:50:56', '2009-06-12 07:50:56', '2950', 53),
(394, 5, 'NPUZZLE', 'http://acm.tju.edu.cn/toj/showp2951.html', '2009-06-12 07:53:32', '2009-06-12 07:53:32', '2951', 53),
(395, 5, 'CETVRTA', 'http://acm.tju.edu.cn/toj/showp2955.html', '2009-06-12 07:54:51', '2009-06-12 07:54:51', '2955', 53),
(396, 5, 'Travel', 'http://acm.tju.edu.cn/toj/showp.php?pid=2819', '2009-06-13 00:26:36', '2009-06-13 00:26:36', '2819', 27),
(397, 5, 'Prairie dogs IV', 'http://acm.tju.edu.cn/toj/showp2818.html', '2009-06-13 01:47:45', '2009-06-13 01:47:45', '2818', 53),
(398, 5, 'Prairie dogs III', 'http://acm.tju.edu.cn/toj/showp2805.html', '2009-06-13 02:01:30', '2009-06-13 02:01:30', '2805', 53),
(399, 5, 'The Quadratic Equation', 'http://acm.tju.edu.cn/toj/showp2803.html', '2009-06-13 02:03:22', '2009-06-13 02:03:22', '2803', 53),
(400, 5, 'Binary Numbers', 'http://acm.tju.edu.cn/toj/showp1477.html', '2009-06-14 07:51:35', '2009-06-14 07:51:35', '1477', 53),
(401, 5, 'Binary Stirling Numbers', 'http://acm.tju.edu.cn/toj/showp1479.html', '2009-06-14 07:51:58', '2009-06-14 07:51:58', '1479', 53),
(402, 5, 'Calendar of Maya', 'http://acm.tju.edu.cn/toj/showp1480.html', '2009-06-14 07:52:31', '2009-06-14 07:52:31', '1480', 53),
(403, 1, 'Spreading the News', 'http://uva.onlinejudge.org/index.php?option=onlinejudge&Itemid=99999999&page=problem_stats&problemid=865&category=', '2009-06-15 18:53:45', '2009-06-15 18:53:45', '924', 27),
(404, 1, 'Perfection', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=5&page=show_problem&problem=318', '2009-06-17 00:40:49', '2009-06-17 00:40:49', '382', 27),
(405, 2, 'SimpleWordGame', 'http://www.topcoder.com/stat?c=problem_statement&pm=10465', '2009-06-18 02:28:30', '2009-06-18 02:28:30', 'SRM 442 - Div 2 Easy', 6),
(406, 2, 'Underprimes', 'http://www.topcoder.com/stat?c=problem_statement&pm=10274', '2009-06-18 02:32:53', '2009-06-18 02:32:53', 'SRM 442 - Div 2 Medium', 6),
(407, 2, 'EqualTowers', 'http://www.topcoder.com/stat?c=problem_statement&pm=10466&rd=13750', '2009-06-20 05:57:20', '2009-06-20 05:57:20', 'SRM 442 - Div 2 Hard', 6),
(408, 5, 'Hay Expenses', 'http://acm.tju.edu.cn/toj/showp3161.html', '2009-06-20 21:16:07', '2009-06-20 21:16:07', '3161', 6),
(409, 5, 'Plumbing the Pond', 'http://acm.tju.edu.cn/toj/showp3204.html', '2009-06-20 21:17:41', '2009-06-20 21:17:41', '3204', 6),
(410, 5, 'The Perfect Cow', 'http://acm.tju.edu.cn/toj/showp3205.html', '2009-06-20 21:19:09', '2009-06-20 21:19:09', '3205', 6),
(411, 5, 'Dairy Queen', 'http://acm.tju.edu.cn/toj/showp3206.html', '2009-06-20 21:20:16', '2009-06-20 21:20:16', '3206', 6),
(412, 2, 'IncredibleMachineEasy', 'http://www.topcoder.com/stat?c=problem_statement&pm=10309', '2009-06-21 07:07:52', '2009-06-21 07:07:52', 'SRM 440 - Div 2 Easy', 6),
(413, 5, 'Hansel and Grethel', 'http://acm.tju.edu.cn/toj/showp1493.html', '2009-06-22 19:24:25', '2009-06-22 19:24:25', '1493', 20),
(414, 5, 'Input', 'http://acm.tju.edu.cn/toj/showp1498.html', '2009-06-22 19:31:04', '2009-06-22 19:31:04', '1498', 20),
(415, 2, 'CirclesCountry', 'http://www.topcoder.com/stat?c=problem_statement&pm=10297&rd=13751&rm=301636&cr=22781702', '2009-06-24 03:39:50', '2009-06-24 03:39:50', 'SRM 443 - Div 2 Medium', 22),
(416, 1, 'Friends', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=18&page=show_problem&problem=1549', '2009-06-26 03:28:18', '2009-06-26 03:28:18', '10608', 22),
(417, 2, 'SoccerLeagues', 'http://www.topcoder.com/stat?c=problem_statement&pm=10505', '2009-06-27 15:58:48', '2009-06-27 15:58:48', 'SRM 443 - Div 2 Easy', 6),
(418, 2, 'Polygons2', 'http://www.topcoder.com/stat?c=problem_statement&pm=9995', '2009-06-28 03:45:41', '2009-06-28 03:45:41', 'SRM 443 - Div 2 Hard', 6),
(419, 8, 'Arbitrage', 'http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1092', '2009-06-30 02:20:22', '2009-06-30 02:20:22', '1092', 22),
(420, 5, 'Swamp Things', 'http://acm.tju.edu.cn/toj/showp2008.html', '2009-07-01 02:46:09', '2009-07-01 02:46:09', '2008', 35),
(421, 2, 'NumericalPerfectionLevel ', 'http://www.topcoder.com/stat?c=problem_statement&pm=10457&rd=13898', '2009-07-08 15:55:52', '2009-07-08 16:04:07', 'SRM 444 - Div2 Medium', 20),
(422, 4, 'Einbahnstrasse', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4366', '2009-07-25 16:50:20', '2009-07-25 16:50:20', '4366', 45),
(423, 1, 'The 3n + 1 problem ', 'http://uva.onlinejudge.org/external/1/100.html', '2009-08-18 00:39:15', '2009-08-18 00:39:15', '100', 64),
(424, 9, 'Minimum Transport Cost', 'http://acm.hdu.edu.cn/showproblem.php?pid=1385', '2009-08-28 17:28:31', '2009-08-28 17:28:31', '1385', 22),
(425, 7, 'Hotel', 'http://acm.pku.edu.cn/JudgeOnline/problem?id=2901', '2009-08-30 23:10:49', '2009-08-30 23:10:49', '2901', 1),
(426, 1, 'Non-Stop Travel', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=5&page=show_problem&problem=277', '2009-08-31 05:49:34', '2009-08-31 05:49:34', '341', 27),
(427, 2, 'ImportsList', 'http://www.topcoder.com/stat?c=problem_statement&pm=10579&rd=13901&rm=302152&cr=22778231', '2009-08-31 16:13:44', '2009-08-31 16:13:44', 'SRM 447 - Div 2 - Hard', 22),
(428, 5, 'Overflowing Bookshelf', 'http://acm.tju.edu.cn/toj/showp1885.html', '2009-09-01 01:58:20', '2009-09-01 01:58:20', '1885', 27),
(429, 1, 'Family Tree', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=78&page=show_problem&problem=2662', '2009-09-04 03:03:03', '2009-09-04 03:03:03', '11615', 22),
(430, 10, 'Alien Language', 'http://code.google.com/codejam/contest/dashboard?c=90101#s=p0&a=2', '2009-09-04 13:10:56', '2009-09-04 13:10:56', 'A', 41),
(431, 1, 'Knight Moves', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=105&page=show_problem&problem=380', '2009-09-05 01:27:53', '2009-09-05 01:27:53', '439', 22),
(432, 1, 'Audiophobia', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=116&page=show_problem&problem=989', '2009-09-05 02:50:14', '2009-09-05 02:50:14', '10048', 22),
(433, 1, 'Connect the Campus', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=116&page=show_problem&problem=1338', '2009-09-05 03:27:59', '2009-09-07 14:17:40', '10397', 22),
(434, 1, 'GrayInc', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=78&problem=2710', '2009-09-06 20:03:50', '2009-09-06 20:03:50', '11663', 1),
(435, 1, 'Burger Time?', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=78&problem=2708&mosmsg=Submission+received+with+ID+7375287', '2009-09-07 01:28:32', '2009-09-07 01:28:32', '11661', 20),
(436, 1, 'Maximum Sum', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=3&problem=44&mosmsg=Submission+received+with+ID+7376365', '2009-09-07 06:49:38', '2009-09-07 06:49:38', '108', 27),
(437, 1, 'Look-and-Say sequences', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=78&problem=2707', '2009-09-09 01:15:07', '2009-09-09 01:15:07', '11660', 4),
(439, 11, 'The Next Number', 'http://code.google.com/codejam/contest/dashboard?c=186264#s=p1', '2009-09-12 21:26:18', '2009-09-12 21:26:18', 'Round 1B 2009 - Problem B', 6),
(440, 1, 'Coin Change', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=114&page=show_problem&problem=615', '2009-09-15 01:26:46', '2009-09-15 01:26:46', '674', 20),
(441, 1, 'Inscribed Circles and Isosceles Triangles', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=101&problem=311&mosmsg=Submission+received+with+ID+7400750', '2009-09-15 14:32:17', '2009-09-15 14:32:17', '375', 20),
(442, 1, 'Just the Facts', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=100&page=show_problem&problem=509', '2009-09-15 14:44:26', '2009-09-15 14:44:26', '568', 20),
(443, 3, 'He is offside!', 'http://www.spoj.pl/problems/OFFSIDE/', '2009-09-17 20:49:07', '2009-09-17 20:49:07', '2178', NULL),
(444, 1, 'Climbing Trees', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=51', '2009-09-20 00:04:06', '2009-09-20 00:04:06', '115', 67),
(445, 1, 'The Bases Are Loaded', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=5&page=show_problem&problem=291', '2009-09-20 14:48:47', '2009-09-20 14:48:47', '355', 27),
(446, 1, 'Basically Speaking', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=5&page=show_problem&problem=325', '2009-09-20 14:53:20', '2009-09-20 14:53:20', '389', 27),
(447, 1, 'Big Mod', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=5&page=show_problem&problem=310', '2009-09-20 18:48:20', '2009-09-20 18:48:20', '374', 27),
(448, 1, 'Unidirectional TSP', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=52', '2009-09-20 19:12:48', '2009-09-20 19:12:48', '116', 67),
(449, 1, 'Mutant Flatworld Explorers', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=54', '2009-09-20 19:24:57', '2009-09-20 19:24:57', '118', 67),
(450, 1, 'Greedy Gift Givers', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=55', '2009-09-21 00:12:12', '2009-09-21 00:12:12', '119', 67),
(451, 1, 'Ecological Bin Packing', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=38', '2009-09-21 01:26:07', '2009-09-21 01:26:07', '102', 67),
(452, 1, 'Stacking Boxes', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=39', '2009-09-21 01:31:57', '2009-09-21 01:31:57', '103', 67),
(453, 1, 'History Grading', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=47', '2009-09-21 02:37:56', '2009-09-21 02:37:56', '111', 67),
(454, 1, 'Tree Summing', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=48', '2009-09-21 02:42:11', '2009-09-21 02:42:11', '112', 67),
(455, 1, 'How Many Trees?', 'http://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1244', '2009-09-23 05:29:05', '2009-09-23 05:29:05', '10303', 27),
(456, 4, 'Shoring Up the Levees', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4227', '2009-09-23 07:16:18', '2009-09-23 07:16:18', '4227', 75),
(457, 1, 'Combinations', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=5&page=show_problem&problem=305', '2009-09-23 21:13:57', '2009-09-23 21:13:57', '369', 27),
(458, 4, 'Odd or Even', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3656', '2009-09-27 21:56:15', '2009-09-27 21:56:15', '3656', 4),
(459, 4, 'Computer DJ', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3474', '2009-09-27 22:26:46', '2009-09-27 22:26:46', '3474', 12),
(460, 1, 'Equation', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=9&page=show_problem&problem=668', '2009-09-27 22:45:35', '2009-09-27 22:45:35', '727', 27),
(461, 1, 'Flip Sort', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=15&page=show_problem&problem=1268', '2009-10-05 05:39:07', '2009-10-05 05:39:07', '10327', 27),
(462, 1, 'Expression Bracketing', 'http://uva.onlinejudge.org/external/103/10312.html', '2009-10-23 19:10:53', '2009-10-23 19:10:53', '10312', 70),
(463, 2, 'BaronsAndCoins', 'http://www.topcoder.com/stat?c=problem_statement&pm=10006&rd=13905', '2009-10-23 21:17:48', '2009-10-23 21:17:48', 'SRM 447 - Div 1 - Medium', 1),
(464, 2, 'MazeMaker', 'http://www.topcoder.com/stat?c=problem_statement&pm=10451&rd=14174', '2009-11-29 04:07:40', '2009-11-29 04:07:40', 'SRM 453.5 - Division I, Easy', 22),
(465, 1, 'The Tourist Guide', 'http://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1040', '2010-03-14 20:54:48', '2010-03-14 20:54:48', '10099', 22),
(466, 4, 'Seinfeld', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/p4733.pdf', '2010-03-14 22:41:59', '2010-03-14 22:41:59', '4733', 1),
(467, 4, 'Tiles of Tetris, NOT!', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/p4734.pdf', '2010-03-14 22:54:44', '2010-03-14 22:54:44', '4734', 22),
(468, 1, 'Meet Prof. Miguel', 'http://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1112', '2010-03-15 04:50:34', '2010-03-20 05:26:18', '10171', 22),
(469, 4, 'Lampyridae Teleportae', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/p4168.pdf', '2010-03-19 05:44:27', '2010-03-19 05:44:27', '4168', 87),
(470, 4, 'White Water Rafting', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4293', '2010-03-21 02:27:56', '2010-03-21 02:27:56', '4293', 22),
(471, 4, 'Hop --- Don''t Walk!', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4737', '2010-03-24 01:17:45', '2010-03-24 01:17:45', '4737', 22),
(472, 2, 'TeamBuilder', 'http://www.topcoder.com/stat?c=problem_statement&pm=2356&rd=4740', '2010-03-30 03:41:35', '2010-03-30 03:41:35', 'SRM 184 - Div 2 - Hard', 22),
(473, 5, 'All Discs Considered', 'http://acm.tju.edu.cn/toj/showp1653.html', '2010-03-30 23:41:44', '2010-03-30 23:41:44', '1653', 22),
(474, 2, 'LotteryCheating', 'http://www.topcoder.com/stat?c=problem_statement&pm=10862&rd=14150&rm=304073&cr=22837587', '2010-04-04 00:42:03', '2010-04-04 00:42:03', 'SRM 466 - Div. II - Level Two', 22),
(475, 2, 'T9', 'http://www.topcoder.com/stat?c=problem_statement&pm=10762&rd=14183', '2010-04-24 17:32:17', '2010-04-24 17:32:17', 'SRM 468 - Div II - Level Two', 22),
(476, 12, 'Alpha Centauri Tennis', 'http://acm.fzu.edu.cn/problem.php?pid=1065', '2010-05-09 03:31:26', '2010-05-09 03:31:26', '1065', 22),
(477, 4, 'Word Encoding', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3124', '2010-05-15 18:43:31', '2010-05-15 18:43:31', '3124', 22),
(478, 1, 'The Trip', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=29&page=show_problem&problem=1078', '2010-05-16 19:39:29', '2010-05-16 19:39:29', '10137', 64),
(479, 1, 'LCD Display', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=9&page=show_problem&problem=647', '2010-08-20 03:39:05', '2010-08-20 03:39:05', '706', 64),
(480, 2, 'HandsShaking', 'http://www.topcoder.com/stat?c=problem_statement&pm=7868', '2010-09-03 22:33:40', '2010-09-03 22:33:40', 'SRM 363 Div 2 500', 22),
(481, 2, 'ChangingSounds', 'http://www.topcoder.com/stat?c=problem_statement&pm=7973', '2010-09-03 22:37:26', '2010-09-03 22:37:26', 'SRM 366 - Div 2 - 500', 22),
(482, 3, 'Piggy-Bank', 'http://www.spoj.pl/problems/PIGBANK/', '2010-09-06 01:56:31', '2010-09-06 20:41:03', '39', 4),
(483, 9, 'Relax! It’s just a game', 'http://acm.hdu.edu.cn/showproblem.php?pid=2922', '2010-09-06 03:08:02', '2010-09-06 03:08:02', '2922', 64),
(484, 4, 'Adding Sevens', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4362', '2010-09-08 18:17:10', '2010-09-08 18:17:10', '4362', 22),
(485, 1, 'Adding Sevens', 'http://acm.uva.es/archive/nuevoportal/data/problem.php?p=4362', '2010-09-10 23:05:42', '2010-09-10 23:05:42', '4362', 64),
(486, 4, 'Stammering Aliens', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4513', '2010-09-17 03:58:36', '2010-09-17 03:58:36', '4513', 22),
(487, 4, 'File Recover', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=4477', '2010-09-17 03:59:45', '2010-09-17 03:59:45', '4477', 22),
(488, 4, 'Hidden Password', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=2755', '2010-09-18 05:32:36', '2010-09-18 05:32:36', '2755', 22),
(489, 1, 'Cut the Silver Bar', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=226&page=show_problem&problem=2947', '2010-09-22 16:33:30', '2010-09-22 16:33:30', '11847', 4),
(490, 3, 'Escape from Jail Again', 'http://www.spoj.pl/problems/ESCJAILA/', '2010-10-03 22:07:58', '2010-10-03 22:07:58', '7422', 3),
(491, 3, 'Activities', 'http://www.spoj.pl/problems/ACTIV/', '2010-10-06 16:04:36', '2010-10-06 16:04:36', '7386', 3),
(492, 3, 'File Recover Testing', 'http://www.spoj.pl/problems/FILRTEST/', '2010-10-07 00:16:15', '2010-10-07 00:16:15', '7423', 22),
(493, 3, 'Coins Game', 'http://www.spoj.pl/problems/MCOINS/', '2010-10-13 02:58:59', '2010-10-13 02:58:59', '3885', 22),
(494, 1, 'Division Game', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=226&page=show_problem&problem=2959', '2010-10-16 03:24:21', '2010-10-16 03:24:21', '11859', 102),
(495, 4, 'Flowers Flourish from France', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/p4810.pdf', '2010-10-25 13:21:46', '2010-10-25 13:21:46', '4810', 4),
(496, 4, 'Jollo', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/p4814.pdf', '2010-10-27 22:06:22', '2010-10-27 22:06:22', '4816', 4),
(497, 1, 'Longest Palindrome', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=23&page=show_problem&problem=2092', '2010-11-01 04:16:50', '2010-11-01 04:16:50', '11151', 22),
(498, 1, 'Ordering Tasks', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=156&problem=1246', '2010-11-07 01:19:48', '2010-11-07 01:19:48', '10305', 4),
(499, 4, 'Growing Strings', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/p4811.pdf', '2010-11-24 04:11:57', '2010-11-24 04:11:57', '4811', 108),
(500, 4, 'Ants Colony', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/p4805.pdf', '2010-11-24 17:11:15', '2010-11-24 17:11:15', '4805', 106),
(501, 4, 'Cocircular Points', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/p4807.pdf', '2010-11-24 17:26:54', '2010-11-24 17:26:54', '4807', 106),
(502, 4, 'Electric Needs', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/p4809.pdf', '2010-11-24 17:28:07', '2010-11-24 17:28:07', '4809', 106),
(503, 4, 'Newton''s Apple', 'http://acmicpc-live-archive.uva.es/nuevoportal/data/problem.php?p=3538', '2011-02-25 20:28:37', '2011-02-25 20:28:37', '3538', 4),
(504, 1, 'Odd Sum', 'http://acm.uva.es/p/v107/10783.html', '2011-06-27 23:21:36', '2011-06-27 23:21:36', '10783', 64),
(505, 1, 'GATTACA', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=2507', '2011-09-26 19:39:57', '2011-09-26 19:39:57', '11512', 22),
(506, 3, 'Hackers', 'http://www.spoj.pl/problems/HACKERS/', '2011-09-28 04:09:11', '2011-09-28 04:09:11', '7425', 22),
(507, 1, 'Herbicide', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=242&page=show_problem&problem=3167', '2011-10-04 12:04:36', '2011-10-04 12:04:36', '12016', 137),
(508, 9, 'Eclipse', 'http://acm.hdu.edu.cn/showproblem.php?pid=3214', '2011-10-04 12:09:34', '2011-10-04 12:09:34', '3214', 137),
(509, 9, 'A Chocolate Manufacturer''s Problem', 'http://acm.hdu.edu.cn/showproblem.php?pid=3644', '2011-10-04 12:13:24', '2011-10-04 12:13:24', '3644', 137),
(511, 9, 'Elune’s Arrow', 'http://acm.hdu.edu.cn/showproblem.php?pid=3408', '2011-10-04 12:28:23', '2011-10-04 12:28:23', '3408', 137),
(512, 9, 'Baking the Shaobing', 'http://acm.hdu.edu.cn/showproblem.php?pid=3211', '2011-10-04 12:30:02', '2011-10-04 12:30:02', '3211', 137),
(513, 1, 'Word Index', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&category=6&problem=358&mosmsg=Submission+received+with+ID+9338443', '2011-10-05 23:40:08', '2011-10-05 23:40:08', '417', 138),
(514, 1, 'CD', 'http://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=565', '2011-12-01 15:17:03', '2011-12-01 15:17:03', '624', 22),
(515, 1, 'Circle Through Three Points', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=126', '2012-01-07 17:26:08', '2012-01-07 17:26:08', '190', 144),
(516, 3, 'Bird Tree', 'http://www.spoj.pl/problems/NWERC11B/', '2012-01-07 19:10:19', '2012-01-07 19:10:19', '9888', 128),
(517, 2, 'PrinceXToastbook', 'http://community.topcoder.com/stat?c=problem_statement&pm=11356', '2012-03-17 22:29:23', '2012-03-17 22:29:23', 'SRM 537 - Div 2 Hard', 32),
(518, 2, 'KingXNewBaby', 'http://community.topcoder.com/stat?c=problem_statement&pm=11823', '2012-03-17 22:45:00', '2012-03-17 22:45:00', 'SRM 537 - Div 2 Easy', 32),
(519, 3, 'To and Fro', 'http://www.spoj.pl/problems/TOANDFRO/', '2012-03-23 03:18:01', '2012-03-23 03:18:01', '400', 32),
(520, 3, 'Conga line', 'http://www.spoj.pl/problems/CONGA/', '2012-03-23 03:34:57', '2012-03-23 03:34:57', '10399', 32),
(521, 1, 'A Node Too Far', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=272', '2012-03-26 04:39:19', '2012-03-26 04:39:19', '336', 32),
(522, 3, 'Laser Phones', 'http://www.spoj.pl/problems/MLASERP/', '2012-04-03 18:00:06', '2012-04-03 18:00:06', '3861', 32),
(523, 1, 'Anagram', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=131', '2012-04-05 16:13:08', '2012-04-05 16:13:08', '195', 32),
(524, 1, 'Ananagrams', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=92', '2012-04-05 16:47:01', '2012-04-05 16:47:01', '156', 32),
(525, 1, 'The Net', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=568', '2012-04-05 23:35:38', '2012-04-05 23:35:38', '627', 32),
(526, 1, 'Binary Search Tree', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3769', '2012-04-07 05:59:11', '2012-04-07 05:59:11', '12347', 1),
(527, 14, 'Rock-Paper-Scissors', 'http://codeforces.com/problemset/problem/173/A', '2012-04-07 16:27:28', '2012-04-07 16:27:28', '173A', 32),
(528, 14, 'BerPaint', 'http://codeforces.com/problemset/problem/44/F', '2012-04-07 16:28:19', '2012-04-07 16:28:19', '44F', 32),
(529, 14, 'Shortest path of the king', 'http://codeforces.com/problemset/problem/3/A', '2012-04-07 16:29:25', '2012-04-07 16:29:25', '3A', 32),
(530, 14, 'Next Round', 'http://codeforces.com/problemset/problem/158/A', '2012-04-07 16:30:31', '2012-04-07 16:30:31', '158A', 32),
(531, 14, 'Replacing Digits', 'http://codeforces.com/problemset/problem/169/B', '2012-04-07 16:33:48', '2012-04-07 16:33:48', '169B', 32),
(532, 1, 'Simple division', 'http://uva.onlinejudge.org/external/104/10407.html', '2012-04-08 06:11:13', '2012-04-08 06:11:13', '10407', 1),
(533, 1, 'We Ship Cheap', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=703', '2012-04-09 03:46:35', '2012-04-09 03:46:35', '762', 32),
(534, 1, 'Word Transformation', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=370', '2012-04-10 04:01:41', '2012-04-10 04:01:41', '429', 32),
(535, 1, 'Vertex', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=216', '2012-04-16 03:46:28', '2012-04-16 03:46:28', '280', 32),
(536, 4, 'Sokoban', 'http://livearchive.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3945', '2012-04-16 23:26:20', '2012-04-16 23:26:20', '5934', 32),
(537, 1, 'Dollars', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=83', '2012-04-17 22:26:20', '2012-04-17 22:26:20', '147', 22),
(538, 1, 'Crazy King', 'http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=2327', '2012-04-20 14:38:07', '2012-04-20 14:38:07', '11352', 32),
(539, 3, 'IOICamp Sequence', 'http://www.spoj.pl/problems/ICAMPSEQ/', '2012-07-31 04:53:27', '2012-07-31 04:53:27', '1784', 158),
(540, 3, 'Scavenger Hunt', 'http://www.spoj.pl/problems/SCAVHUNT/', '2012-07-31 09:20:58', '2012-07-31 09:20:58', '3374', 158),
(541, 3, 'Pebble Solver', 'http://www.spoj.pl/problems/PEBBLE/', '2012-07-31 12:14:01', '2012-07-31 12:14:01', '7668', 158),
(542, 3, 'Alaska', 'http://www.spoj.pl/problems/SCPC11B/', '2012-08-04 01:35:45', '2012-08-04 01:35:45', '9756', 158),
(543, 3, 'Increasing Subsequences', 'http://www.spoj.pl/problems/INCSEQ/', '2012-08-04 11:39:44', '2012-08-04 11:39:44', '2815', 158),
(544, 3, 'GCD2', 'http://www.spoj.pl/problems/GCD2/', '2012-08-04 11:43:11', '2012-08-04 11:43:11', '2906', 158),
(545, 3, 'Query on a tree', 'http://www.spoj.pl/problems/QTREE/', '2012-08-13 12:03:50', '2012-08-13 12:03:50', '375', 158),
(546, 3, 'Find String Roots', 'http://www.spoj.pl/problems/FINDSR/', '2012-09-26 04:51:19', '2012-09-26 04:51:19', '7212', 162);

-- --------------------------------------------------------

--
-- Table structure for table `schema_migrations`
--

CREATE TABLE IF NOT EXISTS `schema_migrations` (
  `version` varchar(255) NOT NULL,
  UNIQUE KEY `unique_schema_migrations` (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `schema_migrations`
--

INSERT INTO `schema_migrations` (`version`) VALUES
('20081130030835'),
('20081130041716'),
('20081130043634'),
('20081130050007'),
('20081130092527'),
('20081130183034'),
('20081201003256'),
('20081203023513'),
('20081203032203'),
('20081204041258'),
('20100321161650'),
('20100331040409'),
('20100411051909');

-- --------------------------------------------------------

--
-- Table structure for table `solutions`
--

CREATE TABLE IF NOT EXISTS `solutions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `explanation` text,
  `problem_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `source_code_file_name` varchar(255) DEFAULT NULL,
  `source_code_content_type` varchar(255) DEFAULT NULL,
  `source_code_file_size` int(11) DEFAULT NULL,
  `source_code_updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1004 ;

--
-- Dumping data for table `solutions`
--

INSERT INTO `solutions` (`id`, `explanation`, `problem_id`, `user_id`, `created_at`, `updated_at`, `source_code_file_name`, `source_code_content_type`, `source_code_file_size`, `source_code_updated_at`) VALUES
(3, 'Maximum bipartite matching using max-flow. \r\n\r\n(Ford-Fulkerson method with Edmonds-Karp optimization).', 2, 1, '2008-12-05 01:52:45', '2008-12-05 01:52:45', '10080.cpp', 'text/x-c++src', 2176, '2008-12-05 01:52:45'),
(9, 'The problem reduces to counting the number of inversions of the array. But N <= 10^5, so the obvious O(n^2) algorithm will time out. I used an O(n log n) algorithm to count the inversion using a modified version of merge-sort.', 1, 1, '2008-12-06 05:07:56', '2008-12-06 05:07:56', '11495.cpp', 'text/x-c++src', 1484, '2008-12-06 05:07:56'),
(10, 'This greedy solution is based on the idea that if I can buy a pair <x, y> where x is a high quality hay and y is low quality hay, then y must be as big as possible.', 3, 1, '2008-12-06 05:35:05', '2008-12-06 05:35:05', '2761.cpp', 'text/x-c++src', 811, '2008-12-06 05:35:05'),
(11, 'Simplemente es notar que el señor debe recorrer el camino dos veces, el de ida a los locales y el de regreso al carro, entonces la mejor forma es que solo pase por un punto dos veces', 4, 3, '2008-12-06 05:35:11', '2008-12-06 05:35:11', '11364.cc', 'text/x-c++src', 949, '2008-12-06 05:35:11'),
(12, 'Simplemente consiste en contar el minimo número de swaps necesarios para ordenar el tren. Una forma sencilla consiste en ir organizando la primera pareja desordenada de vagones que se encuentra hasta organizarlos todos.', 5, 6, '2008-12-06 20:38:30', '2008-12-06 20:38:30', 'train.cpp', 'application/octet-stream', 842, '2008-12-06 20:38:30'),
(13, 'Simplemente es organizar los trenes desde i en adelante, respecto a i', 5, 3, '2008-12-06 20:45:22', '2008-12-06 20:45:22', '299.c', 'text/x-csrc', 444, '2008-12-06 20:45:22'),
(14, 'This problem is exactly the same as counting the number of swaps needed to sort an array using bubble-sort algorithm.\r\n<br />\r\n<strong>Complexity:</strong> O(n^2)', 5, 1, '2008-12-06 20:57:31', '2008-12-06 20:58:03', '299.cpp', 'text/x-c++src', 438, '2008-12-06 20:57:31'),
(15, 'Cuando se compre un producto de mayor calidad se reclama el mayor entre los clasificados como menor calidad (Cumpliendo las restricciones del problema para reclamar los productos gratis).\r\n\r\n', 3, 6, '2008-12-06 21:44:13', '2008-12-06 21:44:13', 'buy.cpp', 'application/octet-stream', 755, '2008-12-06 21:44:13'),
(16, 'This problem asks for the minimum number of nodes of an acyclic graph that must be deleted in order to delete all edges in the graph (Assuming an edge is deleted if one of its two related nodes is deleted).\r\n<br />\r\n<br />\r\nThis problem is known as <strong>minimum vertex cover</strong> and is NP-Complete, except for the special cases of bipartite graphs.\r\n<br />\r\n<br />\r\nI solved using dynamic programming, with state:\r\n<br 7>\r\ndp[node][last] = Minimum cost needed to clean subtree rooted at "node". "last" is true if the edge that goes from "node"''s parent to "node" was already deleted.\r\n', 6, 1, '2008-12-06 22:32:45', '2008-12-12 19:51:26', '2038.2.cpp', 'text/x-c++src', 2008, '2008-12-06 22:32:45'),
(17, 'Es simplemente simular las condiciones del enunciado', 7, 3, '2008-12-06 23:13:47', '2008-12-06 23:13:47', '11385.cc', 'text/x-c++src', 2206, '2008-12-06 23:13:47'),
(18, 'Ir recorriendo el camnio he ir poniendo el borde según el movimiento hecho. (Simulación).', 8, 6, '2008-12-07 00:29:00', '2008-12-07 00:29:00', 'border.cpp', 'application/octet-stream', 1229, '2008-12-07 00:29:00'),
(19, '¡Qué gonorrea de problema!', 7, 1, '2008-12-07 00:41:58', '2008-12-07 00:41:58', '11385.2.cpp', 'text/x-c++src', 860, '2008-12-07 00:41:58'),
(20, 'Simulación\r\nOjo: tener en cuenta que E = -> y W = <-, me demore mucho rato debuggeando por ese error tan pendejo ', 8, 3, '2008-12-07 01:48:06', '2008-12-07 01:48:06', '320.cc', 'text/x-c++src', 1345, '2008-12-07 01:48:06'),
(21, 'Ad-hoc.', 4, 1, '2008-12-07 03:47:43', '2008-12-07 03:47:43', '11364.c', 'text/x-csrc', 328, '2008-12-07 03:47:43'),
(22, 'Another boring problem. Let''s solve some <strong>hard</strong> problems...', 8, 1, '2008-12-07 04:13:13', '2008-12-07 04:13:13', '320.c', 'text/x-csrc', 557, '2008-12-07 04:13:13'),
(23, 'Another idea, using max-flow algorithm to find maximum bipartite matching of a graph. (There''s a theorem that says:\r\n\r\n<div class=list_element>\r\nIn any bipartite graph, the number of edges in a maximum matching\r\n  equals the number of vertices in a minimum vertex cover.\r\n</div>\r\n\r\nKnown as König''s theorem).\r\n<br />\r\n<strong>Warning:</strong> This method is much slower. It will time out on the Live-Archive but get accepted on <a href="http://acm.tju.edu.cn/toj/showp1044.html">TJU</a>.\r\n<br />\r\nIf you want the official input, it''s <a href="http://www.acm.ro/2000/Test_Data/a.zip">here</a>.', 6, 1, '2008-12-07 05:03:48', '2008-12-07 05:04:35', '2038.3.cpp', 'text/x-c++src', 2681, '2008-12-07 05:03:48'),
(24, 'We generate all possible slopes in quadratic time, normalize them using greatest common divisor and use an efficient structure to store them.\r\n<br />\r\n<strong>Complexity:</strong>O(n^2 log n)', 9, 1, '2008-12-07 05:57:27', '2008-12-07 05:57:27', '3184.2.cpp', 'text/x-c++src', 985, '2008-12-07 05:57:27'),
(25, 'Genero todos los fib(1...50) con esto es suficiente dado que el problema dice que los número de fibonacci son menosres a 2^31. Luego simulo las condiciones del problema. ', 7, 6, '2008-12-07 08:43:46', '2008-12-07 08:43:46', 'davinci.cpp', 'application/octet-stream', 1319, '2008-12-07 08:43:46'),
(26, 'Another fine dynamic programming problem.', 10, 1, '2008-12-07 16:16:04', '2008-12-07 16:16:04', '10081.cpp', 'text/x-c++src', 1064, '2008-12-07 16:16:04'),
(27, 'The idea behind the solution is to notice that if weights in the bottom-most level have weight w, then all the elements in the level immediately above must have weight 2*w.\r\n<br />\r\nFrom here, if we have a weight w on level i (bottom-most level has i = 0, level above has i = 1, ..., up to the root who has the biggest level), we can deduce that if we want to balance the tree then all elements in level 0 must have a weight equal to w / (2^i), the elements above it must have a weight equal to w / (2^(i-1)), ..., up to the root that will have the biggest weight.\r\n<br />\r\nWe simply try to balance the tree by considering each of the possible nodes and its respecting level, and the apply the process above, counting how many changes were needed. This process must be done fast, because there are many nodes. Notice that if we have an array sorted, then we can count what is the maximum number of equal elements in it in O(n).\r\n<br />\r\nI used the quickest parser of the world :)', 11, 1, '2008-12-08 08:31:58', '2008-12-08 08:31:58', '4286.cpp', 'text/x-c++src', 1559, '2008-12-08 08:31:58'),
(28, 'Tarjan Algorithm', 12, 3, '2008-12-08 15:45:01', '2008-12-08 15:45:01', '4287.cc', 'text/x-c++src', 1866, '2008-12-08 15:45:01'),
(29, 'Ad-hoc', 13, 3, '2008-12-08 15:46:52', '2008-12-08 15:46:52', '4292.2.cc', 'text/x-c++src', 1188, '2008-12-08 15:46:52'),
(30, 'Union de intervalos, parecido al merge o union', 14, 3, '2008-12-08 15:48:24', '2008-12-08 15:48:24', '4294.cc', 'text/x-c++src', 1393, '2008-12-08 15:48:24'),
(31, 'La idea es esencialmente la misma, solo que para nivelar el móvil se necesita es conocer así donde esta desbalanceado y que tanto. Ah y no estoy seguro del greedy que asumí, si alguien sabe como demostrarlo sería muy vacano\r\n\r\nOjo:\r\nEs necesario el getline, el día en que simulamos el nwerc tenia exactamente el mismo código pero con cin, pero no pasaba asi, si no hubiera visto la solución de andi no hubiera caído en la cuenta', 11, 3, '2008-12-08 16:04:13', '2008-12-08 16:31:16', '4286.cc', 'text/x-c++src', 1205, '2008-12-08 16:31:16'),
(32, 'Fuerza bruta\r\n\r\nInicialmente ponía a y b en cero, pero como no me pasaba por tiempo, le fui subiendo a los numero hasta que me entro', 15, 3, '2008-12-08 16:20:42', '2008-12-08 16:20:42', '4289.c', 'text/x-csrc', 499, '2008-12-08 16:20:42'),
(34, 'Simplemente es parquear en la primer tienda. Caminar con todos los paquetes de tienda en tienda y en la ultima tienda volver al carro.', 4, 6, '2008-12-09 04:28:23', '2008-12-09 04:28:23', 'park.cpp', 'application/octet-stream', 639, '2008-12-09 04:28:23'),
(35, 'Genero la criba de 31624 para determinar cuales de allí son primos. Ahora empiezo a verificar cada elemento del intervalo [a,b] si alguno de los primos encontrados en la criba lo dividen.\r\n\r\nNota: Por teorema si algún primo divide a un número, entonces éste primo siempre es menor o igual a la raiz cuadrada del número.', 17, 6, '2008-12-09 04:47:31', '2008-12-09 04:47:31', 'prime.cpp', 'application/octet-stream', 1259, '2008-12-09 04:47:31'),
(36, 'Le doy 4 pasadas a la matriz. Cada pasada calculo la distancia mas corta que tiene cada pixel negro con respecto al pixel blanco ubicado arriba, abajo, derecha, izquierda de éste.', 18, 6, '2008-12-09 04:54:39', '2008-12-09 04:54:39', 'bitmap.cpp', 'application/octet-stream', 1715, '2008-12-09 04:54:39'),
(37, 'BFS starting from each dot.', 18, 1, '2008-12-09 16:54:34', '2008-12-09 16:54:34', '1916816-src.cpp', 'text/x-c', 1325, '2008-12-09 16:54:34'),
(38, 'Simulación', 19, 6, '2008-12-11 00:15:25', '2008-12-11 00:15:25', 'hang.cpp', 'application/octet-stream', 526, '2008-12-11 00:15:25'),
(39, '...', 19, 1, '2008-12-11 02:24:32', '2008-12-11 02:24:32', 'hangover.cpp', 'text/x-c', 214, '2008-12-11 02:24:32'),
(40, 'Por las condiciones del problema siempre see cumple que:\r\n\r\nb >= ((a*a)%10001)-2.', 15, 6, '2008-12-11 03:49:52', '2008-12-11 03:49:52', 'judge.cpp', 'application/octet-stream', 865, '2008-12-11 03:49:52'),
(41, 'Entreno...???', 19, 3, '2008-12-11 04:48:07', '2008-12-11 04:48:07', '902.cc', 'text/x-c++src', 195, '2008-12-11 04:48:07'),
(42, 'Very similar idea.', 17, 1, '2008-12-12 19:20:12', '2008-12-12 19:20:12', 'prime1.cpp', 'text/x-c', 1372, '2008-12-12 19:20:12'),
(43, 'Brute-force the first row. From there, we can infer what cells must be toggled. <strong>Complexity:</strong> O(xy 2^y)', 20, 1, '2008-12-12 19:23:24', '2008-12-12 19:23:24', 'dfloor.cpp', 'text/x-c', 2421, '2008-12-12 19:23:24'),
(44, 'Brute-force the first row. From there, we can infer what cells must be toggled. Complexity: O(n^2 * 2^n)', 21, 1, '2008-12-12 19:30:46', '2008-12-12 19:30:46', '11464.cpp', 'text/x-c', 1866, '2008-12-12 19:30:46'),
(45, 'Try to solve the problem if the matrix had only one row, in O(n). From there, you should be able to find the O(n^2) solution.', 23, 1, '2008-12-13 00:51:12', '2008-12-13 00:51:44', 'SubrectanglesOfTable.clean.cpp', 'text/x-c', 1009, '2008-12-13 00:51:44'),
(46, 'Simulation.', 22, 1, '2008-12-13 00:52:55', '2008-12-13 00:54:10', 'LinearPolyominoCovering.clean.cpp', 'text/x-c', 928, '2008-12-13 00:54:10'),
(47, 'Assume the answer is a vector called a, of size n.\r\n<br />\r\nFind the first pair given in the input, "a[x] / a[y] as p / q", and make a[x] = p and a[y] = q. <br />\r\nFrom there on, you can deduce a new pair "a[x] / a[y] as p / q" if either a[x] or a[y] was already deduced before. Solving for a[y] you get a[y] = q*a[x]/p. Now, multiply all other already-deduced a[k] by p so as to keep the modularity between pairs. <br />\r\n<br />\r\n<strong>Be extra-careful with overflow!</strong>\r\n<br />\r\nI used greatest common divisor between all numbers in a to keep the numbers little and avoid overflow, even though I used long longs.', 24, 1, '2008-12-13 02:38:28', '2008-12-13 02:39:33', 'IngredientProportions.clean.cpp', 'text/x-c', 1564, '2008-12-13 02:38:28'),
(48, 'Very nice problem!\r\n<br />\r\n<br />\r\nCreate a graph where a node represents a vote of a person, and an edge between two edges represents that these two people can''t be satisfied at the same time, or in other words, these two votes are contradictory.\r\n<br />\r\nWhat we are interested in is finding the minimum number of nodes that must be deleted so as to remove all conflicts, i.e, delete all edges.<br />\r\nThis is exactly the <strong>minimum vertex cover</strong> problem!<br />\r\nBut this problem is NP-complete, so we are whacked...<br />\r\nNO! Notice this graph is always bipartite! (Prove it).<br />\r\nAnd luckily we know Köning''s theorem:<br />\r\n<div class="list_element">\r\nIn any bipartite graph, the number of edges in a maximum matching equals the number of vertices in a minimum vertex cover.\r\n</div>\r\n<br />\r\nSo this problem reduces to finding a maximum bipartite matching, which we solve using max-flow algorithm.', 25, 1, '2008-12-13 03:02:33', '2008-12-13 03:03:22', '4288.cpp', 'text/x-c', 3094, '2008-12-13 03:02:33'),
(49, 'BFS', 26, 6, '2008-12-13 03:08:59', '2008-12-13 03:08:59', 'risk.cpp', 'application/octet-stream', 1605, '2008-12-13 03:08:59'),
(50, 'Simulacion', 22, 6, '2008-12-13 04:02:57', '2008-12-13 04:02:57', 'easy.cpp', 'application/octet-stream', 813, '2008-12-13 04:02:57'),
(51, 'La misma idea comentada en el vuelo med-bog', 17, 3, '2008-12-13 15:37:19', '2008-12-13 15:37:19', 'prime.cc', 'text/x-c++src', 1567, '2008-12-13 15:37:19'),
(52, 'Dijkstra', 28, 6, '2008-12-15 02:37:30', '2008-12-15 02:37:30', 'email.cpp', 'application/octet-stream', 1589, '2008-12-15 02:37:30'),
(53, 'Vanilla Dijkstra''s algorithm.', 28, 1, '2008-12-15 02:56:18', '2008-12-15 02:56:18', '10986.cpp', 'text/x-c++src', 1378, '2008-12-15 02:56:18'),
(54, 'You can check if a solution exists with this greedy algorithm: Proceed in row-major order. If you can place a B-polyomino do it. If you can''t but can place an A-polyomino do it. If after this there is a not covered cell, then there''s no solution.\r\n<br />\r\nIf there''s a solution, we place an A-polyomino as soon as possible, and make sure that a solution is still possible after that.\r\n<br />\r\nThe rest of cells are covered using B-polyominos.\r\n<br />\r\nCheck this <a href="http://forums.topcoder.com/?module=Thread&threadID=629293&start=0">thread</a> for a deeper explanation of the solution.', 29, 1, '2008-12-15 20:46:04', '2008-12-15 20:51:37', 'SpecificPolyominoCovering.clean.cpp', 'text/x-c++src', 1977, '2008-12-15 20:46:04'),
(57, '<pre>\r\nUna vez generada la matriz de la entrada.\r\n\r\nDada una posicion (i,j) la idea es saber de cuantos rectangulos\r\nhace parte.\r\n\r\nUn rectangulo en dicha matriz se puede definir con la posicion (x1,y1)\r\nde su esquina superior izquierda, y la posicion (x2,y2) de su esquina\r\ninferior derecha.\r\n\r\nun rectangulo que contenga la posicion (i,j) debe cumplir que\r\n(x1 <= i && y1 <= j) && (x2 >= i && y2 >= j). \r\n\r\nA partir de hay se puede delimitar la region de acuerdo a esa regla.\r\n\r\nEjemplo: Que rectangulos contienen a la posicion (2,2):\r\n\r\nRectangulos validos segun la regla:\r\n\r\n- Se delimita la region: filas <= 2 y columnas <= 2, \r\n  filas >= 2 y columnas >= 2\r\n\r\n "<" indica esquinas superiores. ">" indica esquinas inferiores\r\n\r\n m\\n   0   1   2   3   4     m=5, n=5\r\n   \\--- --- --- --- --- \r\n  0|<<<|<<<|<<<|   |   |\r\n   |<<<|<<<|<<<|   |   | \r\n    --- --- --- --- ---\r\n  1|<<<|<<<|<<<|   |   |\r\n   |<<<|<<<|<<<|   |   | \r\n    --- --- --- --- --- \r\n  2|<<<|<<<|   |>>>|>>>|\r\n   |<<<|<<<|2,2|>>>|>>>| \r\n    --- --- --- --- --- \r\n  3|   |   |>>>|>>>|>>>|\r\n   |   |   |>>>|>>>|>>>|\r\n    --- --- --- --- --- \r\n  4|   |   |>>>|>>>|>>>|\r\n   |   |   |>>>|>>>|>>>|\r\n    --- --- --- --- ---\r\n\r\nHay en total (i+1)*(j+1) esquinas superiores y \r\n(m-i)*(n-j) esquinas inferiores.\r\n\r\nPor cada esquina superior hay (m-i)*(n-j) esquinas inferiores.\r\nLa respuesta es la multiplicacion de ambas regiones\r\n(i+1)*(j+1)*(m-i)*(n-j)\r\n</pre>', 23, 12, '2008-12-15 21:45:53', '2008-12-15 21:45:53', 'SubrectanglesOfTable.java', 'java/*', 569, '2008-12-15 21:45:53'),
(58, 'Simulacion.', 30, 12, '2008-12-15 22:04:30', '2008-12-15 22:04:30', 'pba.cpp', 'application/octet-stream', 4145, '2008-12-15 22:04:30'),
(59, 'Nasty problem!', 30, 1, '2008-12-15 23:11:42', '2008-12-15 23:11:42', '4219.cpp', 'text/x-c++src', 3668, '2008-12-15 23:11:42'),
(60, 'Simulacion', 30, 6, '2008-12-15 23:30:44', '2008-12-15 23:30:44', 'bora.cpp', 'application/octet-stream', 4422, '2008-12-15 23:30:44'),
(61, 'Floyd-Warshall''s.', 26, 1, '2008-12-16 03:19:58', '2008-12-16 03:19:58', '567.cpp', 'text/x-c++src', 1035, '2008-12-16 03:19:58'),
(62, 'Use Kruskal''s algorithm to add edges in decreasing order of priority. Then greedily choose edges until you have completed exactly M.', 31, 1, '2008-12-16 03:50:38', '2008-12-16 03:50:38', 'BestRoads.cpp', 'text/x-c++src', 1389, '2008-12-16 03:50:38'),
(63, 'Interseccion de segmentos.\r\n', 32, 12, '2008-12-16 14:37:12', '2008-12-16 14:37:12', 'uva10902.cpp', 'application/octet-stream', 1423, '2008-12-16 14:37:12'),
(64, '<pre>\r\nPrecomputation.\r\nStarting from 18 sticks and up, the smallest number always ends in 8.\r\n</pre>', 13, 1, '2008-12-16 16:33:28', '2008-12-16 16:34:43', '4292.2.cpp', 'text/x-c++src', 1054, '2008-12-16 16:33:28'),
(65, 'Dynamic programming, storing big integers as strings. Note that for big integers we only need to perform an operation: "is a less than b?".', 13, 1, '2008-12-16 17:03:30', '2008-12-16 17:03:30', '4292.3.cpp', 'text/x-c++src', 1627, '2008-12-16 17:03:30'),
(66, 'Este entró en 0.000!', 13, 1, '2008-12-16 17:25:50', '2008-12-16 17:25:50', 'precomputed.c', 'text/x-csrc', 4473, '2008-12-16 17:25:50'),
(67, 'Dijkstra. Se escoge el nodo más lejano desde el nodo origen. Esta escogencia funciona por la propiedad de propagación que tiene la red de procesadores que si alguno recibe un mensaje lo manda inmediatamente a los procesadores que están conectados a éste.', 33, 6, '2008-12-17 02:09:51', '2008-12-17 02:09:51', 'mpi.cpp', 'application/octet-stream', 1544, '2008-12-17 02:09:51'),
(68, 'Intersección de segmentos', 32, 3, '2008-12-17 15:48:51', '2008-12-17 15:48:51', '10902.2.cc', 'text/x-c++src', 2591, '2008-12-17 15:48:51'),
(69, '<pre>\r\nEs hallar la distancia superficial entre dos puntos de una esfera\r\nLa distancia entre dos puntos de una superficie esférica esta dada por:\r\n  d=r*ø\r\n  ø: es la longitud de arco entre los dos puntos en radianes.\r\n</pre>', 34, 3, '2008-12-17 17:03:24', '2008-12-17 20:22:44', '10897.cc', 'text/x-c++src', 1773, '2008-12-17 17:04:02'),
(70, 'Floyd-Warshall''s. The answer is the biggest of the shortest path between node 0 and all other nodes.', 33, 1, '2008-12-17 17:58:06', '2008-12-17 17:58:06', '423.cpp', 'text/x-c++src', 1005, '2008-12-17 17:58:06'),
(71, 'Se utiliza una recurrencia entre las generaciones de abejas parecida a la de los conejos(Fibonacci) ', 35, 3, '2008-12-17 18:13:20', '2008-12-17 18:13:20', '11000.cc', 'text/x-c++src', 1092, '2008-12-17 18:13:20'),
(72, 'Ad-hoc', 22, 3, '2008-12-17 18:59:30', '2008-12-17 18:59:30', 'LinearPolyominoCovering.comovamos.cc', 'text/x-c++src', 1136, '2008-12-17 18:59:30'),
(73, 'Recurrence.', 35, 1, '2008-12-17 20:10:55', '2008-12-17 20:10:55', '11000.cpp', 'text/x-c++src', 360, '2008-12-17 20:10:55'),
(74, 'Simulacion Generación a Generación.', 35, 6, '2008-12-17 20:24:33', '2008-12-17 20:24:33', 'bee.cpp', 'application/octet-stream', 351, '2008-12-17 20:24:33'),
(75, 'Colinear points', 36, 3, '2008-12-17 20:39:15', '2008-12-17 20:39:15', '270.cc', 'text/x-c++src', 1145, '2008-12-17 20:39:15'),
(76, 'Convierto la longitud/latitud a coordenadas esféricas. <br />\r\nAhora queda faltando hallar el ángulo entre los dos vectores que van del centro de la Tierra a los puntos. No supe cómo hallar este ángulo en coordenadas esféricas así que pasé los puntos a coordenadas rectangulares y encuentro el ángulo usando el producto punto.\r\n', 34, 1, '2008-12-17 22:18:39', '2008-12-17 22:18:58', 'p10897.cpp', 'text/x-c++src', 1568, '2008-12-17 22:18:39'),
(77, 'Intersection of segments, and point inside a rectangle. <p/>\r\nOjo con las palabras top left and bottom right son un buque.', 37, 3, '2008-12-18 05:08:30', '2008-12-18 05:08:30', '191.cc', 'text/x-c++src', 2813, '2008-12-18 05:08:30'),
(78, 'Manejo de lineas y de intersección de las mismas', 38, 3, '2008-12-18 16:35:31', '2008-12-18 16:35:31', '378.cc', 'text/x-c++src', 1992, '2008-12-18 16:35:31'),
(79, 'Simulación. Intersección de Segmentos.', 32, 6, '2008-12-19 19:04:29', '2008-12-19 19:04:29', 'stick.cpp', 'application/octet-stream', 1870, '2008-12-19 19:04:29'),
(80, 'Dijkstra''s algorithm.<br />\r\nThe time-limit for this problem is tight, so I had to optimize this code a lot.<br />\r\nThe most important idea is to notice that we don''t really need a priority queue, but instead we can use 8 normal queues (or even stacks). This reduces the complexity of Dijkstra''s algorithm from O(n² log n) to O(8 n²) = O(n²).<br />\r\nThis same idea can be used to implement a faster Dijkstra''s whenever we have a reasonable small biggest possible edge. For example, in this problem, the biggest possible edge has weight 7. In general, if the biggest possible edge has weight K, then we need at least K+1 normal queues to do this neat trick.<br />\r\nMore information about this idea can be found <a href="http://forums.topcoder.com/?module=Thread&threadID=593375&start=0&mc=17"> here</a>, <a href="http://acm.uva.es/board/viewtopic.php?t=12583">here</a> and <a href="http://forums.topcoder.com/?module=Thread&threadID=629604&start=0&mc=12">here</a>.', 27, 1, '2008-12-19 22:39:07', '2008-12-19 22:39:07', '3652.3.cpp', 'text/x-c++src', 2686, '2008-12-19 22:39:07'),
(82, 'Dijkstra''s algorithm using 10 common queues. <br />\r\nSee Introduction to algorithms, CLRS, exercise 24.3-6.', 39, 1, '2008-12-20 00:03:24', '2008-12-20 00:03:24', '929.cpp', 'text/x-c++src', 2058, '2008-12-20 00:03:24'),
(83, 'First check if it is possible, by checking if the sum of alumni fits between the minimum and maximum range of people allowed in all groups. If its possible, then we need to move people from groups that have too many or too few students. ', 40, 1, '2008-12-20 20:11:16', '2008-12-20 20:11:16', 'CreateGroups.clean.cpp', 'text/x-c++src', 919, '2008-12-20 20:11:16'),
(84, 'Where there''s a 1 in n''s binary representation, there must be a 0 in the answer. So we take all places where there''s a 0 in n and use these spots to build the k''th biggest natural.', 41, 1, '2008-12-20 20:14:08', '2008-12-20 20:14:08', 'BitwiseEquations.clean.cpp', 'text/x-c++src', 1011, '2008-12-20 20:14:08'),
(85, 'I used a similar idea to  <a href="http://local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/">this</a> .', 38, 1, '2008-12-20 22:55:31', '2008-12-20 22:55:31', '378.cpp', 'text/x-c++src', 1755, '2008-12-20 22:55:31'),
(86, 'Segment-Segment intersection.', 32, 1, '2008-12-20 23:58:16', '2008-12-20 23:58:16', '10902.cpp', 'text/x-c++src', 3708, '2008-12-20 23:58:16'),
(87, 'Try to intersect the line with all sides of the rectangle.', 37, 1, '2008-12-21 00:15:35', '2008-12-21 00:15:35', '191.cpp', 'text/x-c++src', 3769, '2008-12-21 00:15:35'),
(89, 'Dynamic programming.\r\n<br />\r\ndp[node][last][used] = Maximum number of people that can buy the art-piece if initially person "node" has it, it was bought at price "last" and "used" is a bitmask telling which people have already bought the art-piece.\r\n<br />\r\ndp[15][10][1 << 15]. It fits in around 20 MBs of memory.', 42, 1, '2008-12-21 04:35:32', '2008-12-21 04:35:32', 'imagetraders.cpp', 'text/plain', 798, '2008-12-21 04:35:32'),
(90, 'Intersección entre segmentos.', 37, 6, '2008-12-21 19:50:29', '2008-12-21 19:50:29', 'inter.cpp', 'application/octet-stream', 2234, '2008-12-21 19:50:29'),
(91, 'Primero se verifica que todos los estudiantes puedan ocupar el mínimo para cada grupo y no sobre pase el máximo de cada grupo.\r\n\r\nDespues de garantizar lo anterior es simplemente meter nuevos alumnos a los grupos que le faltan para cumplir el mínimo ó meter nuevos alumnos a otro grupo porque sobrepasan el máximo.', 40, 6, '2008-12-21 21:18:52', '2008-12-21 21:18:52', 'groups.cpp', 'application/octet-stream', 597, '2008-12-21 21:18:52'),
(92, 'Dynamic programmming.\r\n\r\nA detailed explanation is at the end of the source file.', 43, 1, '2008-12-21 22:21:25', '2008-12-21 22:21:25', 'TwinTowns.clean.cpp', 'text/x-c++src', 2938, '2008-12-21 22:21:25'),
(93, 'This one is tough! There are so many corner cases.<br />\r\nFirst, notice that for the two equations to intercept it must be true that r1 == r2 or r1 == -r2. If you solve the simultaneous equations you will get that either t = (B2 - B1) / (A1 - A2) or t = (-B1 - B2) / (A1 + A2). All right, so we have two possible solutions that work well when A1 != A2 or B1 != B2. <br />\r\nBut when A1 == A2 and B1 == B2, it will ALWAYS happen that r1 == r2, no matter how much time has elapsed. So we must find the smallest time such that the angles theta1 and theta2 will make the particles collide. This is not as simple as it sounds. Converting the points to rectangular coordinates well let us see that if r1 == r2, the points will only collide when sin(theta1) == sin(theta2) and cos(theta1) == cos(theta2). But this will only happen when theta1 == theta2 + 360k, where k is any integer.<br />\r\nSolving these equations, we will get that any t in the form of t = (360k + D2 - D1) / (C1 - C2) will work. So we "simply" find the smallest t in this form that is >= 0. <br />\r\nAlso, remember to handle the cases when we can make r == 0 (any angle will work) and when A1 == A2 and B1 == B2 and C1 == C2 (in this case, the solution will exist if D1::D2 mod 360).', 44, 1, '2008-12-22 04:07:55', '2008-12-22 04:07:55', '4217.cpp', 'text/x-c++src', 3392, '2008-12-22 04:07:55'),
(94, 'Nasty simulation. <br />\r\nI used cross product to check if the ball will hit another one.', 45, 1, '2008-12-22 20:34:24', '2008-12-22 20:34:24', '3152.3.cpp', 'text/x-c++src', 4360, '2008-12-22 20:34:24'),
(95, 'difference constraints.\r\n\r\nPara poder resolver este problema mediante grafos debemos en primer lugar convertir todas las desigualdades de la forma xj - xi <= bk. (una explicación clara de como convertir a ésta solución <a href="http://www.algorithmist.com/index.php/UVa_515">aquí</a>). Despues convertirmos esta forma en un grafo (Ver pagina 601 de Cormen segunda edicion).\r\n\r\nPara el operador ''lt'' la forma queda S(si+ni) - S(si-1) <= k-1. Para el operador ''gt'' la forma queda S(si-1) - S(si+ni) <= -k-1.\r\n\r\nPara determinar si la secuencia existe basta con determinar si no existe ciclos negativos en el grafo construido (Bellman-Ford).', 46, 6, '2008-12-25 06:57:52', '2008-12-30 18:59:10', 'king.cpp', 'application/octet-stream', 1452, '2008-12-25 06:57:52'),
(96, 'Express each number as its base-expansion (a polynomial where x is its base). For example, 485 = 4x^2 + 8x + 5. <br />\r\nMultiply/add the polynomials on each side, and then subtract both sides. At the end, you will have a polynomial whose integer positive roots are the answer to the problem.\r\n<br />\r\nThe idea is short but my code is lengthy.\r\nFor extra-hints on how to find the integer roots check out the <a href="http://www.topcoder.com/tc?module=Static&d1=match_editorials&d2=srm378">TopCoder editorial</a> for problem SolvePolynomial.', 47, 1, '2008-12-25 17:45:12', '2008-12-25 17:54:20', 'bases.cpp', 'application/octet-stream', 5006, '2008-12-25 17:45:12'),
(97, 'Utilice el merge_sort para contar cuantas veces se necesita hacer swamp para que el arreglo quede ordenado.', 1, 6, '2008-12-26 05:59:17', '2008-12-26 05:59:17', 'bb.cpp', 'application/octet-stream', 1116, '2008-12-26 05:59:17'),
(98, 'Si no es una solución trivial (N>99) verifico si cada uno de los números entre 100 y N es ''mega cool''.\r\n\r\n\r\n', 48, 6, '2008-12-26 06:29:09', '2008-12-26 06:29:09', 'mega.cpp', 'application/octet-stream', 398, '2008-12-26 06:29:09'),
(99, 'Teorema de Pitagoras.', 49, 6, '2008-12-26 07:07:52', '2008-12-26 07:07:52', 'points.cpp', 'application/octet-stream', 453, '2008-12-26 07:07:52'),
(100, 'Reviso las diferencias adyacentes', 48, 3, '2008-12-26 14:44:12', '2008-12-26 14:44:12', 'c.cc', 'text/x-c++src', 1201, '2008-12-26 14:44:12'),
(101, 'La idea en código se ve muy similar, aunque yo lo pensé de la siguiente manera, la primera siempre logra caer hasta x;0.0 de ahí en adelante, tomaba como centro de una circunferencia el punto inmediatamente anterior y el nuevo lo calculaba despejando y de la ecuación\r\nes decir:\r\n<br/>\r\n(X_nueva - X_vieja)² +(Y_nueva - Y_vieja)²=R²\r\n<br/>\r\ny de esta misma manera podía saber si el punto si tocaba o no la circunferencia.', 49, 3, '2008-12-26 14:49:58', '2008-12-26 14:49:58', 'd.cc', 'text/x-c++src', 1076, '2008-12-26 14:49:58'),
(102, 'Utilice la desigualdad MA>=MG, en donde a uno le garantizan que (S/n)>=(P)^(1/n)', 50, 3, '2008-12-26 15:23:33', '2008-12-26 15:23:33', 'SumAndProduct.comovamos.cc', 'text/x-c++src', 911, '2008-12-26 15:23:33'),
(103, 'Brute-force.', 48, 1, '2008-12-26 21:02:17', '2008-12-26 21:02:17', 'MegaCoolNumbersEasy.clean.cpp', 'text/x-c++src', 439, '2008-12-26 21:02:17'),
(104, 'Me pareció ambiguo el enunciado. Gasté un rato intentando descifrar porque mi solución fallaba en el Practice-Room. Resulta que la línea "each point falls down until it is either a distance of R away from <strong>a</strong> previously fallen point or it reaches y = 0" debería decir "each point falls down until it is either a distance of R away from <strong>the</strong> previously fallen point or it reaches y = 0".', 49, 1, '2008-12-26 21:10:11', '2008-12-26 21:10:11', 'FallingPoints.clean.cpp', 'text/x-c++src', 475, '2008-12-26 21:10:11'),
(105, 'We are asked for the expected value of shot segments. This is simply the sum over all i of 1*p_i, where p_i is the probability of shooting through the i''th segment. (Remember that the expected value is the sum over all events of the value of an event times the probability of this event happening).<br />\r\nSo what the problem really asks is for the sum of all probabilities of shooting the laser through each segment. This probability is theta / pi, where theta is the angle in which the segment will be shot (I visualized this by creating a triangle with vertexes (0,0), (x, y1) and (x, y2)). To find this angle we can cut the original triangle into two rectangular triangles and use atan2 function.', 52, 1, '2008-12-26 21:22:20', '2008-12-26 21:23:10', 'LaserShooting.clean.cpp', 'text/x-c++src', 573, '2008-12-26 21:22:20'),
(106, 'The problem reduces to finding an eulerian path in a graph. A detailed explanation is at the end of the source file.', 53, 1, '2008-12-30 19:02:45', '2008-12-30 19:06:54', '4218.3.cpp', 'text/x-c++src', 5138, '2008-12-30 19:06:54'),
(107, 'Hey, les dejo aquí mi solución, yo las escribo así (es una vieja maña), yo se que es difícil de entender pero a penas pueda la ablando con una breve explicación', 66, 16, '2008-12-30 19:46:09', '2008-12-30 19:46:09', 'dna.cpp', 'text/x-c++src', 850, '2008-12-30 19:46:09'),
(108, 'Quedo pendiente por subir la explicación!', 11, 16, '2008-12-30 21:52:30', '2008-12-30 21:52:30', 'equilibrium.cpp', 'text/x-c++src', 868, '2008-12-30 21:52:30'),
(109, 'Factorize it to keep the numbers small. For example: <br />\r\n\r\n5x^3 + 2x^2 - 3x + 7 = x(x(x(5) + 2) - 3) + 7', 71, 1, '2008-12-30 21:58:20', '2008-12-30 21:58:20', 'poleval.2.cpp', 'text/x-c++src', 979, '2008-12-30 21:58:20'),
(110, 'This solution is O(n^3). It will surely time out on some prepared cases, but nevertheless it got accepted.', 66, 1, '2008-12-30 22:01:55', '2008-12-30 22:02:15', '4213.cpp', 'text/x-c++src', 1069, '2008-12-30 22:02:15'),
(111, 'This task asks for finding the bridges of an undirected graph (A bridge is an edge that disconnects the graph when removed).\r\nI used DFS to do it, very similar to finding articulation points in a graph.', 73, 1, '2008-12-30 22:10:39', '2008-12-30 22:10:39', '796.cpp', 'text/x-c++src', 1970, '2008-12-30 22:10:39'),
(112, 'Check if the graph is connected and then find an Euler tour in the graph. I used DFS to find the tour.', 72, 1, '2008-12-30 23:26:22', '2008-12-30 23:26:22', '10054.cpp', 'text/x-c++src', 2025, '2008-12-30 23:26:22'),
(113, 'This is the code written during the official competition in Bogotá :) <br />\r\nDynamic programming. <br />\r\nFirst find the maximum amount that can be picked for each row: <br />\r\ndp[k][0] = Maximum amount that can be picked using elements from 0 to k and NOT using the last one.<br />\r\ndp[k][1] = Maximum amount that can be picked using elements from 0 to k and using or not the last one. <br />\r\nAfter having the maximum for each row, run the same algorithm again. The idea is to decide which rows should be picked (and for each row we should pick the already found maximum of that row).', 65, 1, '2008-12-31 00:27:07', '2008-12-31 00:29:11', 'candy.cpp', 'text/x-c++src', 1230, '2008-12-31 00:27:07'),
(114, 'A classic example of 2-SAT. <br />\r\nI won''t explain the algorithm, but I used Tarjan''s algorithm for the part of finding the Strongly connected components.', 57, 1, '2008-12-31 01:36:42', '2008-12-31 01:36:56', '4185.cpp', 'text/x-c++src', 2726, '2008-12-31 01:36:42'),
(115, 'DFS', 75, 6, '2008-12-31 05:55:06', '2008-12-31 05:55:06', 'mark.cpp', 'application/octet-stream', 1991, '2008-12-31 05:55:06'),
(116, 'For each client we are given a boolean equation of the form (a || b) && (~c || ~d). If we take the conjunction of all clients'' equations we get a boolean function and hence the problem reduces to the problem of 2-SAT :)', 76, 1, '2008-12-31 07:07:59', '2008-12-31 07:07:59', '2886.cpp', 'text/x-c++src', 3289, '2008-12-31 07:07:59'),
(117, 'Count the number of connected components, and check that all of them are bipartite. Let this number be r. The answer is 2^r.', 75, 1, '2008-12-31 07:22:27', '2008-12-31 07:23:57', 'Marketing.cpp', 'text/x-c++src', 1122, '2008-12-31 07:22:27'),
(118, 'Nasty problem. The hardest part is understanding it.', 16, 1, '2009-01-02 03:09:09', '2009-01-02 03:09:09', '154.cpp', 'text/x-c++src', 1291, '2009-01-02 03:09:09'),
(119, 'Simulación.', 77, 6, '2009-01-02 21:53:26', '2009-01-02 21:53:26', 'numgrid.cpp', 'application/octet-stream', 942, '2009-01-02 21:53:26'),
(120, 'The board is small enough to brute-force all possible boards. Complexity is O(4^n), where n is the length of the string (in this case n = 6).', 77, 1, '2009-01-02 22:41:15', '2009-01-02 22:41:15', 'numgrid.cpp', 'text/x-c++src', 845, '2009-01-02 22:41:15'),
(121, 'The probability to catch up and older train is the time saved divided by the length of the interval (T).', 79, 1, '2009-01-03 20:29:37', '2009-01-03 20:29:37', 'SubwayTrip.clean.cpp', 'text/x-c++src', 681, '2009-01-03 20:29:37'),
(122, 'The expected profit is the expected earnings minus the expected losses. The expected earnings can be calculated as the sum of interests for each client times the probability of this client paying those interests. The expected losses can be calculated in the same way.', 80, 1, '2009-01-03 20:32:32', '2009-01-03 20:32:54', 'BankLoans.clean.cpp', 'text/x-c++src', 1038, '2009-01-03 20:32:32'),
(123, 'This problem is plain simulation, making the board bigger as the person moves around the maze.', 81, 1, '2009-01-03 20:34:51', '2009-01-03 20:34:51', 'MazeReconstruction.clean.cpp', 'text/x-c++src', 1364, '2009-01-03 20:34:51'),
(124, 'We have to maximize a function that is a parabola. Find the derivative and make it equal to 0.', 63, 1, '2009-01-03 20:39:13', '2009-01-03 20:39:26', '4191.cpp', 'text/x-c++src', 493, '2009-01-03 20:39:13'),
(125, 'If we sort the edges, we can find the lexicographically-first eulerian path using DFS.', 74, 1, '2009-01-03 20:40:40', '2009-01-03 20:40:40', '302.2.cpp', 'text/x-c++src', 1969, '2009-01-03 20:40:40'),
(126, 'La probabilidad de coger el Tren a tiempo está determinada por una variable aleatoria uniforme continua. En este caso como nos sirven todos aquellos para los cuales se cumplen que cogemos el tren a tiempo entonces nos pregunta es la Funcion Acumulada de ésta variable. para obtener más información leer http://es.wikipedia.org/wiki/Distribuci%C3%B3n_uniforme.', 79, 6, '2009-01-04 23:30:36', '2009-01-04 23:30:36', 'subway.cpp', 'application/octet-stream', 231, '2009-01-04 23:30:36'),
(127, 'Se calcula la ganacia esperada del banco de la siguientes manera: El valor esperado del prestamo (con intereses) menos el dinero prestado (sin intereses).\r\n', 80, 6, '2009-01-05 00:50:32', '2009-01-05 00:50:32', 'loans.cpp', 'application/octet-stream', 826, '2009-01-05 00:50:32'),
(128, 'Almaceno los puntos del recorrido empezando desde la posicion (0,0). Despues desplazo el grid de tal forma que todos los puntos sean mayor o iguales que 0.', 81, 6, '2009-01-07 00:58:00', '2009-01-07 00:58:00', 'maze.cpp', 'application/octet-stream', 1816, '2009-01-07 00:58:00'),
(129, 'We use inclusion-exclusion principle to count the number of <strong>invalid</strong> 4-tuples, and then subtract this number from the total number of 4-tuples (n choose 4). <br />\r\nIn the code, the arrays have the following  meaning:<br />\r\nrep[i] = Number of times that i appears in the input list.<br />\r\nd[i] = Number of numbers in the input that are divisible by i.<br />\r\ncnt[i] = How many times we have counted 4-tuples that have i as a common divisor.<br />\r\n', 56, 1, '2009-01-09 00:42:46', '2009-01-09 00:42:46', '4184.2.cpp', 'text/x-c', 1343, '2009-01-09 00:42:46'),
(130, 'En general en un grafo donde se sabe que el peso máximo de cualquier arista es k. Entonces podemos solucionarlo utilizando un dijsktra con k+1 colas.', 27, 6, '2009-01-13 01:11:53', '2009-01-13 01:11:53', 'frog5.cpp', 'application/octet-stream', 2833, '2009-01-13 01:11:53'),
(131, 'Dijsktra utilizando 10 colas.', 39, 6, '2009-01-13 04:11:11', '2009-01-13 04:11:11', 'maze2.cpp', 'application/octet-stream', 1915, '2009-01-13 04:11:11'),
(132, 'Este es el clasico problema de cuantos cuadrados tiene un tablero de ajedrez, pueden ver aca una excelente explicacion http://sferrerobravo.wordpress.com/2008/05/18/suma-visual-de-cuadrados/', 68, 17, '2009-01-13 14:30:32', '2009-01-13 14:31:20', 'feynman.cpp', 'application/octet-stream', 180, '2009-01-13 14:31:20'),
(133, 'Try to build each possible word of the dictionary.', 82, 1, '2009-01-13 19:46:24', '2009-01-13 19:46:24', 'scrab.cpp', 'text/plain', 1475, '2009-01-13 19:46:24'),
(135, 'Simple backtracking.', 83, 1, '2009-01-13 19:48:34', '2009-01-13 19:48:34', 'backbarn.cpp', 'text/plain', 907, '2009-01-13 19:48:34'),
(136, 'I used binary search, but linear search also passes the time limit.', 84, 1, '2009-01-13 19:50:13', '2009-01-13 19:50:13', 'mnoteb.cpp', 'text/plain', 1028, '2009-01-13 19:50:13'),
(137, 'We need to find the shortest path in a graph where all edges have weight either 0 or 1. We don''t need Dijkstra, we can use BFS with state {i, j, dir} where i = row, j = column and dir = the direction of the ray  (south, north, east or west).', 85, 1, '2009-01-13 20:59:05', '2009-01-13 20:59:32', 'lphone.cpp', 'text/plain', 2221, '2009-01-13 20:59:05'),
(138, 'I used Ford-Fulkerson''s algorithm, but I''m sure a simpler solution exists.', 86, 1, '2009-01-14 14:42:43', '2009-01-14 14:42:43', 'fordfulkerson.cpp', 'text/plain', 1477, '2009-01-14 14:42:43'),
(139, 'I used several Dijkstra''s, but maybe Floyd-Warshall''s is good enough.', 87, 1, '2009-01-14 14:44:59', '2009-01-14 14:44:59', 'bestspot.cpp', 'text/plain', 1697, '2009-01-14 14:44:59'),
(140, 'Binary search on the quality.', 88, 1, '2009-01-14 15:59:47', '2009-01-14 16:00:52', 'assemble.cpp', 'text/plain', 1960, '2009-01-14 16:00:52'),
(141, 'Dynamic programming, with state dp[i][j] = Minimum possible error taking exactly j elements, such that the last element chosen is element i.', 89, 1, '2009-01-14 21:54:52', '2009-01-14 21:54:52', 'baric.cpp', 'text/plain', 2129, '2009-01-14 21:54:52'),
(142, 'Verifico si puedo armar cada palabra del diccionario. Si la puedo armar entonces verifico si su puntaje es estrictamente mayor a la última palabra formada que fue escogida como la mayor.', 82, 6, '2009-01-15 02:45:08', '2009-01-15 02:45:08', 'scrab.cpp', 'application/octet-stream', 1459, '2009-01-15 02:45:08'),
(143, 'Backtracking', 83, 6, '2009-01-15 03:57:15', '2009-01-15 03:57:15', 'backbarn.cpp', 'application/octet-stream', 1019, '2009-01-15 03:57:15'),
(144, 'Creo un arreglo de notas de la posible canción más larga (100.000). Y le asigno a cada intervalo de tiempo la nota que le corresponde. Cuando me pregunta que nota es para cierto tiempo, hago un acceso directo al arreglo de notas.', 84, 6, '2009-01-15 13:25:42', '2009-01-15 13:25:42', 'mnoteb.cpp', 'application/octet-stream', 482, '2009-01-15 13:25:42'),
(145, 'Simulación.', 69, 6, '2009-01-15 13:42:10', '2009-01-15 13:42:10', 'pole.cpp', 'application/octet-stream', 732, '2009-01-15 13:42:10'),
(146, 'Iterar sobre el String.', 90, 6, '2009-01-15 13:58:23', '2009-01-15 13:58:23', 'temp.cpp', 'application/octet-stream', 1001, '2009-01-15 13:58:23'),
(147, 'Here''s an O(n^3) algorithm. The idea is very similar to the solution to the problem of finding the submatrix with maximum sum of a N*N matrix. <br />\r\nTry each pair of starting and ending row of the matrix, and find a "compressed" array that is the sum of the rows included between the brute-forced starting and ending rows(O(n^2)). Now, in this compressed row, find the length of the minimum subarray that sums at least K. The tricky part is how to do this in O(n), for a total complexity of O(n^3).', 91, 1, '2009-01-15 16:00:22', '2009-01-15 16:03:26', '3932.cpp', 'text/plain', 1398, '2009-01-15 16:03:26'),
(148, 'Range minimum/maximum queries. I used Segment Trees to solve them.', 92, 1, '2009-01-16 00:31:56', '2009-01-16 00:31:56', '3264.cpp', 'text/x-c++src', 4101, '2009-01-16 00:31:56'),
(149, 'After thinking for a while, you will notice that the best solution is to delete nodes that are adjacent to those where the cows are.', 93, 1, '2009-01-16 00:47:44', '2009-01-16 00:47:44', 'damage.cpp', 'text/x-c++src', 1295, '2009-01-16 00:47:44'),
(150, 'Sum of squares. O(n^2) passes the time-limit.', 68, 1, '2009-01-16 00:54:41', '2009-01-16 00:54:41', '4215.cpp', 'text/x-c++src', 285, '2009-01-16 00:54:41'),
(151, 'Check that all positions are inside the range and that no position is used twice.', 69, 1, '2009-01-16 00:57:41', '2009-01-16 00:57:41', '4216.cpp', 'text/x-c++src', 937, '2009-01-16 00:57:41'),
(152, 'Run Dijkstra''s algorithm, saving all predecessors of each node. Run a BFS to delete all edges that belong to a shortest path and run Dijkstra''s again.<br />\r\n\r\nThis is the code I wrote during the competition, which I found quite nasty.', 64, 1, '2009-01-16 01:00:30', '2009-01-16 01:00:30', 'almost.cpp', 'text/x-c++src', 4350, '2009-01-16 01:00:30'),
(153, 'I converted the dates to the number of days since 1899 to make comparisons a little easier. <br />\r\nThis is the code I wrote during the competition.', 67, 1, '2009-01-16 01:04:07', '2009-01-16 01:04:07', 'electricity.cpp', 'text/x-c++src', 1393, '2009-01-16 01:04:07'),
(154, 'Try all divisors of the perimeter as possible sides of the polygon. The trick is to do some precomputation to check if a divisor is a solution very fast. Jorge Bernadas also posted a binary search solution on TopCoder''s forum.', 70, 1, '2009-01-16 01:08:11', '2009-01-16 01:08:11', '4220.cpp', 'text/x-c++src', 1776, '2009-01-16 01:08:11'),
(155, 'Utilice el algoritmo de Floyd para calcular la distancia mínima entre todos los nodos. Utilice la propiedad de simetria de la matriz que se forma cuando la relación es bidireccional para hacer un poco más rapido el algoritmo.', 87, 6, '2009-01-16 04:04:52', '2009-01-16 04:04:52', 'bestspot.cpp', 'application/octet-stream', 1553, '2009-01-16 04:04:52'),
(156, 'I used the built-in __gcd function. The only fact you needed to know is that gcd(a, b) * lcm(a, b) == a*b. <br />\r\nAs Amy Winehouse would say, "What kind of fuckery is this?"', 94, 1, '2009-01-18 19:28:03', '2009-01-18 19:28:03', 'sixth.cpp', 'text/x-c++src', 582, '2009-01-18 19:28:03'),
(157, 'Nothing fancy.', 95, 1, '2009-01-18 19:34:51', '2009-01-18 19:34:51', 'crypto.cpp', 'text/x-c++src', 922, '2009-01-18 19:34:51'),
(158, 'A very nice problem where bitwise operation can be used.', 96, 1, '2009-01-18 19:45:36', '2009-01-18 19:45:36', 'clock.cpp', 'text/x-c++src', 945, '2009-01-18 19:45:36'),
(159, 'I solved it using a recursive solution, where I try to place a pivot that is the center of the partition, and then try to assemble the rest of the partition. I also added memoization to speed things up.', 97, 1, '2009-01-18 19:51:36', '2009-01-18 19:51:36', 'partitions.cpp', 'text/x-c++src', 1054, '2009-01-18 19:51:36'),
(160, '"Nastiness is a warm gun." <br />\r\nHorrible problem. Spent like two hours on this bitch.', 98, 1, '2009-01-18 19:56:20', '2009-01-18 19:56:20', 'sort.cpp', 'text/x-c++src', 3819, '2009-01-18 19:56:20'),
(161, 'After checking that the figure is valid, add 1 unit of area for each face of each cube unless it has another neighbor cube touching that face.', 99, 1, '2009-01-18 20:01:58', '2009-01-18 20:01:58', 'poly.cpp', 'text/x-c++src', 1978, '2009-01-18 20:01:58'),
(162, 'Calcular el GCD y despejando tenemos el LCM.', 94, 6, '2009-01-19 04:51:15', '2009-01-19 04:51:15', '4232.cpp', 'application/octet-stream', 656, '2009-01-19 04:51:15'),
(163, 'String Manipulation', 95, 6, '2009-01-19 04:57:16', '2009-01-19 04:57:16', '4233.cpp', 'application/octet-stream', 664, '2009-01-19 04:57:16'),
(164, 'Almaceno los numeros en binario en una matriz 6x3 y la recorre dos veces.', 96, 6, '2009-01-19 04:59:09', '2009-01-19 04:59:09', '4234.cpp', 'application/octet-stream', 1512, '2009-01-19 04:59:09'),
(165, 'Couting the number of swaps using the bublesort algorithm, we don''t need to sort.', 5, 17, '2009-01-19 14:57:35', '2009-01-19 14:57:35', '299_-_Train_Swapping.java', 'application/octet-stream', 563, '2009-01-19 14:57:35'),
(166, 'Simplemente se usa que 1 + 2² + 3² + ... + n² = n(n + 1)(2n + 1) / 6 <br/>\r\nQue facilmente se puede demostrar por inducción', 68, 3, '2009-01-22 16:51:03', '2009-01-22 16:51:03', '4215.cc', 'text/x-c++src', 232, '2009-01-22 16:51:03'),
(167, 'Simplemente recorrer la string y verificar la condición', 90, 3, '2009-01-22 16:54:32', '2009-01-22 16:54:32', 'hi.cc', 'text/x-c++src', 1162, '2009-01-22 16:54:32'),
(168, 'This problem reduces to minimum weighted bipartite matching. I solved it using minimum-cost-maximum-flow. I''m not pretty sure if this implementation will work in general, I think it will only work on bipartite matching problems.', 103, 1, '2009-01-23 21:07:17', '2009-01-23 21:10:51', '3276.2.cpp', 'text/plain', 4453, '2009-01-23 21:10:51'),
(169, 'Here''s another implementation, this one uses Misof''s min-cost-max-flow implementation. Again, I''m not sure if it works on ALL graphs, I still have to read a lot on this subject.', 103, 1, '2009-01-23 21:39:27', '2009-01-23 21:39:27', '3276.cpp', 'text/plain', 5588, '2009-01-23 21:39:27'),
(170, 'Ad-hoc.', 104, 1, '2009-01-24 02:06:24', '2009-01-24 02:06:24', '10161.cpp', 'text/x-c++src', 1101, '2009-01-24 02:06:24'),
(171, 'Hock''s idea to use long double instead of big integer, and to use logarithm instead of sqrt', 105, 3, '2009-01-31 20:47:57', '2009-01-31 20:47:57', '113.cc', 'text/x-c++src', 288, '2009-01-31 20:47:57'),
(172, 'This problem was used in the training sessions at Universidad Antonio Nariño. <br />\r\nMy solutions uses dynamic programming, with state dp[i][k] = Maximum area that can be achieved building exactly K buildings in lots from 0 to i. Complexity is O(n^3).', 106, 1, '2009-01-31 22:49:12', '2009-01-31 22:49:12', 'street.cpp', 'text/x-c++src', 2021, '2009-01-31 22:49:12'),
(173, 'Igual al de Arcila pero es que quiero ver que sale en el home cuando me salga solved :-$', 105, 22, '2009-01-31 22:51:10', '2009-01-31 22:51:10', 'poc.cpp', 'application/octet-stream', 557, '2009-01-31 22:51:10'),
(174, 'Bubble Sort', 5, 22, '2009-01-31 22:59:46', '2009-01-31 22:59:46', 'ts.cpp', 'application/octet-stream', 840, '2009-01-31 22:59:46'),
(177, 'Funciona como un control de turnos.\r\n\r\nLa letra que buscamos es:\r\n\r\n(posicion + lugar) % total_letras_tecla\r\n\r\nHay que tener cuidado en como distribuimos las letras. En la tecla dos (3 letras) ==>  A=2 ; B=1;C=0', 108, 22, '2009-02-01 04:36:08', '2009-02-01 04:36:08', 'sms.cpp', 'text/x-c++src', 3486, '2009-02-01 04:36:08'),
(178, 'Leí el link de arriba (el de Ronald) =/', 68, 22, '2009-02-01 04:56:13', '2009-02-01 04:56:13', 'feynman.cpp', 'text/x-c++src', 118, '2009-02-01 04:56:13'),
(179, 'Basta con evaluar el polinomio desde 0 hasta el grado del polinomio+1... Si la respuesta de estos casos siempre es entero, el polinomio es entero...<br><br>\r\nEl método de BigMod es el de Andi. El problema lo hicimos Peláez y yo', 109, 22, '2009-02-01 05:12:59', '2009-02-01 05:12:59', 'always.cpp', 'text/x-c++src', 3037, '2009-02-01 05:12:59'),
(180, 'Los porcentajes posibles se van poniendo en una cola de prioridad. El problema debe tener alguna fórmula matemática para resolverlo en un tiempo bajo (la solución que pongo se demora 4+segs)\r\n\r\nLa solución la hicimos Peláez y yo (con una ayuda extra de Andi)...', 110, 22, '2009-02-01 05:19:00', '2009-02-01 05:19:00', 'huffman.cpp', 'text/x-c++src', 3467, '2009-02-01 05:19:00'),
(181, 'Longest increasing sub sequence.<br/>\r\nhttp://www.algorithmist.com/index.php/Longest_Increasing_Subsequence\r\n', 55, 20, '2009-02-05 05:22:21', '2009-02-05 05:26:58', '4183_-_Stock_Exchange.cpp', 'text/plain', 724, '2009-02-05 05:26:58'),
(182, 'Express the number of regions as a recurrence on the number of points. You will have to solve it on paper.', 111, 1, '2009-02-05 15:29:13', '2009-02-05 15:32:14', 'Main.java', 'application/octet-stream', 833, '2009-02-05 15:32:14');
INSERT INTO `solutions` (`id`, `explanation`, `problem_id`, `user_id`, `created_at`, `updated_at`, `source_code_file_name`, `source_code_content_type`, `source_code_file_size`, `source_code_updated_at`) VALUES
(183, 'Straightforward dynamic programming solution, with state: dp[i] = Number of ways to sum exactly i. Big integer is needed so I used Java.', 112, 1, '2009-02-06 01:26:47', '2009-02-06 01:26:47', 'Main.java', 'text/x-java', 707, '2009-02-06 01:26:47'),
(184, 'handle logarithms', 105, 17, '2009-02-06 15:30:54', '2009-02-06 15:30:54', '113_-_Power_of_Cryptography.java', 'application/octet-stream', 330, '2009-02-06 15:30:54'),
(185, 'The idea is similar to Bellman-Ford''s algorithm: We make a loop trying to deduce new prices. These new prices might create other new prices so we repeat the loop until no new prices are found.', 113, 1, '2009-02-07 04:11:03', '2009-02-07 04:11:03', 'MakingPotions.cpp', 'text/x-c++src', 1794, '2009-02-07 04:11:03'),
(186, 'A simple geometry problem', 114, 3, '2009-02-07 15:51:49', '2009-02-07 15:51:49', '10573.cc', 'text/x-c++src', 1026, '2009-02-07 15:51:49'),
(187, 'I used the pythagorean theorem. The explanation is in the code. Very nice problem!', 114, 1, '2009-02-07 19:45:15', '2009-02-07 19:45:15', '10573.cpp', 'text/x-c++src', 1463, '2009-02-07 19:45:15'),
(188, 'Some bitwise operation', 96, 3, '2009-02-07 20:51:11', '2009-02-07 20:51:11', '4234.cc', 'text/x-c++src', 1175, '2009-02-07 20:51:11'),
(189, 'The easy decode problem', 95, 3, '2009-02-07 21:03:55', '2009-02-07 21:03:55', '4233.cc', 'text/x-c++src', 1059, '2009-02-07 21:03:55'),
(190, 'lcm(a,b)=a*b/gcd(a.b) and gcd algorithm', 94, 3, '2009-02-07 21:14:31', '2009-02-07 21:14:31', '4232.cc', 'text/x-c++src', 1037, '2009-02-07 21:14:31'),
(191, 'Note that <pre>if n%2 == 1</pre>\r\nWe can get a recursively palindromic partition by putting\r\n any odd number in he center and then a recursively palindromic\r\n partition <pre> else </pre> We can get a recursively palindromic partition by putting any even number in the center and then a recursively palindromic partition. Then we made the same history as andy\r\n', 97, 3, '2009-02-07 22:08:14', '2009-02-07 22:08:14', '4235.cc', 'text/x-c++src', 1007, '2009-02-07 22:08:14'),
(192, 'Find out how much would you add if you choose to swap a letter with Z and pick the K letters with biggest values. I implemented big integer sum and made all operations on base 36.', 115, 1, '2009-02-07 23:09:32', '2009-02-07 23:09:32', 'HexatridecimalSum.clean.cpp', 'text/x-c++src', 1985, '2009-02-07 23:09:32'),
(193, 'Use el <A href=http://www.maa.org/joma/Volume8/Kalman/index.html>Marden''s Theorem</A><br/>Este dice que si se tiene un polinomio p(x) cuyas raices estan situadas en el plano complejo y no son colineales (forman un triangulo), las raices de p''(x) son los puntos focales de su steiner inellipse (elipse tangente a los puntos medios).<br/>Lo primero que habia que hacer es dadas las coordenadas del triangulo (a,b), (c,d), etc, transformarlas a complejos, z1 = a + bi, z2 = c + di, etc.<br/>luego se tiene el polinomio p(x) = (x - z1)(x - z2)(x - z3), cuya derivada (despues de simplificar) es p''(x) = 3x² - 2x(z1 + z2 + z3) + z1*z2 + z2*z3 + z1*z3<br/>\r\nSe usa la ecuacion cuadratica para hallar que x = 2(z1+z2+z3)/6 +- [4(z1 + z2 + z3)² - 12(z1*z2 + z2*z3 + z1*z3)]^(1/2)/6<br/>despues de mucha simplificación se obitene que x = (z1+z2+z3)/3 +- (z1²+z2²+z3²-z1*z2-z2*z3-z1*z3)^(1/2)/3. Listo se reemplaza z1, z2, z3, lo cual nos da una raiz gigante<br/>x = [(a+c+e) + (b+d+f)*i]/3 +- [(a²+c²+e²-b²-d²-f²-ac+bd-ce+df-ae+bf) + (2ab+2cd+2ef-ad-bc-cf-de-af-be)*i]^(1/2)/3<br/>Los parentesis adentro de la raiz tienen la forma c = a + bi, por lo que son un numero complejo, entonces llamo el rimer parentesis _x, y el segundo _y.<br/>\r\nLa raiz (_x + _yi)^(1/2) da como resultado x = (r + _x)^(1/2)/2^(1/2), y y = signo(_y)*(r - _x)^(1/2)/2^(1/2).\r\nEsto da que la coordenada x de los focos son la parte real, y la coordenada y la compleja sin el i.<br/>\r\nfocox = (a+c+e(+-)x)/3<br/>\r\nfocoy = (b+d+f(+-)y)/3<br/>\r\nLa distancia focal se calcula desde cualquier punto medio a los dos focos.', 102, 20, '2009-02-08 00:04:48', '2009-02-08 00:42:37', '4240_-_Joe_Triangular_Garden.cpp', 'text/x-c++src', 1564, '2009-02-08 00:42:37'),
(194, 'Usando el teorema mas maravilloso de la matemática(marven) se pueden obtener las distancias focales de la soluciones complejas del polinomio de p''(z), donde <pre> p(z) = Z^3 - (z0 + z1 + z2)*Z^2 + (z0*z1 + z0*z2 + z1*z2) * Z + z0*z1*z2 </pre> donde los z_i son los vértices del triangulo, ahora bien como p(z) es de orden tres, su primera derivada es de orden 2, por lo tanto por Gauss tendremos que siempre hay dos raíces complejas y vuala', 102, 3, '2009-02-08 16:09:46', '2009-02-16 17:42:31', '4240.c', 'text/x-csrc', 2272, '2009-02-16 17:42:31'),
(195, '<href a="http://www.algorithmist.com/index.php/Longest_Increasing_Subsequence.cpp"/>\r\nEse código en c', 55, 3, '2009-02-08 16:42:55', '2009-02-08 16:42:55', '4183.c', 'text/x-csrc', 1036, '2009-02-08 16:42:55'),
(196, 'The area of a simple polygon, that andy and I proved on "semillero de programación" with Green''s theorem', 59, 3, '2009-02-08 16:53:56', '2009-02-14 19:01:40', '4187.cc', 'text/x-c++src', 1281, '2009-02-08 16:53:56'),
(197, 'El valor en el eje X para una parábola vertical esta dado por <pre> -b/2a </pre>\r\nsi la parábola es de la forma <pre> ax²+bx+c</pre>, y utilizo redondeo por ajuste', 63, 3, '2009-02-08 17:49:59', '2009-02-08 17:49:59', '4191.cc', 'text/x-c++src', 917, '2009-02-08 17:49:59'),
(198, 'Try to build all possible sequences starting in all possible starting points. Complexity is O(n?), and that explains the low constraint on the board size.', 116, 1, '2009-02-08 18:11:22', '2009-02-08 18:11:22', 'FindingSquareInTable.clean.cpp', 'text/x-c++src', 1452, '2009-02-08 18:11:22'),
(199, 'Pre compute desde r=5 a r=20 manejando las ultimas 20 cifras en una arreglo de 20 números y aumentando de 100 en 100, porque parecía ser que todos terminan en 89, claro que casi se demoro 3 días.', 101, 3, '2009-02-08 19:03:44', '2009-02-08 19:03:44', '4239.cc', 'text/x-c++src', 570, '2009-02-08 19:03:44'),
(200, '...', 95, 22, '2009-02-08 21:27:34', '2009-02-08 21:27:34', '4233.cpp', 'text/x-c++src', 456, '2009-02-08 21:27:34'),
(201, 'Es contar los divisores de los números en un intervalo de máximo 10mil (Mayor - Menor = 10mil)\r\n\r\nDespués es decir que número tiene el mayor número de divisores (y cuantos)...', 117, 22, '2009-02-08 22:32:40', '2009-02-08 22:32:40', 'divisors.cc', 'text/x-c++src', 581, '2009-02-08 22:32:40'),
(202, 'Soundex es un algoritmo que organiza las palabras de acuerdo a su sonido (en ingles). (<a href="http://en.wikipedia.org/wiki/Soundex" target="_blank">wiki-link</a>)\r\n\r\nLa variable prev es para ver si ya había puesto esa letra.\r\n\r\nAunque el soundex original siempre es de 4 digitos por palabra, aqui no...', 118, 22, '2009-02-08 23:18:08', '2009-02-09 15:43:55', 'soundex.cc', 'text/x-c++src', 390, '2009-02-08 23:18:08'),
(203, ':-)', 19, 22, '2009-02-08 23:50:29', '2009-02-08 23:50:29', 'ho.cpp', 'text/x-c++src', 177, '2009-02-08 23:50:29'),
(204, 'memo and divisors', 117, 3, '2009-02-09 00:55:22', '2009-02-09 00:55:22', '294.cc', 'text/x-c++src', 1256, '2009-02-09 00:55:22'),
(205, 'ad hoc', 118, 3, '2009-02-09 01:37:45', '2009-02-09 01:37:45', '10260.cc', 'text/x-c++src', 1115, '2009-02-09 01:37:45'),
(206, 'sieve, primes and number theory', 119, 3, '2009-02-09 02:12:01', '2009-02-09 02:12:01', '583.cc', 'text/x-c++src', 1715, '2009-02-09 02:12:01'),
(207, ':-)', 94, 22, '2009-02-09 03:18:50', '2009-02-09 03:18:50', 'sixthGrade.cc', 'application/octet-stream', 375, '2009-02-09 03:18:50'),
(208, 'Number theory and some math', 120, 3, '2009-02-09 03:49:40', '2009-02-09 03:49:40', '11526.2.cc', 'text/x-c++src', 1010, '2009-02-09 03:49:40'),
(209, 'sieve', 121, 3, '2009-02-09 05:11:26', '2009-02-09 05:11:26', '406.cc', 'text/x-c++src', 1528, '2009-02-09 05:11:26'),
(210, 'Prime factorization in O(n^0.5).', 119, 1, '2009-02-10 02:55:48', '2009-02-10 02:55:48', '583.cpp', 'text/x-c++src', 864, '2009-02-10 02:55:48'),
(211, 'Nothing fancy.', 118, 1, '2009-02-10 02:57:22', '2009-02-10 02:57:22', '10260.cpp', 'text/x-c++src', 862, '2009-02-10 02:57:22'),
(213, 'Generate the Sieve of Erathosthenes and print the cut.', 121, 1, '2009-02-10 02:59:09', '2009-02-10 02:59:09', '406.cpp', 'text/x-c++src', 1574, '2009-02-10 02:59:09'),
(214, 'By far the most epic code I''ve ever written.', 117, 1, '2009-02-10 03:22:06', '2009-02-10 03:22:06', '294.cpp', 'text/x-c++src', 1737, '2009-02-10 03:22:06'),
(215, 'Easy problem if you know that \r\n<pre>\r\n1³ + 2³ + 3³ + 4³ + ... + n³ = (n²+n)²/4\r\n</pre>', 122, 3, '2009-02-10 15:28:01', '2009-02-10 15:28:01', '10302.cc', 'text/x-c++src', 317, '2009-02-10 15:28:01'),
(216, 'No calculo todos los fibs sino los que necesito. Guardo el último valor pedido y si la entrada es menor solo imprimo, si es mayor genero los fibs desde el último hasta ese número.', 35, 22, '2009-02-10 18:17:20', '2009-02-10 18:17:20', 'bee.cc', 'text/x-c++src', 406, '2009-02-10 18:17:20'),
(217, 'The list of floors of divisions will always be a non-increasing sequence. We step on the first element (i = 1), and from now on, there''s an O(1) way to find out what''s the last element j of the list such that n / i = n / j. That is, we find out how many times we have to add n / i in O(1) and then advance to the next subsequence of equal elements (i = j + 1). I don''t know what''s the complexity of this solution, but it''s rather slow (1.5 seconds). ', 120, 1, '2009-02-10 19:38:42', '2009-02-10 19:38:42', '11526.2.cpp', 'text/x-c++src', 466, '2009-02-10 19:38:42'),
(218, 'Dynamic programming, with state dp[i] = Minimum cost to repair the fences from 0 to i (inclusive).', 123, 1, '2009-02-10 23:54:59', '2009-02-10 23:54:59', 'FenceRepairing.clean.cpp', 'text/x-c++src', 932, '2009-02-10 23:54:59'),
(219, 'Using Java''s BigInteger, the solution is straightforward.', 124, 1, '2009-02-11 00:12:00', '2009-02-11 00:12:00', 'cruel1.java', 'text/x-java', 939, '2009-02-11 00:12:00'),
(220, 'The key idea is that the polynomial has <strong>only one root</strong>, so we can use binary search to find it. P(x) crosses the x-axis at exactly one point (the solution). Let the solution be ans. If we have an interval [left, right] such that ans is included in it, then we may evaluate f((left + right) / 2) (the center of the interval) and take a decision on which side to move closer to ans, based on the signs of f(left), f(right) and f((left + right) / 2).', 125, 1, '2009-02-11 00:45:41', '2009-02-11 00:46:59', 'cruel2.cpp', 'text/x-c++src', 1252, '2009-02-11 00:46:59'),
(221, 'Plain backtracking. The only idea I used to speed it up is to create all prefixes in the dictionary and cut the backtracking branch once the word we have made so far is not a prefix of some word in the dictionary.', 126, 1, '2009-02-11 01:07:45', '2009-02-11 01:07:45', 'coggle.cpp', 'text/x-c++src', 1484, '2009-02-11 01:07:45'),
(222, 'Utilice el método de Bisección', 125, 6, '2009-02-11 02:46:45', '2009-02-11 02:46:45', 'cruel2.cpp', 'application/octet-stream', 886, '2009-02-11 02:46:45'),
(223, 'Verifico si se puede armar cada palabra del diccionario (BackTracking)', 126, 6, '2009-02-11 02:48:57', '2009-02-11 02:48:57', 'coggle.cpp', 'application/octet-stream', 1447, '2009-02-11 02:48:57'),
(224, 'Dynamic programming, with state dp[n][i] = Number of ways to place n animals, where i is 1 if the last animal is a bull and 0 if it is a cow.', 127, 1, '2009-02-11 02:51:54', '2009-02-11 02:51:54', 'bullcow.cpp', 'text/x-c++src', 1026, '2009-02-11 02:51:54'),
(225, '(-:', 128, 22, '2009-02-11 04:32:11', '2009-02-11 04:32:11', 'cola.cc', 'application/octet-stream', 607, '2009-02-11 04:32:11'),
(226, ':-)', 129, 22, '2009-02-11 04:38:22', '2009-02-11 04:38:22', 'primewords.cc', 'application/octet-stream', 1075, '2009-02-11 04:38:22'),
(227, '  First consider this subproblem:\r\n  Given an array of integers, find the subarray of contiguous elements\r\n  of maximum sum. There''s an O(n) algorithm to solve this problem, known \r\n  as Kadane''s algoritm. But it only considers sums of contiguous elements,\r\n  but we have a torus so the maximum sum could be formed by elements that\r\n  wrap around the corner. To solve this other part, we find the subarray\r\n  of minimum sum and then subtract this value from the sum of all elements\r\n  in the array. <br />\r\n  After we have solved this subproblem, we may solve the original problem\r\n  by considering all possible rows, all possible columns and all possible\r\n  diagonals, and then applying the algorithm above.\r\n  <br />\r\n  Here''s a similar problem to this one, which can be solved in O(n^3):\r\n          <a href="http://acm.uva.es/p/v108/10827.html">Maximum sum on a torus</a>', 130, 1, '2009-02-11 14:50:49', '2009-02-11 14:50:49', 'lepr.cpp', 'text/plain', 1929, '2009-02-11 14:50:49'),
(228, 'Si el número de divisores es par la luz estara apagada, si es impar estara prendida.<br/>Para cualquier número n, si d es divisor de n, n/d tambien lo sera ya que n/n/d = d.<br/>Esto hace que los divisores de los numeros avancen en parejas, exepto en el caso que n sea cuadrado perfecto, ya que n seria de la forma p², y un divisor de p² es p, por lo cual su pareja es el mismo p, o sea que los cuadrados perfectos tienen un número impar de divisores.', 131, 20, '2009-02-11 19:37:01', '2009-02-11 19:41:10', '10110_-_Light_more_light.cpp', 'text/x-c++src', 215, '2009-02-11 19:41:10'),
(229, 'First assign each node with its island number (I used DFS for this). After that, find the minimum cost to go from one island to another one. After that, pick the starting island.', 132, 1, '2009-02-11 23:07:28', '2009-02-11 23:07:43', 'surround.cpp', 'text/plain', 1665, '2009-02-11 23:07:28'),
(230, 'Simulación. Me tomo toda las colas que pueda y voy reclamando. Si al final me quedan 2 vacias, puedo pedir una prestada para tomarme una última cola más.', 128, 6, '2009-02-12 00:21:27', '2009-02-12 00:21:27', 'cola.cpp', 'application/octet-stream', 331, '2009-02-12 00:21:27'),
(231, 'El mismo problema del carcelero borracho =P.', 131, 6, '2009-02-12 01:21:34', '2009-02-12 01:21:34', 'light.cpp', 'application/octet-stream', 267, '2009-02-12 01:21:34'),
(232, 'Casi que no! =S Después de hacer muchos círculos raros y casos raros Arcila me dijo el truco cuando me dan T (que efectivamente afirmaba mis sospechas). Despues de eso el problema fué simple :-)\r\n', 114, 22, '2009-02-12 02:23:52', '2009-02-12 02:23:52', 'gpa.cc', 'text/x-c++src', 378, '2009-02-12 02:23:52'),
(233, 'This is a very nice problem! <br />\r\nFirst, notice that it makes no sense to keep an item if we know tomorrow it will be cheaper. It''s better to sell it, and then use that money tomorrow to buy the maximum amount of "earnings" from available products. In other words, we must only buy items that we know that tomorrow will be more expensive (else we are losing money). Now, in order to maximize the earnings for tomorrow we have to buy some stock items on the best way. Imagine that you have m dollars on one day, and each item on stock has some price and some extra earnings for tomorrow. Which objects should you buy in order to maximize your earnings for tomorrow without exceeding your budget m? With a little thought, you will notice that this problem is exactly the knapsack problem! So we use dynamic programming several times (one for each day) and then print the maximum achievable money on the last day.', 133, 1, '2009-02-12 03:05:37', '2009-02-12 03:05:37', 'stock.cpp', 'text/x-c++src', 1229, '2009-02-12 03:05:37'),
(234, 'A "Dijkstra-style" search with state [i, k] will run on time. In this state, i means the node we are visiting and k means how many trails we have revamped so far. <br \\>\r\n\r\nFrom state [i, k] we have 2 options:\r\n<ul>\r\n<li>Move to state [j, k] with weight W, where j is a neighbor of i and W is the cost of the edge that goes from i to j. (Do not delete edge (i,j))</li>\r\n<li>Move to state [j, k+1] with weight 0, where j is a neighbor of i. (Delete edge (i, j))</li>\r\n</ul>', 134, 1, '2009-02-12 03:11:46', '2009-02-12 03:13:07', 'revamp.cpp', 'text/x-c++src', 2112, '2009-02-12 03:11:46'),
(235, 'Calculo los primos y cuento cuantas parejas hay.', 135, 22, '2009-02-12 03:13:16', '2009-02-12 03:13:16', '686.cpp', 'text/x-c++src', 527, '2009-02-12 03:13:16'),
(236, 'Uso de BigInteger', 124, 6, '2009-02-12 04:03:25', '2009-02-12 04:03:25', 'cruel1.java', 'application/octet-stream', 991, '2009-02-12 04:03:25'),
(237, ':-)\r\n<p>Cuidado con la cadena máxima </p>', 136, 22, '2009-02-12 04:44:19', '2009-02-12 04:47:17', '543.cpp', 'text/x-c++src', 688, '2009-02-12 04:44:19'),
(238, 'Imagine that the shuttle had always a total capacity of 1. In that case, the shuttle could pick at most 1 cow from each group, so the problem reduces to a problem known as the "activity selection problem", which has a greedy solution (Explained <a href="http://www.topcoder.com/tc?module=Static&d1=tutorials&d2=greedyAlg">here</a> and also on Cormen''s book). <br />\r\nThe only change that needs to be done to this algoritm, is to keep tracks of how many cows will be using the shuttle on each station, and then try to add as much cows as possible from each group. I don''t have a proof for this, but it passes the test cases.', 137, 1, '2009-02-12 16:29:13', '2009-02-12 16:30:22', 'shuttle.cpp', 'text/plain', 1479, '2009-02-12 16:29:13'),
(239, 'Solution its based on solution from:\r\nhttp://programmingcontest.usask.ca/samples/Turtle.java, and from uva forum, also some advices from andres for making the update of the two rows that were used for the DP :D', 138, 13, '2009-02-13 03:21:32', '2009-02-13 03:21:32', 'Turtle.java', 'application/octet-stream', 2468, '2009-02-13 03:21:32'),
(240, ':-)<br><br>\r\nDiscutiendo con Checho y Peláez, llegué a la conclusión que lo mejor para evitar un challenge en TC es volver mierda el código!', 139, 22, '2009-02-13 05:26:40', '2009-02-13 05:42:25', 'y11.cc', 'text/x-c++src', 974, '2009-02-13 05:41:10'),
(241, 'I use a sieve with the primes that are in the interval of the solution and try to fix some prime with conjecture', 136, 3, '2009-02-13 12:09:32', '2009-02-13 12:09:32', '543.cc', 'text/x-c++src', 698, '2009-02-13 12:09:32'),
(242, 'I use a sieve, and count how many pairs of primes fix the conjecture', 135, 3, '2009-02-13 12:11:52', '2009-02-13 12:11:52', '686.cc', 'text/x-c++src', 590, '2009-02-13 12:11:52'),
(243, 'Simple question, is a perfect square or not a perfect square? ', 131, 3, '2009-02-13 12:17:58', '2009-02-13 12:17:58', '10110.cc', 'text/x-c++src', 183, '2009-02-13 12:17:58'),
(244, 'Some obfuscated code\r\n', 139, 3, '2009-02-13 12:53:34', '2009-02-13 12:53:34', '10929.cc', 'text/x-c++src', 653, '2009-02-13 12:53:34'),
(245, 'The real solution consist to sum the digits of the even position and subtract th digits of the odd position, to determine the divisibility for 11', 139, 3, '2009-02-13 13:00:37', '2009-02-13 13:00:37', 'real.cc', 'text/x-c++src', 411, '2009-02-13 13:00:37'),
(246, 'Nada raro, código feo', 140, 5, '2009-02-13 20:02:14', '2009-02-13 20:02:14', '10018.cpp', 'text/plain', 606, '2009-02-13 20:02:14'),
(247, 'Nothing fancy, just simulate the process.', 140, 1, '2009-02-13 20:58:10', '2009-02-13 20:58:10', '10018.cpp', 'text/x-c++src', 927, '2009-02-13 20:58:10'),
(248, 'Simulate the stated process.', 141, 1, '2009-02-13 21:27:22', '2009-02-13 21:27:22', 'SkiFriction.clean.cpp', 'text/x-c++src', 924, '2009-02-13 21:27:22'),
(249, '(-:', 141, 22, '2009-02-13 21:52:49', '2009-02-13 21:52:49', 'skiFriction.cc', 'text/x-c++src', 475, '2009-02-13 21:52:49'),
(250, 'Simulación.', 141, 6, '2009-02-13 23:32:33', '2009-02-13 23:32:33', 'SkiFriction.cpp', 'application/octet-stream', 555, '2009-02-13 23:32:33'),
(251, 'Teoria de grafos. Dfs.', 142, 6, '2009-02-13 23:41:34', '2009-02-13 23:41:34', 'CellRemoval.cpp', 'application/octet-stream', 1008, '2009-02-13 23:41:34'),
(252, 'Sumar en bolos. El input lo leimos horrible pq en C++ falta (no me la sé y no encontré) una función que me remplaxe un substring por otro en un string\r\n<br><br>\r\njava.replaceAll("str1","str2");\r\n<br><br>', 143, 22, '2009-02-14 15:38:25', '2009-02-14 15:38:25', '584.cc', 'text/x-c++src', 1609, '2009-02-14 15:38:25'),
(253, 'Given that the graph is a tree, then DFS is very easy to implement since you don''t have to check for already visited nodes. In my code, dfs(u) returns the number of leaves under the sub-tree rooted at u.', 142, 1, '2009-02-14 16:10:51', '2009-02-14 16:10:51', 'CellRemoval.clean.cpp', 'text/x-c++src', 1055, '2009-02-14 16:10:51'),
(254, 'Dynamic programming, with state:\r\n\r\ndp[d][m] = Probability of having m marked birds on day d.\r\n\r\nA detailed explanation is in the code.', 144, 1, '2009-02-14 16:13:22', '2009-02-14 16:13:22', 'BirdsCounting.clean.cpp', 'text/x-c++src', 3201, '2009-02-14 16:13:22'),
(255, 'I used the area formula that appears on Programming Challenges (I think it can be proved with Green''s theorem. I think I proved it when I took Calculus III)', 59, 1, '2009-02-14 16:27:01', '2009-02-14 16:27:01', '4187.cpp', 'text/x-c++src', 950, '2009-02-14 16:27:01'),
(256, 'I found a very old code (2007) that I had written for this problem.', 131, 1, '2009-02-14 16:30:33', '2009-02-14 16:30:33', 'p10110_Accepted.pas', 'text/x-pascal', 493, '2009-02-14 16:30:33'),
(258, 'Simple simulation.', 129, 1, '2009-02-14 16:51:41', '2009-02-14 16:51:41', '10924.cpp', 'text/x-c++src', 919, '2009-02-14 16:51:41'),
(259, 'Dynamic programming, with state<br/>\r\ndp[i] = Number of proteins such that its last codon ends in any character between s[0..i].', 145, 1, '2009-02-14 19:38:16', '2009-02-14 19:38:16', 'DNADeletion.clean.cpp', 'text/x-c++src', 1906, '2009-02-14 19:38:16'),
(260, 'Brute force every possible solution.', 136, 1, '2009-02-14 21:13:09', '2009-02-14 21:13:09', '506.cpp', 'text/x-c++src', 1065, '2009-02-14 21:13:09'),
(261, 'Bruteforce all possible pairs.', 135, 1, '2009-02-14 21:24:13', '2009-02-14 21:24:13', '686.cpp', 'text/x-c++src', 1049, '2009-02-14 21:24:13'),
(262, 'Simple use of changing bases.', 146, 4, '2009-02-15 17:54:36', '2009-02-15 18:02:09', 'whatBaseIsThis.cpp', 'application/octet-stream', 2904, '2009-02-15 18:02:09'),
(263, 'A simple problem to know something about your favorite language standard I/0 functions.', 147, 4, '2009-02-15 17:59:08', '2009-02-15 18:01:02', 'simple.cpp', 'application/octet-stream', 1368, '2009-02-15 18:01:02'),
(264, 'A simple problem with a twist in changing bases.', 148, 4, '2009-02-15 18:04:19', '2009-02-15 18:04:19', 'baseEquality.cpp', 'application/octet-stream', 2873, '2009-02-15 18:04:19'),
(265, 'A simple base convertion problem. Keep in mind the definition of remainder to adjust the behavior of the % operand to suit the problem.', 149, 4, '2009-02-15 18:07:27', '2009-02-15 18:07:27', 'base2.cpp', 'application/octet-stream', 1177, '2009-02-15 18:07:27'),
(266, 'DP and bitwise. The explanation in the code', 150, 3, '2009-02-15 18:27:56', '2009-02-15 18:27:56', '10149.cc', 'text/x-c++src', 5497, '2009-02-15 18:27:56'),
(267, 'I just try to find the prefix and the suffix', 155, 3, '2009-02-15 19:42:51', '2009-02-15 19:42:51', '11575.cc', 'text/x-c++src', 1157, '2009-02-15 19:42:51'),
(268, 'I honestly didn''t understand Axy''s solution. Here''s mine: <br />\r\ndp[category][turns] = Maximum score that can be achieved having assigned categories in the interval [0..category] with some turns. The turns that were used will be "on" bits on the turns mask. <br />\r\nFor example,\r\ndp[4][0011000101001] contains the maximum score that can be obtained if we already used categories {0, 1, 2, 3, 4} and turns {0, 3, 5, 9, 10}. <br />\r\nIf dp[5][turns] >= 63, it means that we have matched the categories {0, 1, 2, 3, 4, 5} with some turns in such a way that we can add the 35 point bonus.<br />\r\nThe complexity of this solution is O(n^2 * 2^n). With n = 13, we have an estimate of 1384448 instructions (Even a donkey can execute those under a second). It runs in 0.040 seconds on the online judge.', 150, 1, '2009-02-15 21:27:19', '2009-02-15 21:27:19', '10149.2.cpp', 'text/x-c++src', 3635, '2009-02-15 21:27:19'),
(269, 'Find the longest suffix of string i such that string i+1 starts with it. Complexity is O(w k^2) but can be reduced to O(w k) with a smart string matching algorithm. ', 155, 1, '2009-02-15 21:59:29', '2009-02-15 21:59:29', '11576.cpp', 'text/x-c++src', 971, '2009-02-15 21:59:29'),
(270, 'Ad hoc', 141, 3, '2009-02-15 23:24:38', '2009-02-15 23:24:38', 'SkiFriction.cpp', 'text/x-c++src', 954, '2009-02-15 23:24:38'),
(271, 'dfs retornando 1 en las hojas o cero en el que voy a matar', 142, 3, '2009-02-15 23:27:50', '2009-02-15 23:27:50', 'cell.cc', 'text/x-c++src', 1028, '2009-02-15 23:27:50'),
(272, 'Math problem.', 156, 4, '2009-02-16 00:16:45', '2009-02-16 00:16:45', 'joanna.cpp', 'application/octet-stream', 2158, '2009-02-16 00:16:45'),
(273, ':-)', 157, 22, '2009-02-16 02:51:50', '2009-02-16 02:53:41', 'sig.cc', 'text/x-c++src', 1327, '2009-02-16 02:53:41'),
(274, 'String and vectors problem :-)', 158, 22, '2009-02-16 03:22:16', '2009-02-16 03:22:16', 'mid.cc', 'text/x-c++src', 1472, '2009-02-16 03:22:16'),
(275, 'I solved some summations on paper and got this equations.', 156, 1, '2009-02-16 04:32:48', '2009-02-16 04:32:48', '913.cpp', 'text/x-c++src', 758, '2009-02-16 04:32:48'),
(276, 'Fucking string', 157, 3, '2009-02-16 05:15:34', '2009-02-16 05:15:34', 'Signature.cpp', 'text/x-c++src', 942, '2009-02-16 05:15:34'),
(277, 'Fucking string', 158, 3, '2009-02-16 05:17:34', '2009-02-16 05:17:34', 'Paramete.cpp', 'text/x-c++src', 1129, '2009-02-16 05:17:34'),
(278, 'I start by creating an array of numbers that is 3 times as long as the message to be encoded. This represents the image. Then go through the numbers in the original image and insert these numbers <pre>n = n/4 * 4 + encoded[k++]</pre>. I had to encode an "end of message" number.', 159, 3, '2009-02-16 05:26:16', '2009-02-16 05:26:16', 'Image.cpp', 'text/x-c++src', 1678, '2009-02-16 05:26:16'),
(279, 'A simple string problem', 160, 3, '2009-02-16 14:42:45', '2009-02-16 14:42:45', 'Inside.cc', 'text/x-c++src', 260, '2009-02-16 14:42:45'),
(280, 'Just a simulation', 161, 3, '2009-02-16 14:49:53', '2009-02-16 14:49:53', 'Two.cc', 'text/x-c++src', 235, '2009-02-16 14:49:53'),
(281, 'I process a recursive grammatic, with operator precedent ', 162, 3, '2009-02-16 15:34:15', '2009-02-16 15:35:02', 'Paren.cc', 'text/x-c++src', 3401, '2009-02-16 15:35:02'),
(282, ':-) Arcila hace esos códigos muy feos =(', 160, 22, '2009-02-16 15:59:07', '2009-02-16 15:59:07', 'easy.cc', 'text/plain', 1005, '2009-02-16 15:59:07'),
(283, 'You know or you can prove by induction if the n term of a sum of odd numbers are n so the sum of the odd numbers is ((n+1)/2)², now with know that we have ((n+1)/2)² terms in the construction of Joana, By a simple observation we can say that the last 3 elements of the construction are 2((n+1)/2)² - 1, 2((n+1)/2)² -1 -2 , 2((n+1)/2)² -1 -2 -2,\r\nAnd with simple algebra we have the answer to the problem :\r\n<pre> 3[(n+1)²/2 - 3)] </pre>', 156, 3, '2009-02-16 15:59:11', '2009-02-16 15:59:11', '913.cc', 'text/x-c++src', 155, '2009-02-16 15:59:11'),
(284, 'I found this closed formula solving some summations on paper.', 156, 1, '2009-02-16 16:36:50', '2009-02-16 16:36:50', 'a.cpp', 'text/plain', 153, '2009-02-16 16:36:50'),
(285, 'Explanation on the code', 163, 3, '2009-02-16 16:45:11', '2009-02-16 16:45:11', 'MonstersAndBunnies.cpp', 'text/x-c++src', 602, '2009-02-16 16:45:11'),
(286, 'Simulate the process carefully and use some bitwise magic.', 159, 1, '2009-02-16 17:10:17', '2009-02-16 17:10:17', 'steganography.cpp', 'text/plain', 1646, '2009-02-16 17:10:17'),
(287, 'If w*h > nTiles it''s imposible to solve <br>\r\nIf nTiles==w*h  I don''t have to cut anything\r\n\r\n<pre>if nTiles%w==0 or nTiles%h == 0</pre>, I just have to cut once (to get the desire "area")...\r\n<br><br>\r\nElse just simulate every cut and check for the answer\r\n<br><br><br>\r\n\r\n:-)', 166, 22, '2009-02-16 19:37:44', '2009-02-16 19:40:48', 'choc.cc', 'text/plain', 527, '2009-02-16 19:40:48'),
(288, 'Nothing too fancy.', 158, 1, '2009-02-16 20:34:58', '2009-02-16 20:34:58', 'parameter_substitution.cpp', 'text/plain', 790, '2009-02-16 20:34:58'),
(289, 'Straightforward.', 157, 1, '2009-02-16 20:40:57', '2009-02-16 20:40:57', 'signature.cpp', 'text/plain', 571, '2009-02-16 20:40:57'),
(290, 'I used Floyd-Warshall all-pairs shortest path algorithm.', 167, 1, '2009-02-16 21:12:19', '2009-02-16 21:12:51', 'comboboxes.cpp', 'text/plain', 1131, '2009-02-16 21:12:51'),
(291, 'I convert to decimal system the numbers that the give and plus one, then I covert to allowed system. More detail on the code', 168, 3, '2009-02-17 02:20:46', '2009-02-17 02:20:46', 'Integer.cc', 'text/x-c++src', 1762, '2009-02-17 02:20:46'),
(292, 'Something similar to what Axy did, but I don''t explicitly convert the number to another base.', 168, 1, '2009-02-17 02:53:56', '2009-02-17 02:53:56', 'IntegerGenerator.clean.cpp', 'text/x-c++src', 1574, '2009-02-17 02:53:56'),
(293, 'An element is binary-searchable if all elements to its left are smaller than him and all elements to its right are greater than him.', 169, 1, '2009-02-17 03:03:06', '2009-02-17 03:03:06', 'BinarySearchable.cpp', 'text/x-c++src', 966, '2009-02-17 03:03:06'),
(294, 'Tip: The sum of n odd numbers in sequence starting with 1 is iqual to n*n.', 156, 6, '2009-02-17 12:28:29', '2009-02-17 12:28:29', 'joa.cpp', 'application/octet-stream', 193, '2009-02-17 12:28:29'),
(295, 'I change the comp method to sort', 170, 3, '2009-02-17 14:07:36', '2009-02-17 14:07:36', 'Sequence.cc', 'text/x-c++src', 833, '2009-02-17 14:07:36'),
(296, 'ad -hoc', 171, 3, '2009-02-17 14:10:09', '2009-02-17 14:10:09', 'Word.cc', 'text/x-c++src', 1322, '2009-02-17 14:10:09'),
(297, 'Hice un mapa que me dice el score de cada palabra. Después sumo los puntajes.', 171, 22, '2009-02-17 14:11:15', '2009-02-17 14:11:15', 'mid.cc', 'text/plain', 1230, '2009-02-17 14:11:15'),
(298, 'I simulated the process until I find some repeated element. Note I don''t Know why this function is periodic ', 172, 3, '2009-02-17 16:09:58', '2009-02-17 16:09:58', 'element.cc', 'text/x-c++src', 1118, '2009-02-17 16:09:58'),
(299, 'Primero miro los casos básicos en los que falla y la respuestra trivial (el arreglo sólo tiene un número).\r\n\r\nDespués sumo de derecha a izquierda dependiendo del indice del digito en el vector.', 168, 22, '2009-02-17 17:30:21', '2009-02-17 17:40:19', 'intGen.cc', 'text/x-c++src', 1910, '2009-02-17 17:40:19'),
(300, 'There''s nothing fancy with this algorithm, but nevertheless it took me around an hour to devise it. <br />\r\n\r\nFirst try to solve this subproblem: Read the array arr. Create another array p, such that p[i] is the index of the next element in arr that is equal to arr[i] or n if this element does not exist. For example, if arr = [2, 3, 4, 4, 2, 1, 3, 1] then p = [4, 5, 3, n, 7, n, n].\r\n<br />\r\nCan you solve this subproblem fast enough? My solution is O(n log n) (Hint: Sorting with some extra information).\r\n<br />\r\nNow, let''s call an interval [i, p[i]) a box. If we have a box, we can select it as a valid solution as long as there doesn''t exist another box [j, p[j]) such that i < j && p[j] < p[i]. In that case, a valid solution would be the interval [i, p[j]). With a little thinking, you will notice that any valid solution is of the form [i, min{p[k]}) where i <= k < n. And this can be solved in O(n), so the total complexity is O(n log n).<br />\r\nVery nice problem!', 151, 1, '2009-02-17 17:54:58', '2009-02-17 17:59:05', 'snowflakes.cpp', 'text/plain', 1995, '2009-02-17 17:59:05'),
(301, 'Simple time', 173, 3, '2009-02-17 21:06:19', '2009-02-17 21:06:19', 'Time.cc', 'text/x-c++src', 618, '2009-02-17 21:06:19'),
(303, 'Ahh :( Tengo la misma solución que Andi. Pero como es el primer SRM que hago completo entonces lo voy a subir :-$', 169, 22, '2009-02-17 21:54:15', '2009-02-17 21:54:15', 'SRM_281_-_Div_2_-_Hard.cc', 'text/x-c++src', 403, '2009-02-17 21:54:15'),
(304, 'String ''decoding''', 174, 22, '2009-02-17 21:57:39', '2009-02-17 21:57:39', 'SRM_281_-_Div_2_-_Easy.cc', 'text/x-c++src', 1280, '2009-02-17 21:57:39'),
(305, 'SRM que hicimos en la U, Checho, Arcila y Yo...\r\n\r\nProb 1.', 175, 22, '2009-02-18 00:31:40', '2009-02-18 00:31:40', 'SRM_166_Div_2_-_Easy.cc', 'text/x-c++src', 1121, '2009-02-18 00:31:40'),
(306, 'Brute Force', 175, 3, '2009-02-18 00:31:53', '2009-02-18 00:31:53', 'Work.cc', 'text/x-c++src', 827, '2009-02-18 00:31:53'),
(307, 'Pop count and sort', 176, 3, '2009-02-18 00:33:53', '2009-02-18 00:33:53', 'Binary.cc', 'text/x-c++src', 819, '2009-02-18 00:33:53'),
(308, 'Cambiar la función sort del sort :-)', 176, 22, '2009-02-18 00:34:30', '2009-02-18 00:34:30', 'SRM_166_-_Div_2_-_Medium.cc', 'text/x-c++src', 1165, '2009-02-18 00:34:30'),
(309, 'Area of a simple polygon', 177, 3, '2009-02-18 00:34:45', '2009-02-18 00:34:45', 'Convex.cc', 'text/x-c++src', 812, '2009-02-18 00:34:45'),
(310, 'Simple area problem', 177, 22, '2009-02-18 00:36:03', '2009-02-18 00:36:03', 'SRM_166_-_Div_2_-_Hard.cc', 'text/x-c++src', 1136, '2009-02-18 00:36:03'),
(311, 'I barely liked this problem, it has too many corner cases. I wrote a recursive function that parses an expression and returns two things: a pretty parenthesization of the same expression and the main operator of the expression, or '' '' if that expression had no main operator (i.e. a single letter). With this information, you can choose what side to parenthesize (Honestly, I had like 3 failed submissions to the practice room because I had forgotten some corner cases).', 162, 1, '2009-02-18 02:28:32', '2009-02-18 02:28:32', 'ParenReduction.clean.cpp', 'text/x-c++src', 1966, '2009-02-18 02:28:32'),
(312, ':-)', 178, 22, '2009-02-18 04:54:15', '2009-02-18 04:54:15', 'SRM_168_-_Div_2_-_Easy.cc', 'text/plain', 343, '2009-02-18 04:54:15'),
(313, 'lo mismo.', 178, 5, '2009-02-18 06:13:21', '2009-02-18 06:13:21', 'hola.cc', 'application/octet-stream', 276, '2009-02-18 06:13:21'),
(315, ':-)', 181, 22, '2009-02-19 00:37:22', '2009-02-19 00:37:22', 'mid.cc', 'text/x-c++src', 1185, '2009-02-19 00:37:22'),
(316, 'Simple problem', 181, 3, '2009-02-19 00:38:25', '2009-02-19 00:38:25', 'Groce.cc', 'text/x-c++src', 898, '2009-02-19 00:38:25'),
(317, 'I just try all substring', 182, 3, '2009-02-19 00:40:00', '2009-02-19 00:40:00', 'Text.cc', 'text/x-c++src', 977, '2009-02-19 00:40:00'),
(318, 'Utilizo la criba y verifico si hay primos entre el rango a y b que sumen n con 3<=a,b<n/2.', 136, 6, '2009-02-19 05:31:06', '2009-02-19 05:31:06', 'gc.cpp', 'application/octet-stream', 689, '2009-02-19 05:31:06'),
(319, 'Ad Hock :-)', 183, 22, '2009-02-20 00:24:35', '2009-02-20 00:24:35', 'SpreadsheetColumn.cc', 'text/x-c++src', 1326, '2009-02-20 00:24:35'),
(320, 'I don''t know either why the function is periodic.', 172, 1, '2009-02-20 02:15:16', '2009-02-20 02:15:16', 'KthElement.cpp', 'text/x-c++src', 1009, '2009-02-20 02:15:16'),
(321, 'Bruteforce is my best friend!', 184, 1, '2009-02-20 15:33:29', '2009-02-20 15:33:29', 'send.cpp', 'text/plain', 7651, '2009-02-20 15:33:29'),
(322, 'And here''s the code I used to precompute the answers. It''s very slow, it took around 20 minutes to find all answers running in three different computers of the university at the same time.', 184, 1, '2009-02-20 15:35:19', '2009-02-20 15:35:19', 'Main.java', 'application/octet-stream', 1855, '2009-02-20 15:35:19'),
(323, 'The idea is the same as Daniel''s solution. Cormen''s book explains it all on page 601.', 46, 1, '2009-02-21 00:27:05', '2009-02-21 00:27:05', '515.cpp', 'text/x-c++src', 1840, '2009-02-21 00:27:05'),
(324, 'Hock también.', 160, 1, '2009-02-21 00:45:52', '2009-02-21 00:45:52', 'InsideOut.cpp', 'text/x-c++src', 836, '2009-02-21 00:45:52'),
(325, '(-:', 185, 22, '2009-02-21 03:06:33', '2009-02-21 03:06:33', 'TeamSplit.cc', 'text/x-c++src', 1270, '2009-02-21 03:06:33'),
(326, 'Simple simulation.', 185, 1, '2009-02-21 03:14:54', '2009-02-21 03:14:54', 'TeamSplit.cpp', 'text/x-c++src', 849, '2009-02-21 03:14:54'),
(327, 'The constraints are low enough to simulate the whole process.', 186, 1, '2009-02-21 03:31:07', '2009-02-21 03:31:07', 'GuessCard.clean.cpp', 'text/x-c++src', 1725, '2009-02-21 03:31:07'),
(328, 'Basically this solution is pure brute force, but using memoizaton to make it fast enough. Given a number x, try to split it in all possible ways (that''s what split returns in my code), and then recurse for each of the options. The recursive function looks like this:</br>\r\nf(x) = max(f(v) + 1) for every possible v that is a product of splits of x.', 187, 1, '2009-02-21 03:34:17', '2009-02-21 03:34:17', 'NumberSplit.clean.cpp', 'text/x-c++src', 1991, '2009-02-21 03:34:17'),
(329, 'Dynamic programming, with state:\r\n\r\ndp[i][j] = Probability of getting sum "j" after having thrown "i" dice.', 188, 1, '2009-02-21 04:23:38', '2009-02-21 04:23:38', 'DiceThrows.clean.cpp', 'text/x-c++src', 1708, '2009-02-21 04:23:38'),
(330, 'Ad Hock :-)', 189, 22, '2009-02-23 03:06:48', '2009-02-23 03:06:48', 'Binary.cc', 'text/plain', 2222, '2009-02-23 03:06:48'),
(331, 'Same thing', 173, 22, '2009-02-23 03:08:25', '2009-02-23 03:08:25', 'Time.cc', 'text/plain', 1102, '2009-02-23 03:08:25'),
(332, 'Sigo el algoritmo que dan en el problema.', 189, 20, '2009-02-23 05:02:37', '2009-02-23 05:02:37', 'SRM_-_BinaryCode.cpp', 'text/x-c++src', 1377, '2009-02-23 05:02:37'),
(333, 'Igual al <a href="http://comovamos.factorcomun.org/problems/177"> convex polygon </a>\r\n<br><br>\r\n:-)', 59, 22, '2009-02-23 19:04:29', '2009-02-23 19:04:29', '4187_-_Build_your_home.cc', 'text/plain', 1265, '2009-02-23 19:04:29'),
(334, 'Me senté con Checho a aprender DP y ese es el primero que hago :-)... Estudié primero una solución y después la implementé bottomUp. <br><br>\r\n\r\nHice un #define para imprimir una matriz pal que lo quiera :P\r\n<br><br>\r\nY ese juez del demonio me dijo que tenia un error de compilación pq tenia el using namespace std arriba de los includes y además estaba usando typedefs (que tampoco los acepto)... GAS', 190, 22, '2009-02-23 23:30:36', '2009-02-23 23:30:36', 'PascalHock.cpp', 'text/plain', 1675, '2009-02-23 23:30:36'),
(335, 'Simulation.', 140, 27, '2009-02-24 01:19:54', '2009-02-24 01:19:54', '10018.cpp', 'text/x-c++src', 928, '2009-02-24 01:19:54'),
(336, 'Ya que cualquier Ugly Number multiplicado por 2, 3 o 5 da como resultado otro ugly number, solo debemos tener un vector con los Ugly numbers que vallamos generando, y cada Ugly de ese vector multiplicarlo por 2, 3 y 5, despues de todos esos resultados debemos coger el menor que sea mayor que cualquiera del vector de Uglys. Para allar el i-esimo Ugly number, debemos repetir esto [i-1]veces.\r\nO(n^2).', 191, 27, '2009-02-24 01:42:41', '2009-02-24 01:43:49', '136.cpp', 'text/x-c++src', 750, '2009-02-24 01:43:49'),
(337, 'Despues de echar bastante lapiz, saque la ecuacion.', 156, 27, '2009-02-24 05:08:52', '2009-02-24 05:08:52', '913.cpp', 'text/x-c++src', 212, '2009-02-24 05:08:52'),
(338, 'Ya lo habia leido y el link de la primera solucion me recordo la formula.', 68, 27, '2009-02-24 16:13:58', '2009-02-24 16:13:58', '4215.cpp', 'text/x-c++src', 138, '2009-02-24 16:13:58'),
(339, 'Simple simulation', 192, 22, '2009-02-25 18:43:43', '2009-02-25 18:43:43', 'SRM_305_-_Div_2_-_Easy.cc', 'text/plain', 1181, '2009-02-25 18:43:43'),
(340, 'Dynamic programming, with state:\r\n\r\ndp[i][j] = Number of valid paths starting at (0, 0) and ending at (i, j).', 190, 1, '2009-02-26 00:45:52', '2009-02-26 00:45:52', 'pascal.cpp', 'text/x-c++src', 1486, '2009-02-26 00:45:52'),
(341, 'Use a priority queue to find the next smallest ugly number every time. Complexity is O(n log n).', 191, 1, '2009-02-26 00:51:42', '2009-02-26 00:51:42', 'ugly.cpp', 'text/x-c++src', 486, '2009-02-26 00:51:42'),
(342, 'A very important fact is that there are no repeated numbers. The smallest number that can be formed is 1 + 2 = 3. Hence, all prime numbers that must be formed are odd, and all odd numbers are the sum of an even number plus an odd number. Now, create a graph where each edge represents a valid (prime) sum of two numbers. This graph <strong>must</strong> be bipartite (Why?). The problem reduces to maximum bipartite matching, which I solved using Ford Fulkerson''s maximum flow algorithm.', 193, 1, '2009-02-26 01:02:08', '2009-02-26 01:02:08', 'PrimePairs.clean.cpp', 'text/x-c++src', 2775, '2009-02-26 01:02:08'),
(343, 'BFS', 194, 17, '2009-02-26 15:04:19', '2009-02-26 15:04:19', 'Dungeon_Master.cpp', 'application/octet-stream', 1760, '2009-02-26 15:04:19'),
(344, 'BFS', 195, 17, '2009-02-26 15:07:59', '2009-02-26 15:07:59', 'Bombs__NO_they_are_Mines_.cpp', 'application/octet-stream', 1362, '2009-02-26 15:07:59'),
(345, 'Ad-hoc', 183, 3, '2009-02-26 15:17:36', '2009-02-26 15:17:36', 'h.cc', 'text/x-c++src', 259, '2009-02-26 15:17:36'),
(346, 'GOTO', 189, 3, '2009-02-26 15:20:27', '2009-02-26 15:20:27', 'h.cc', 'text/x-c++src', 1744, '2009-02-26 15:20:27'),
(347, 'Take the positive angle respective to the +y-axis, and sum the angle%360', 196, 3, '2009-02-26 15:29:24', '2009-02-26 15:29:24', 'h.cc', 'text/x-c++src', 1177, '2009-02-26 15:29:24'),
(348, 'Greedy, I try to fix the number in the interval with to number one with zero fixed and other with nine fixed', 197, 3, '2009-02-26 15:34:21', '2009-02-26 15:34:21', 'h.cc', 'text/x-c++src', 959, '2009-02-26 15:34:21'),
(349, 'Ad-Hoc, just search around i-2 and i+2 for the possible validate ', 198, 3, '2009-02-26 15:38:52', '2009-02-26 15:38:52', 'h.cc', 'text/x-c++src', 1094, '2009-02-26 15:38:52'),
(350, 'Simulation. Note One trick is to only work witch positive numbers', 199, 3, '2009-02-26 15:48:23', '2009-02-26 15:48:23', 'h.cc', 'text/x-c++src', 999, '2009-02-26 15:48:23'),
(351, 'I think I complicated myself.', 161, 1, '2009-02-26 20:22:40', '2009-02-26 20:22:40', 'TwoTurtledoves.cpp', 'text/x-c++src', 962, '2009-02-26 20:22:40'),
(352, 'Override the comparison function.', 170, 1, '2009-02-26 20:46:41', '2009-02-26 20:46:41', 'SequenceOfNumbers.cpp', 'text/x-c++src', 903, '2009-02-26 20:46:41'),
(353, 'Simulación. Que trasnochada tan horrible hacer esto =S', 199, 22, '2009-02-26 21:58:23', '2009-02-26 21:58:23', 'Shuffling.cc', 'text/x-c++src', 1654, '2009-02-26 21:58:23'),
(354, 'Simulation', 201, 3, '2009-02-26 23:44:24', '2009-02-26 23:44:24', 'h.cc', 'text/x-c++src', 1079, '2009-02-26 23:44:24'),
(355, 'Sort with some relations', 202, 3, '2009-02-26 23:49:23', '2009-02-26 23:49:23', 'h.cc', 'text/x-c++src', 1327, '2009-02-26 23:49:23'),
(356, 'Just a time conversion and parsing string', 203, 3, '2009-02-26 23:52:09', '2009-02-26 23:53:06', 'h.cc', 'text/x-c++src', 1572, '2009-02-26 23:53:06'),
(357, 'Like insertion sort', 204, 3, '2009-02-26 23:55:06', '2009-02-26 23:55:06', 'h.cc', 'text/x-c++src', 1053, '2009-02-26 23:55:06'),
(358, 'I used to number, one with the tail and other with the head of the number, and somo ugly sprintf to edit the return value', 205, 3, '2009-02-26 23:57:09', '2009-02-26 23:58:00', 'h.cc', 'text/x-c++src', 1865, '2009-02-26 23:58:00'),
(359, 'My solution greedily selects the smallest unused position for each number.', 202, 1, '2009-02-27 00:00:08', '2009-02-27 00:00:08', 'SortingWithPermutation.clean.cpp', 'text/x-c++src', 1023, '2009-02-27 00:00:08'),
(360, 'Compare all pairs of words.', 171, 1, '2009-02-27 00:09:05', '2009-02-27 00:09:05', 'WordCompositionGame.cpp', 'text/x-c++src', 1187, '2009-02-27 00:09:05'),
(361, 'I use a struct to save the original pos.', 202, 6, '2009-02-27 03:47:08', '2009-02-27 03:47:08', 'sort.cpp', 'application/octet-stream', 658, '2009-02-27 03:47:08'),
(362, 'Same but with TopDown method', 190, 22, '2009-02-27 05:16:02', '2009-02-27 05:16:02', 'PascalHock.cpp', 'text/plain', 2107, '2009-02-27 05:16:02'),
(363, 'Just calculate the LCM of all the periodicities.\r\n\r\nBe careful with overflowing!\r\n\r\nThe gcf function applies the so called Euclid Algorithm which is easy to learn as a one line recursive function.', 206, 4, '2009-02-28 19:29:26', '2009-03-01 13:52:38', 'jackpot.cpp', 'text/x-cpp', 694, '2009-02-28 19:29:26'),
(364, 'Gas ese parser =S', 203, 22, '2009-03-02 03:41:50', '2009-03-02 03:41:50', 'YearProgressbar.cc', 'text/x-c++src', 2030, '2009-03-02 03:41:50'),
(365, 'Simple Simulation :-)', 204, 22, '2009-03-02 03:43:55', '2009-03-02 03:43:55', 'DeckRearranging.cc', 'text/x-c++src', 1309, '2009-03-02 03:43:55'),
(366, ':-)', 198, 22, '2009-03-02 03:46:52', '2009-03-02 03:46:52', 'MeasuringTemperature.cc', 'text/x-c++src', 1390, '2009-03-02 03:46:52'),
(367, 'Simulation :-)', 196, 22, '2009-03-02 03:50:47', '2009-03-02 03:50:47', 'AzimuthMonitoring.cc', 'text/x-c++src', 1425, '2009-03-02 03:50:47'),
(369, 'Just trying to make all string problems. <br><br> This one was not difficult :-)', 215, 22, '2009-03-02 04:26:39', '2009-03-02 04:26:39', 'TireRotation.clean.cc', 'text/x-c++src', 1271, '2009-03-02 04:26:39'),
(370, 'Siguen los strings problem', 221, 22, '2009-03-02 19:34:58', '2009-03-02 19:34:58', 'ImageDithering.cc', 'text/x-c++src', 1301, '2009-03-02 19:34:58'),
(371, 'Otro string :-)', 222, 22, '2009-03-02 19:38:55', '2009-03-02 19:38:55', 'ExerciseMachine.cc', 'text/x-c++src', 1244, '2009-03-02 19:38:55'),
(374, 'String manipulation. Ad-Hock :-)\r\n<br><br>\r\nSi se quiere un código un poquito más feo, se puede cambiar el for del mapa por: <br>\r\n<pre>for (char c =65;c-65 MENOR dic.sz;mapa[dic[c-65]=c++);</pre>', 225, 22, '2009-03-02 22:05:39', '2009-03-02 22:12:51', 'Huffman.clean.cc', 'text/x-c++src', 1276, '2009-03-02 22:05:39'),
(376, 'Ad-Hock :-)', 227, 22, '2009-03-02 23:40:13', '2009-03-02 23:40:58', 'FolderSize.clean.cc', 'text/x-c++src', 1414, '2009-03-02 23:40:58'),
(377, 'Dynamic programming, with state: dp[i][j] = Maximum score that player 1 can score if right know the cards that remain in the table are cards i through j, both inclusive.', 228, 1, '2009-03-03 02:16:22', '2009-03-03 02:16:22', '3379.cpp', 'text/x-c++src', 1339, '2009-03-03 02:16:22'),
(379, 'Les regalo el define del IndexOf', 230, 22, '2009-03-03 03:14:23', '2009-03-03 03:14:23', 'Substitute.clean.cc', 'text/x-c++src', 1505, '2009-03-03 03:14:23'),
(380, 'Strings. Similar al <a href="http://comovamos.factorcomun.org/problems/168"> IntegerGenerator </a>', 231, 22, '2009-03-03 03:38:01', '2009-03-03 03:38:17', 'BinaryIncrem.clean.cc', 'text/x-c++src', 1417, '2009-03-03 03:38:01'),
(381, 'Bubble Sort Algorithm, but counting numbers of swaps.', 5, 27, '2009-03-03 04:16:11', '2009-03-03 04:16:11', '299.cpp', 'text/x-c++src', 676, '2009-03-03 04:16:11'),
(382, '<p>Typical BFS but you have to be careful with what you information to store!</p>\r\n<br />\r\n<p>The screen moves but is cyclic in fact if each lane in the screen has length w it means that there are up most w different screens (without taking account of the frog) Given than w <= 50 and max jumps is <= 10^5 it means that is way to slow and pointless to not precalculate every possible screen!</p>\r\n<br />\r\n<p>Using this, every state is given as:</p>\r\n<br />\r\n<ol>\r\n<li>- (t % w) the screen after t seconds</li>\r\n<br />\r\n<li>- x the row of the frog</li>\r\n<br />\r\n<li>- y the column of the frog</li>\r\n<br />\r\n<br />\r\n<p>Thanks to Andres Mejia for some tips!</p>', 217, 4, '2009-03-03 04:25:59', '2009-03-03 04:30:58', 'frogger_acm.cpp', 'text/x-c++src', 6382, '2009-03-03 04:25:59'),
(384, 'Primero limpio el string (quito todas las repetidas consecutivas) (No se puede con unique() por que así quedan varias repetidas si hay 3 o más juntas). <br><br>\r\nDespués hago una especie de SET (con un mapita) y si la letra no había aparecido, la pongo y si ya apareció me salgo.', 90, 22, '2009-03-03 05:05:44', '2009-03-03 05:05:44', 'GroupedWordChe.clean.cc', 'text/x-c++src', 1595, '2009-03-03 05:05:44'),
(385, 'Simple encryption method', 232, 22, '2009-03-03 05:47:14', '2009-03-03 05:47:14', 'SuperR.clean.cc', 'text/x-c++src', 1363, '2009-03-03 05:47:14'),
(386, 'First tried Dijkstra but this gave me Time Limit Exceeded. Then I noticed BFS was good enough because edges had either weight 0 or weight 1.', 152, 1, '2009-03-03 21:51:53', '2009-03-03 21:51:53', '11573.cpp', 'text/x-c++src', 1894, '2009-03-03 21:51:53'),
(387, 'Busqueda en profundidad con poda. El ejercicio es con programacion dinamica aunque se logro optimizar el tiempo de ejecucion. Aceptado en pku con 1000 MS :)', 234, 12, '2009-03-03 23:37:21', '2009-03-03 23:37:21', 'spider_m.cpp', 'application/octet-stream', 1483, '2009-03-03 23:37:21'),
(389, 'Reverse iterator. Lo hice con Arcila...', 236, 22, '2009-03-04 13:48:37', '2009-03-04 13:49:10', 'TrueStatements.clean.cc', 'text/x-c++src', 439, '2009-03-04 13:49:10'),
(390, 'La técnica: Programación dinámica pura con recuperación de cualquier secuencia de pasos que haya llevado a la solución optima.\r\n\r\nLa idea es ir a través de las posibilidades, y ver que sucedería si subiera x unidades y bajara x unidades (si aplica) y en cada paso anotar todas las alturas a las que es posible llegar y como se llega a ellas de la forma optima. Al final se sabrá si hay solución solo si una de esas posibilidades es la altura 0.\r\nLuego con la ayuda en lo anotado en los pasos anteriores es posible recuperar la secuencia de pasos a la inversa.', 234, 16, '2009-03-04 19:56:44', '2009-03-04 19:56:44', 'Spiderman.java', 'text/x-java', 1756, '2009-03-04 19:56:44'),
(392, 'I know it is an easy problem, but I posted it because I came out with a different solution that the one that Arcila told me.\r\n\r\nFirst, I found the diagonal in which the given number is, and then found the numerator and denominator based in some ecuations.', 237, 27, '2009-03-05 00:29:21', '2009-03-05 04:09:01', '264.cpp', 'text/x-c++src', 642, '2009-03-05 04:09:01');
INSERT INTO `solutions` (`id`, `explanation`, `problem_id`, `user_id`, `created_at`, `updated_at`, `source_code_file_name`, `source_code_content_type`, `source_code_file_size`, `source_code_updated_at`) VALUES
(393, 'Creo un arreglo donde voy guerdando la mejor solución. dp[i][j] donde j = 0 (minimo), 1 (máximo), 2 (número mínimo de examenes para llegar al examen i).', 238, 6, '2009-03-05 01:15:08', '2009-03-05 01:16:50', 'ProblemsToSolve.cpp', 'application/octet-stream', 1755, '2009-03-05 01:16:50'),
(394, 'Still don''t know why you guys went for the logarithm''s way. ', 105, 27, '2009-03-06 01:58:27', '2009-03-06 01:58:27', '113.1.cpp', 'text/x-c++src', 317, '2009-03-06 01:58:27'),
(395, 'Ahi tienen pa que lo challengeen =/', 239, 22, '2009-03-06 02:11:14', '2009-03-06 02:11:14', 'RepaintT.cc', 'text/x-c++src', 1292, '2009-03-06 02:11:14'),
(396, 'Simulación de la cola con un vector.', 240, 6, '2009-03-06 03:03:12', '2009-03-06 03:03:12', 'BidirectionalQueue.cpp', 'application/octet-stream', 1628, '2009-03-06 03:03:12'),
(397, 'Fuerza bruta. Genero los tableros empezando con blanco y con negro y escojo el menor de todos.', 239, 6, '2009-03-06 03:23:10', '2009-03-06 03:23:10', 'RepaintTheChessboard.cpp', 'application/octet-stream', 1469, '2009-03-06 03:23:10'),
(398, '=S Perdí un challenge (challengié mal) y por no usar el 30% del código me sancionaron con el 20% =S Que mierda :S', 240, 22, '2009-03-06 04:59:51', '2009-03-06 04:59:51', 'BidirectionalQueue.cc', 'text/x-c++src', 740, '2009-03-06 04:59:51'),
(399, 'The problem can be stated as follows: Given some intervals, find the minimum number of numbers such that each interval contains at least one number. See the detailed explanation in the code.', 219, 1, '2009-03-06 19:26:07', '2009-03-06 19:26:07', '2655.2.cpp', 'text/x-c++src', 4096, '2009-03-06 19:26:07'),
(400, 'Brute force all possible boards starting on all possible positions.', 239, 1, '2009-03-06 19:29:20', '2009-03-06 19:29:20', 'RepaintTheChessboard.clean.cpp', 'text/x-c++src', 1547, '2009-03-06 19:29:20'),
(401, 'Simulate the queue. STL''s rotate function is particularly useful for this problem.', 240, 1, '2009-03-06 19:51:56', '2009-03-06 19:51:56', 'BidirectionalQueue.cpp', 'text/x-c++src', 1022, '2009-03-06 19:51:56'),
(402, 'This problem is absolutely contradictory with its title: not pretty at all. <br />\r\nInvent a way to find the numbers in the spiral and then rest is just uncomfortable string operations. <br />\r\nMy idea to find a number with coordinates [i, j] in the spiral is as follows:\r\nSeparate the spiral in rings, where ring 0 contains {1}, ring 1 contains {2, 3, 4, 5, 6, 7, 8, 9}, ring 2 contains {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25} and so on. Notice that the lowest-right corner of ring i is number (2i + 1)² with coordinates [i, i]. Furthermore, all numbers in ring i have a coordinate of the form [i, w], [-i, w], [w, i] or [w, -i], where w is any integer such that |w| <= |i|. So, the number at position [i, j] will belong to ring max(|i|, |j|). Because the number of numbers on each ring is small (around 40.000 numbers on ring 5000), we can step on the lowest-right corner and start walking through the ring until we find the looked number.', 241, 1, '2009-03-06 21:02:14', '2009-03-06 21:04:43', 'PrettyPrintASpiral.clean.cpp', 'text/x-c++src', 2151, '2009-03-06 21:02:14'),
(403, 'Very nice dynamic programming problem! <br />\r\nLet''s begin with the easy part: If N is odd, then there can''t be any well-parenthesized ("valid") string. That means that every string is mismatched ("invalid"), so we simply convert K to its binary representation, changing 0''s for (''s and 1''s for )''s, and this will give us the Kth (0-based) string (the answer we are looking for).<br />\r\nNow for the real problem, when N is even. The first part is telling whether a solution exists. To do this, we must count the number of invalid strings of length N. If this number is less or equal to K then there''s no solution. And this number can be found using dynamic programming, with the following state: dp[i][j] = Number of strings of length i that have j "unclosed" (''s. \r\n<br />\r\nHaving computed these values, we need a way to construct the answer in the case that a solution exists. The number of invalid strings of length N must be greater than K. Clearly, some of these strings start with ( and some with ). It''s better to try to use ( first because it is smaller lexicographically, but if the number of invalid strings of length N that start with ( is less or equal to K, it means that there''s no possible solution that starts with (! In that case, we must necessarily start with ), and furthermore, we can discard all strings that started with ( from K. This idea is similar to <a href="http://www.topcoder.com/stat?c=problem_solution&rm=299557&rd=13519&pm=10183&cr=22713031">a problem from the past: SRM 428 Div 2 Hard.</a> I recommend solving that problem before trying this one.', 242, 1, '2009-03-07 03:17:51', '2009-03-07 03:22:25', 'MismatchedStrings.clean.cpp', 'text/x-c++src', 2013, '2009-03-07 03:18:23'),
(404, 'Dynamic programming with state:\r\n\r\ndp[i][j] = True if I can reach a height of j after having used all numbers in range [0..i).', 234, 1, '2009-03-07 03:31:44', '2009-03-07 03:31:44', 'f.cpp', 'text/x-c++src', 2414, '2009-03-07 03:31:44'),
(405, 'The title of this problem is very realistic: <br />\r\n\r\n<strong>KTH: Probable element. </strong>\r\n<br />\r\nIndeed, Kungliga Tekniska högskolan it''s a very probable element for us, it only depends on the swedish embassy.<br />\r\n\r\nNow, the problem can be solved using dynamic programming with the following state:\r\n<br />\r\ndp[m][i][j] = Probability of picking m numbers, such that exactly i of those are strictly less than N and exactly j of those are equal to N (Obviously, m - i - j must be strictly greater than N).<br />\r\nIt can be stated as a recurrent relation as follows: <br />\r\ndp[m][i][j] = dp[m-1][i][j] * P(>) + dp[m-1][i-1][j] * P(<) + dp[m-1][i][j-1] * P(==), where P("operator") is the probability of picking a number in the interval that is "operator" N.\r\n\r\n<br /><br />The complexity is O(m³), but I have the feeling that it can be reduced to O(m²).', 243, 1, '2009-03-07 21:18:12', '2009-03-07 21:19:34', 'KthProbableElement.clean.cpp', 'text/x-c++src', 1291, '2009-03-07 21:18:12'),
(406, 'Here''s Factor Común''s solution from the day of the competition.  We implemented a BFS. <br />\r\nPLEASE NOTE: The frog may stand still on every turn. \r\n\r\n<a href="http://www.freefrogger.org/">DO NOT CLICK HERE. Go solve another problem instead.</a>', 217, 1, '2009-03-08 04:50:02', '2009-03-08 04:50:02', 'c.cpp', 'text/x-c++src', 3412, '2009-03-08 04:50:02'),
(407, 'Fuerza bruta. Se trata de empezar la secuecia lo más cercano posible a su solución para no tener un TLE.', 244, 6, '2009-03-08 06:35:25', '2009-03-08 06:35:25', 'SequenceSums.cpp', 'application/octet-stream', 1111, '2009-03-08 06:35:25'),
(408, 'Misma idea que Andrés.', 234, 6, '2009-03-08 06:40:50', '2009-03-08 06:40:50', 'spiderman.cpp', 'application/octet-stream', 1824, '2009-03-08 06:40:50'),
(409, 'My solution is the one that appears in the editorial:\r\nThe approach is binary search. We brute-force increasing values of L and return the first solution found. The important point is to note that if we have a sum of L consecutive integers starting at some arbitrary integer a, then this sum will always be smaller than the sum of L consecutive integers starting in any integer greater than a. In other words, the sequence of sums is monotonically increasing, and hence we can do a binary search on it.', 244, 1, '2009-03-08 06:43:48', '2009-03-08 06:43:48', 'SequenceSums.clean.cpp', 'text/x-c++src', 1387, '2009-03-08 06:43:48'),
(410, 'Very easy problem, I had an stupid error on the TCO.\r\nThe equation for the sum of L consecutive integers is N = L*(a0 + an)/2, a0 is the first element, an is the last, we can write everything in terms of a0, so an = a0+L-1.<br/>\r\nThe equation will then become N = L*(2*a0 + L - 1).<br/>\r\nSolve for a0 will be a0 = (2*N - L*L + L)/(2*L).<br/>\r\nThis will be the first element in the sum, as long as it is a positive integer, so we check if it is an integer with the modulus to see if 2*L is a divisor of (2*N - L*L + L), and then we check if is greater or equal than 0.<br/>\r\nOne more thing the problem says that the length will be greater or equal than L, and a maximum of 100, so we loop for the values from L to 100 and break when we find our first answer(the shortest one).', 244, 20, '2009-03-08 16:59:15', '2009-03-08 16:59:15', 'TCO09_Round_1_-_Div_1_Easy_-_SequenceSums.cpp', 'text/plain', 785, '2009-03-08 16:59:15'),
(411, 'This problem is just the classic dynamic programming problem of counting the number of different paths that start somewhere and end somewhere (Very similar to Pascal Travels). But as the board may be so huge, some smart observations need to be done to calculate the answer fast enough. I have added a graphical explanation to the <a href="http://www.topcoder.com/wiki/display/tc/TCO%2709+Elimination+Round+1">editorial</a>.', 245, 1, '2009-03-08 20:38:59', '2009-03-08 20:42:06', 'Unicorn.clean.cpp', 'text/x-c++src', 2875, '2009-03-08 20:42:06'),
(412, 'I loop trough every possible pair of problems, and if they form a possible "ending" pair (one whose difference is >= variety) then I find the cheapest way of solving those 2 problems and try to minimize the best seen answer.', 238, 1, '2009-03-08 22:47:01', '2009-03-08 22:47:01', 'ProblemsToSolve.clean.cpp', 'text/x-c++src', 1196, '2009-03-08 22:47:01'),
(413, 'Sympathetic problem. Assume that exactly a statements are true. Then every statements that says that exactly b statements are true is false (a != b). Hence, statement a can be true if there are exactly a statements that read "exactly a statements are true".', 236, 1, '2009-03-08 23:07:52', '2009-03-08 23:13:00', 'TrueStatements.clean.cpp', 'text/x-c++src', 849, '2009-03-08 23:13:00'),
(414, 'Autoexplanatory.', 232, 1, '2009-03-08 23:20:09', '2009-03-08 23:20:59', 'SuperRot.clean.cpp', 'text/x-c++src', 934, '2009-03-08 23:20:59'),
(415, 'Use integer division to find out the wasted space per file.', 227, 1, '2009-03-08 23:37:28', '2009-03-08 23:38:21', 'FolderSize.clean.cpp', 'text/x-c++src', 1061, '2009-03-08 23:38:21'),
(416, '@Hock: <br />\r\nWhy did you write\r\n<pre>\r\nif((mapa[temp]-48)==-48)\r\n</pre>\r\n<br/>?<br/>\r\n\r\nDon''t you think\r\n<pre>\r\n if( !!!((mapa[temp]) & ~((1 << 1 ^ (true or false) + -1 >> 3) & ~0xFFFFFFFF && (archive.c_str()))))\r\n</pre>\r\nis a little clearer?', 225, 1, '2009-03-08 23:59:14', '2009-03-08 23:59:38', 'HuffmanDecoding.clean.cpp', 'text/x-c++src', 998, '2009-03-08 23:59:14'),
(417, 'Brute force each second (there are at most 86460 seconds).', 222, 1, '2009-03-09 00:11:54', '2009-03-09 00:11:54', 'ExerciseMachine.cpp', 'text/x-c++src', 868, '2009-03-09 00:11:54'),
(418, 'A nice problem, I used a criba to precomputed the prime numbers, and a some nice observations, the one of the observation is the A : (P2-P1)/(P1-1) y B : P1 + A, and the othe is that for some x that is exploding, you have the next congruents<pre>\r\n(X/p1 = B^n) mod (x/pn)</pre> where n is the same of the stament.', 220, 3, '2009-03-09 03:26:46', '2009-03-09 03:26:46', 'cpu.cc', 'text/x-c++src', 1813, '2009-03-09 03:26:46'),
(419, 'I simulated the process, and I''m so grateful with the STL''s rotate algorithm ', 240, 3, '2009-03-09 03:37:58', '2009-03-09 03:37:58', 'h.cc', 'text/x-c++src', 1072, '2009-03-09 03:37:58'),
(420, 'A beauty problem, you easily can say that \r\nN = L(n+(n-L+1))/2, or could probe by induction, where n is the higher element of the sequence, with some algebra you have that n = (2s+l²-l)/2l, and then the only thing that you need is to brute force the first l that satisfied the divisibility of the ecuation. <br/>\r\nAnd one more thing take care with the sequence that contain negatives numbers  ', 244, 3, '2009-03-09 04:43:43', '2009-03-09 04:43:43', 'hh.cc', 'text/x-c++src', 393, '2009-03-09 04:43:43'),
(421, 'Simular simular simular.', 240, 5, '2009-03-09 04:53:41', '2009-03-09 04:53:41', 'BidirectionalQueue_copy.cpp', 'text/plain', 1054, '2009-03-09 04:53:41'),
(422, 'One of the first problems that I made, I just find the first element of the diagonal of cantor and then complete the rest of the element to fill the term', 237, 3, '2009-03-09 05:24:36', '2009-03-09 05:24:36', 'cantor.c', 'text/x-csrc', 519, '2009-03-09 05:24:36'),
(423, '<p>Longest Increasing Sequence</p>\r\n\r\n<p>It also has an annoying I/0:<br>\r\nIf you need to distinguish blank lines in the input, in C++ you need to use getline() but you can''t mix this and the extraction operator >>! So your best shot is to always use getline() and use atoi().\r\n</p>\r\n\r\n', 246, 4, '2009-03-10 16:17:58', '2009-03-10 16:17:58', '497.cpp', 'text/x-c++src', 1564, '2009-03-10 16:17:58'),
(424, 'O(n^2) algorithm for finding the longest increasing subsequence. ', 246, 1, '2009-03-10 22:16:55', '2009-03-10 22:16:55', '497.cpp', 'text/x-c++src', 1414, '2009-03-10 22:16:55'),
(425, 'This is a textual implementation of the solution explained <a href="http://forums.topcoder.com/?module=Thread&threadID=634962&mc=12&view=threaded#1072478">here</a>.', 247, 1, '2009-03-10 23:09:13', '2009-03-10 23:09:42', 'PageNumbers.clean.cpp', 'text/x-c++src', 1521, '2009-03-10 23:09:13'),
(426, 'Uso un struct para representar los equipos. Utilizo un mapa (es un set pero yo no sé usar eso) que me dice si el equipo ya había aparecido o no. Despues guardo los equipos en un arreglo de equipos y al final lo paso todo a strings...\r\n\r\n:-)', 248, 22, '2009-03-11 04:06:38', '2009-03-11 04:06:38', 'MedalT.clean.cc', 'text/x-c++src', 2374, '2009-03-11 04:06:38'),
(427, 'El problema es de Sort y un poco de manejo de string.\r\nes importante escribir las funciones de comparación fuera de la clase, sino puede ser mucho tiempo perdido en un error de compilación, gracias Hock.', 248, 5, '2009-03-11 05:31:18', '2009-03-11 05:31:18', 'medal.cc', 'application/octet-stream', 1623, '2009-03-11 05:31:18'),
(428, ' Una entrada horrible. String parsing. La simulación es fácil. Lo más maluco es la entrada... :-) ', 249, 22, '2009-03-11 16:38:30', '2009-03-11 16:39:00', 'TallP.clean.cc', 'text/x-c++src', 1850, '2009-03-11 16:39:00'),
(429, 'Bueno, con stringstream todo es más fácil =S...<br>\r\nConvierto el vector de strings a un vector de vectores de enteros (vector<vector<int> >) que utilizo como matriz. Desde ahi el problema es fácil...', 249, 22, '2009-03-11 17:14:12', '2009-03-11 17:14:12', 'TallSS.clean.cc', 'text/x-c++src', 1664, '2009-03-11 17:14:12'),
(430, 'El error que tenía era que si dos amigos mios tenían un amigo en comun (que no era amigo mio) lo contaba dos veces y no una vez =S <br><br>\r\nCaso de prueba: <br><br>\r\n<pre>"NYNY","YNYN","NYNY","YNYN"</pre>\r\n<br><br>\r\nPara evitar esto, miro todos los amigos de mis amigos y los marco como amigos mios (si no soy yo). Al final solo retorno el que más amigos tenga.', 250, 22, '2009-03-11 17:49:18', '2009-03-11 17:50:17', 'FriendS.clean.cc', 'text/x-c++src', 997, '2009-03-11 17:49:18'),
(431, 'The solution its based on andres mejia  and gaijinco solutions, thanks! the idea its the same. :D. (finally i learn this bfs and much more of c++)', 217, 13, '2009-03-15 06:45:43', '2009-03-15 06:45:43', 'frogger.cpp', 'application/octet-stream', 2080, '2009-03-15 06:45:43'),
(432, 'Simple search over the soup, just be carefull about to choose the row, or column that is nearest to the upper-left corner.', 251, 13, '2009-03-15 21:09:48', '2009-03-15 21:09:48', 'whereiswaldorf.cpp', 'application/octet-stream', 3058, '2009-03-15 21:09:48'),
(433, 'I''ve explained my solution in <a href="http://forums.topcoder.com/?module=Thread&threadID=636296&start=0">this TopCoder thread.</a>', 253, 1, '2009-03-18 03:06:03', '2009-03-18 03:06:03', '563.cpp', 'text/x-c++src', 4822, '2009-03-18 03:06:03'),
(434, 'DFS. Cuidado si el grafo no es conexo', 254, 22, '2009-03-18 03:15:26', '2009-03-18 18:40:07', '2492.3.cc', 'text/x-c++src', 1150, '2009-03-18 18:40:07'),
(435, 'You can only make a Palindrome if (and only if) no more than one letter appears an odd number of times...', 255, 22, '2009-03-18 04:58:39', '2009-03-18 04:58:39', 'PalindromeM.clean.cc', 'text/x-c++src', 837, '2009-03-18 04:58:39'),
(436, 'We need logarithmic time exponentiation of matrices. It''s actually very similar to the "BigMod" algorithm.', 257, 1, '2009-03-20 01:37:35', '2009-03-20 01:37:35', '10229.cpp', 'text/x-c++src', 1571, '2009-03-20 01:37:35'),
(437, 'Gracias al genio que descubrió como calcular Fib(N) en O(log n). Link <a href="http://www.ics.uci.edu/~dan/class/161/notes/7/Fib.html" target="_blank">aquí</a>. <br><br>Con ese Fib(n) el problema es muy fácil.', 257, 22, '2009-03-20 01:58:53', '2009-03-20 01:58:53', '10229.cc', 'text/x-c++src', 921, '2009-03-20 01:58:53'),
(438, 'Determine if a directed graph has at least one cycle, which can be made with a beautiful application of DFS.', 258, 1, '2009-03-22 03:11:49', '2009-03-22 03:11:49', '2892.cpp', 'text/x-c++src', 1192, '2009-03-22 03:11:49'),
(439, 'the algorithm i use was KMP based on some insights from Topcoder forums  by "DaViDeX". <br />\r\n"For each testcase:<br />\r\n1) compute the prefix function p[k] of given word<br />\r\n2) for each i: i>1 and p[i]>0 check, if i is divisible by i-p[i]. if so... you''ve just found a period of one prefix:)"<br/>\r\nnow some more details: <br />\r\nprefix function can be found in Introduction to Algorithms MIT chapter 32 KMP algorithm, this problem use that function not the kmpsearchFuntion just the preprocess for the search and considering that we will calculate prefix function over very string that is in input, to understand that function its necesary to read a little about the KMP automata, well the function just "encapsulates knowledge about how the pattern matches against shifts of itself" <br />\r\nthis is to take note in a vector: <br /> \r\n-for every prefix on the pattern during the shifts of itself there is going to appear suffixes of this ones that match  with the current prefix, so in the i-th position of the vector its the the position of the match, this information makes us note that for every place where the position of the pattern match with some suffix, we have to check if the (current postion of the prefix-the match position) is  a multiple of the i-th possition of the prefix of the pattern then there is one prefix with a period. that is because with this we note the shifts are of the same length. hope its clear i did my best :D. <br />\r\nnice animations for KMP is in here : <br />\r\n* \r\n<A href="http://www.enseignement.polytechnique.fr/profs/informatique/Jean-Jacques.Levy/00/pc4/strmatch/e.html">KMP ANIMATION 1</A>\r\n  <br />\r\n<A href="http://www.ics.uci.edu/~goodrich/dsa/11strings/demos/pattern/">KMP ANIMATION 2</A>', 268, 13, '2009-03-23 05:41:44', '2009-03-25 04:15:37', 'period.cpp', 'application/octet-stream', 935, '2009-03-23 05:41:44'),
(440, 'basic combinatorics problem, the answer its n!/n1!n2!...nk!, that is easy to see\r\nnoticing that for each case you got \r\n(x1, x2, x3, x4....xk) n times so you just have to count permutations with partitions of elements. \r\n\r\n\r\n', 269, 13, '2009-03-24 01:39:27', '2009-03-24 01:39:27', 'polinomyals.cpp', 'application/octet-stream', 384, '2009-03-24 01:39:27'),
(441, 'Just to note that the key of the compare function is the division between weight and time.\r\n<br>\r\nAnd to accumulate the time for each problem. ', 270, 27, '2009-03-24 06:07:12', '2009-03-24 19:30:32', '2780.cpp', 'text/x-c++src', 1014, '2009-03-24 19:30:32'),
(442, 'Casi que no =S...', 270, 22, '2009-03-24 23:52:46', '2009-03-24 23:52:46', 'k.cc', 'text/x-c++src', 1451, '2009-03-24 23:52:46'),
(443, 'Notice you''ll only have to shuffle n-1 times (where n is the size of the input array).', 186, 22, '2009-03-25 03:25:40', '2009-03-25 03:25:40', 'Guess.clean.cc', 'text/x-c++src', 1353, '2009-03-25 03:25:40'),
(444, 'It can be solved with backtracking. Prune already visited states to make it fast enough.', 271, 1, '2009-03-25 03:41:25', '2009-03-25 03:41:25', 'TheSwap.cpp', 'text/x-c++src', 1493, '2009-03-25 03:41:25'),
(445, 'Suppose we solve problem i before problem j. Then it must be true that:\r\n<pre>\r\n(A + t[i]) * w[i] + (A + t[i] + t[j]) * w[j]  < (A + t[j]) * w[j] + (A + t[j] +  t[i]) * w[i]\r\n</pre>\r\nwhere A is the time spent solving problems before problem i (not including i).\r\n\r\nThis is true if and only if \r\n<pre>\r\nw[j] * t[i] < w[i] * t[j]\r\n</pre>\r\n\r\nHence we have a criterion to decide if homework i must be placed before homework j, so we sort the homeworks according to this criterion.', 270, 1, '2009-03-25 04:07:48', '2009-03-25 04:07:48', '2780.cpp', 'text/x-c++src', 1244, '2009-03-25 04:07:48'),
(446, 'This is not the solution we wrote during the competition at Universidad del Bosque. That one times out on the Online Judge, so I guess the judges were very generous with the time-limit that day.<br />\r\nThis solution uses "union-find" algorithm. Each node has 2 pieces of infomation:<br />\r\n<ul>\r\n<li>\r\np[x] = Communication center that node x is connected to <br />\r\n</li>\r\n<li>\r\nf[x] = Distance from node x to p[x] <br />\r\n</li>\r\n</ul>\r\n\r\n<a href="http://research.cs.vt.edu/algoviz/UF/">Check this out</a> for a nice visual explanation of the algorithm.', 260, 1, '2009-03-25 18:20:14', '2009-03-25 18:28:34', 'b.cpp', 'text/plain', 907, '2009-03-25 18:20:14'),
(447, 'Con set_intersection ...', 186, 22, '2009-03-25 18:31:08', '2009-03-25 18:31:08', 'GuessVI.cc', 'text/x-c++src', 1394, '2009-03-25 18:31:08'),
(448, '<p>Ad hoc.</p>\r\n\r\n<p>You may write the serie as:</p>\r\n\r\n<pre>1/1\r\n1/2 2/1\r\n3/1 2/2 1/3\r\n1/4 2/3 3/2 4/1\r\n5/1 4/2 3/3 2/4 1/5\r\n...</pre>\r\n\r\n<p>The key points to notice are:</p>\r\n\r\n<p>Each row has one more element than the last one and the first has one element.</p>\r\n\r\n<p>Define s(f) as the sum of the numerator and denominator. As you can see, the first row has every term with s(f) = 2, the second one with s(f) = 3, and so on until i in the i-th row.</p>\r\n\r\n<p>The odd rows start with numerator 1 and grows by 1 with each term. The even rows finish with numerator 1 and decreases by 1 beginning with i in the i-th row.</p>\r\n\r\n<p>Now if you want to know which is the n-th term then you need to know 2 things: in which row it is and which term it is on that row.</p>\r\n\r\n<p>Because we are creating a "triangle" the number of terms up to the n-th row is the sum of the first n integer. Which is a nice formula:</p>\r\n\r\n<pre>s(n) = n(n+1)/2</pre>\r\n\r\n<p>From that formula you can express n in term of s(n) (you have to solve a quadratic equation)</p>\r\n\r\n<p>Once you know that the term is in the n-th row you can calculate the total of terms up to the (n - 1)-th row an so calculate the position in the n-th row.</p>\r\n\r\n<p>If the row is odd then you know the numerator is the distance. And you can calculate the denominator - remember s(f) - If its even then you switch numerator and denominator.</p>', 267, 4, '2009-03-26 00:42:44', '2009-03-26 00:44:37', 'cantor.cpp', 'text/x-c++src', 709, '2009-03-26 00:42:44'),
(449, 'Just simulate the process. Be carefull with extra data and when they have to play extra games (or balls -> deuce).\r\n\r\n<br><br>Quité un poquito de cosas que sobraban para que Andi no me regañara :''(', 272, 22, '2009-03-26 03:02:44', '2009-03-26 03:05:50', 'Tennis.clean.cc', 'text/x-c++src', 1615, '2009-03-26 03:05:50'),
(450, 'Simple Simulation.', 272, 20, '2009-03-26 03:14:09', '2009-03-26 03:14:09', 'tennis.cpp', 'text/plain', 1116, '2009-03-26 03:14:09'),
(451, 'Ad hoc.\r\n\r\nClunky I/0', 216, 4, '2009-03-26 14:48:01', '2009-03-26 14:48:01', 'hardware.cpp', 'text/x-c++src', 3576, '2009-03-26 14:48:01'),
(452, 'Para la solución se tuvo en cuenta la suma del numerador y el denominador  daba un número especifico de la diagonal,\r\nsi era par el denominador va aumentando en uno y el numerador disminuyendo en uno mientras  fuera  diferente de 1 y si\r\nera impar el numerador aumenta y el denominador disminuye. En el enunciado dice "numbers in the range from 1 to 10^7"\r\nlo cual puse una condición, cuando fuera igual a 10^7 entonces cambia y el denominador aumenta.\r\n\r\n\r\nPs: probado en http://acm.pku.edu.cn/JudgeOnline/problem?id=1969', 267, 26, '2009-03-26 17:01:53', '2009-03-26 17:01:53', 'CountOnCantor.cpp', 'text/x-c++src', 4822, '2009-03-26 17:01:53'),
(453, 'I implemented the greedy approach explained in <a href="http://www.topcoder.com/wiki/display/tc/SRM+437">the editorial</a>. Another nice trick for our repertoire!', 273, 1, '2009-03-27 01:01:24', '2009-03-27 01:01:24', 'TheInteger.clean.cpp', 'text/x-c++src', 2228, '2009-03-27 01:01:24'),
(454, 'This problem has a chessboard of at most 300 which makes you think twice about using BFS but it runs just in time.\r\n\r\nHowever you can use a closed formula which is not difficult to find if you think it for a while.\r\n\r\nIn a contest time is really important so your first option should be always be brute-force (because its easy to write!)\r\n\r\nYou need to consider other options only if the constrains are tight.', 274, 4, '2009-03-27 17:33:53', '2009-03-27 17:33:53', 'bfs.cpp', 'text/x-c++src', 1435, '2009-03-27 17:33:53'),
(455, 'Se evalua toda la expresión desde 1 hasta el grado del exponente mas alto. Si al evaluar la expresión en estos casos las soluciones dan números enteros, es porque la expresión evaluada en cualquier n entero también dará un número entero.', 109, 32, '2009-03-28 17:55:13', '2009-03-28 17:55:13', 'alawaysAnInteger.cpp', 'application/octet-stream', 6899, '2009-03-28 17:55:13'),
(456, 'Son dos sumatorias, una que va desde i=1 hasta N y la otra que va desde j=i+1 hasta N. Voy hallando el GCD de i y j con cada i y j nuevo y los voy sumando.', 275, 32, '2009-03-28 18:19:12', '2009-03-28 18:20:03', 'GCDPublic.cpp', 'application/octet-stream', 1029, '2009-03-28 18:19:12'),
(457, 'Easiest Simulation ever, they even provide you pseudo-code.', 275, 27, '2009-03-28 20:08:01', '2009-03-28 20:08:01', '11417.cpp', 'text/x-c++src', 360, '2009-03-28 20:08:01'),
(458, 'gcd(a,b) * lmc(a,b) = a*b; as the problem says: A formula from Sixth Grade. ', 94, 27, '2009-03-28 21:10:47', '2009-03-28 21:10:47', '4232.cpp', 'text/x-c++src', 374, '2009-03-28 21:10:47'),
(459, 'Just follow the instructions carefully.', 266, 4, '2009-03-29 02:03:39', '2009-03-29 02:03:39', 'booklets.cpp', 'text/x-c++src', 3229, '2009-03-29 02:03:39'),
(460, 'Neh! Usar el __gcd era trampa! xD', 275, 22, '2009-03-29 06:21:37', '2009-03-29 06:22:07', '11417.cpp', 'text/x-c++src', 495, '2009-03-29 06:22:07'),
(461, 'Simple simulation, the only thing to know is that the cards are stored from n to 1; I mean if n is 5, the deck goes like this: 5 4 3 2 1.', 284, 27, '2009-03-30 02:32:49', '2009-03-30 02:32:49', '2636.cpp', 'text/x-c++src', 862, '2009-03-30 02:32:49'),
(462, 'BFS', 274, 12, '2009-03-30 21:53:47', '2009-03-30 21:53:47', 'knights.cpp', 'application/octet-stream', 1290, '2009-03-30 21:53:47'),
(463, 'BFS. the idea is the same as the solutions submitted', 217, 12, '2009-03-30 22:02:51', '2009-03-30 22:02:51', 'frogger.cpp', 'application/octet-stream', 2391, '2009-03-30 22:02:51'),
(464, 'Fib[n]-1 y fib[n+1]-1', 35, 32, '2009-03-31 05:17:53', '2009-03-31 05:17:53', 'Bee.cpp', 'application/octet-stream', 568, '2009-03-31 05:17:53'),
(465, 'As they show in the first case, "pi" in the taxicab geometry would be 2, so is the same as finding the area in euclidian geometry. \r\n\r\nRadius Euclidian geometry = pi*r^2.\r\nRadius Taxicab geometry = 2*r^2.', 285, 32, '2009-03-31 05:30:21', '2009-03-31 05:30:21', 'HERMAN.cpp', 'application/octet-stream', 418, '2009-03-31 05:30:21'),
(466, 'Recursion function that the first time receives the coordinates x and y where the man is, then it call itself with new coordinates where the points are ''.''. Until every point has been set (when a point has been already set, it has X).', 286, 32, '2009-03-31 05:38:45', '2009-03-31 05:39:49', 'Red_and_Black.cpp', 'application/octet-stream', 1434, '2009-03-31 05:38:45'),
(467, 'They give you everything, it is a normal carring sum :p. I had some problems reading the input and getting the AC(Timie limit Exceed)I was using vector but I had to change defining the size of the arrays ([100]). With vector I was getting TLE.', 287, 32, '2009-03-31 05:59:58', '2009-03-31 06:01:40', '01000001.cpp', 'application/octet-stream', 5739, '2009-03-31 05:59:58'),
(468, 'A matrix cover stopping in the possition equal to '' *'' then the eight contiguous positions are checked and if none is equal to ''*'' then it is counted as a star.', 289, 32, '2009-03-31 06:16:18', '2009-03-31 06:16:18', 'Counting_stars.cpp', 'application/octet-stream', 1722, '2009-03-31 06:16:18'),
(469, 'Be carefull with the leading zeroes.<br>\r\n--> 0000 0000000000 returns 0<br>\r\n--> 0000 0000000001 returns 1<br>\r\n<br><br>\r\nExcept from that output thing (which is just go through the string) the problem is straight forward.', 287, 22, '2009-03-31 16:59:21', '2009-03-31 17:00:57', '2149.cpp', 'text/x-c++src', 1087, '2009-03-31 16:59:21'),
(470, 'Y si lo queremos generalizar a todas las bases menores o iguales a 10? <br>\r\nSi la base es 10, basta con hacer res=sum(a,b) sino ponemos res=sum(a,b,BASE).', 287, 22, '2009-03-31 17:22:41', '2009-03-31 17:22:41', 'AllBases.cpp', 'text/x-c++src', 1160, '2009-03-31 17:22:41'),
(471, 'For each number of sequence I count if it is a prime or not, doing this until nth prime and then show the last number in the sequence.\r\n', 290, 32, '2009-03-31 20:16:53', '2009-03-31 20:17:44', 'Dirichlet_s_Theorem_on_Arithmetic_Progressions.cpp', 'application/octet-stream', 988, '2009-03-31 20:17:44'),
(472, 'Utilice el algoritmo de Ford-Fulkerson''s.', 86, 6, '2009-03-31 22:06:56', '2009-03-31 22:06:56', 'flow.cpp', 'application/octet-stream', 2181, '2009-03-31 22:06:56'),
(473, 'Simulación.', 287, 6, '2009-04-01 04:02:12', '2009-04-01 04:02:12', 'sum.cpp', 'text/x-c++src', 1375, '2009-04-01 04:02:12'),
(474, 'Backtracking.', 286, 6, '2009-04-01 17:02:46', '2009-04-01 17:02:46', 'red.cpp', 'application/octet-stream', 1089, '2009-04-01 17:02:46'),
(475, 'Fuerza Bruta. Se verifica que cada posible estrella no tenga adyacentes para no convertirse en UFO ;).', 289, 6, '2009-04-01 18:26:35', '2009-04-01 18:26:35', 'star.cpp', 'application/octet-stream', 1068, '2009-04-01 18:26:35'),
(476, 'Brute Force.\r\n\r\nWe search the sky for every possible star (a char ''*'') and we calculate the size of the object using flood-fill while erasing it from the sky.\r\n\r\nIf the size of the object is exactly 1 then we add it to the total.\r\n\r\nIt''s fast because we remove ''*'' that we are sure are not stars.', 289, 4, '2009-04-01 19:56:32', '2009-04-01 19:56:32', 'stars.cpp', 'text/x-c++src', 1310, '2009-04-01 19:56:32'),
(477, 'Explicación en el código', 285, 22, '2009-04-01 22:37:56', '2009-04-01 22:42:57', '2945.cpp', 'text/x-c++src', 554, '2009-04-01 22:42:57'),
(478, 'Simulación.', 284, 6, '2009-04-02 04:05:30', '2009-04-02 04:05:30', 'shuffle.cpp', 'text/x-c++src', 607, '2009-04-02 04:05:30'),
(479, 'Ush, hay soluciones muy complicadas =/ <br>\r\nHice un arreglo de 103 posiciones (una más a cada lado y una de por si algo :P) y lo lleno de ''.''s, después es fuerza BRUTA.', 289, 22, '2009-04-02 04:07:20', '2009-04-02 04:07:20', '11244.cc', 'text/x-c++src', 845, '2009-04-02 04:07:20'),
(480, 'the same contest with Ernest', 284, 32, '2009-04-02 04:07:56', '2009-04-02 04:07:56', 'Hanafuda_Shuffle.cpp', 'application/octet-stream', 1276, '2009-04-02 04:07:56'),
(481, 'BFS', 274, 6, '2009-04-02 04:55:23', '2009-04-02 04:55:23', 'knight.cpp', 'text/x-c++src', 1538, '2009-04-02 04:55:23'),
(482, 'If you have a string of length n, the number of total strings that might be matched to it is 2^(m - n). But we have to remove the strings that were already matched to a longer string.<br />\r\nIn other words, the answer for a string A of length n is 2^(m - n) minus the answer of every string B such that A is a prefix of B.<br />\r\nI used a trie to compute this quickly, because the naive O(n^2) algorithm is to slow for n = 20000.<br />\r\nBe careful reading the input, there might be empty spaces at the end of each line. It took me around 50 submissions to get this problem accepted.', 291, 1, '2009-04-02 22:39:57', '2009-04-03 02:47:40', '11590.7.cpp', 'text/x-c++src', 2430, '2009-04-02 22:39:57'),
(483, 'You can repeatedly reduce a pair of intervals into one single interval, until there are no more reducible pairs. Then you calculate the length of the uncovered part.', 277, 1, '2009-04-03 03:07:35', '2009-04-03 03:07:35', '4193.cpp', 'text/x-c++src', 2765, '2009-04-03 03:07:35'),
(484, 'Keep the interval of numbers that can be rounded to form the given numbers in the input.', 276, 1, '2009-04-03 03:20:06', '2009-04-03 03:20:06', '4192.cpp', 'text/x-c++src', 1689, '2009-04-03 03:20:06'),
(485, 'BFS but considering that some nodes might be pushed to the queue several times.', 283, 1, '2009-04-03 03:22:16', '2009-04-03 03:22:16', '4199.cpp', 'text/x-c++src', 1936, '2009-04-03 03:22:16'),
(486, 'Brute force simulation is fast enough.', 281, 1, '2009-04-03 03:27:58', '2009-04-03 03:27:58', '4197.cpp', 'text/x-c++src', 1182, '2009-04-03 03:27:58'),
(487, 'You can solve it using maximum flow. Create a bipartite graph, where nodes on the left represent rows and nodes on the right represent columns. See the code for the edges that should be created.', 208, 1, '2009-04-03 03:30:12', '2009-04-03 03:30:49', 'budget.cpp', 'text/x-c++src', 4318, '2009-04-03 03:30:12'),
(488, 'bfs', 293, 12, '2009-04-03 04:15:25', '2009-04-03 04:15:25', 'puzzle.cpp', 'application/octet-stream', 2444, '2009-04-03 04:15:25'),
(489, 'Precalculate all primes less than or equal to 10e6.\r\n\r\nThen, just follow the arithmetic progression counting the number of primes and stopping in the n-th prime.\r\n\r\nThe fastest way to calculate primes is with the sieve of Eratosthenes. Learn it because for every prime related problem, you are expected to use it!', 290, 4, '2009-04-03 12:30:49', '2009-04-03 12:30:49', 'prog.cpp', 'text/x-c++src', 1012, '2009-04-03 12:30:49'),
(490, 'Simple recursion', 286, 22, '2009-04-03 22:55:26', '2009-04-03 22:55:26', '2637.cpp', 'text/x-c++src', 1165, '2009-04-03 22:55:26'),
(491, 'combinatorics. simulation', 294, 12, '2009-04-04 04:03:05', '2009-04-04 04:03:05', 'party2.cpp', 'application/octet-stream', 2321, '2009-04-04 04:03:05'),
(492, 'Simulación.', 272, 6, '2009-04-05 23:11:49', '2009-04-05 23:11:49', 'TennisSet.cpp', 'text/x-c++src', 1904, '2009-04-05 23:11:49'),
(493, '...', 68, 6, '2009-04-05 23:42:19', '2009-04-05 23:42:19', 'fey.cpp', 'text/x-c++src', 263, '2009-04-05 23:42:19'),
(494, 'Simulación.', 299, 6, '2009-04-06 02:12:04', '2009-04-06 02:12:04', 'card.cpp', 'text/x-c++src', 1845, '2009-04-06 02:12:04'),
(495, 'Convex Hull implementation from Andy''s algorithms Manual.', 300, 27, '2009-04-06 03:12:45', '2009-04-06 03:42:32', 'Convex_Hull.cpp', 'text/x-c++src', 1688, '2009-04-06 03:42:32'),
(496, 'Pure geometry.\r\n<br/>\r\n<br/>\r\nBased in that the 3 given points aren''t linear we can form a triangle.\r\n<br/>\r\n<br/>\r\nFirs we have to find the distance between those 3 points,then with the law of cosines we are able to find an angle of 2 of those points, and with law of sines we can find the diameter of the minimal circumference that enclose that triangle.', 302, 27, '2009-04-06 03:28:19', '2009-04-06 03:33:22', '1131.cpp', 'text/x-c++src', 628, '2009-04-06 03:33:22'),
(497, 'Notice that when you take cards from the table, you take them "backwards"', 299, 22, '2009-04-06 03:32:35', '2009-04-06 03:32:35', 'main.cpp', 'text/x-c++src', 3619, '2009-04-06 03:32:35'),
(498, 'Graham Convex Hull Method. This method will only work with 3 or more points... Lost some time figuring a small,stupid mistake =S', 300, 22, '2009-04-06 03:36:38', '2009-04-06 03:36:38', 'main.cpp', 'text/x-c++src', 2606, '2009-04-06 03:36:38'),
(499, 'ConvexHull. Implementación manual Andrés Mejía.', 300, 6, '2009-04-06 04:10:00', '2009-04-06 04:10:00', 'trees.cpp', 'text/x-c++src', 1401, '2009-04-06 04:10:00'),
(500, 'Simple simulation', 140, 22, '2009-04-06 06:20:20', '2009-04-06 06:20:20', '10018.cc', 'text/x-c++src', 1549, '2009-04-06 06:20:20'),
(501, 'Una pequeña mejora cuando se crea la Criba de Eratóstenes... pero el código es prácticamente el mismo =/', 290, 22, '2009-04-06 07:52:01', '2009-04-06 07:52:01', '2601.cpp', 'text/x-c++src', 683, '2009-04-06 07:52:01'),
(502, '<p>Convex Hull.</p>\r\n\r\n<p>I used Andrew''s Convex Hull Scan. See <a href="http://www.amazon.com/Algorithms-Nutshell-OReilly-George-Heineman/dp/059651624X/ref=pd_bbs_sr_1?ie=UTF8&s=books&qid=1239030842&sr=8-1">Algorithms in a nutshell</a></p>\r\n\r\n<p><a href="http://nms.lcs.mit.edu/~aklmiu/6.838/convexhull/">Here''s an Applet that shows the algorithm in action</a></p>\r\n\r\n<p><a href="http://shygypsy.com/acm/cgi-bin/grepplus.pl?keywords=convex+hull">See more problems solvable by Convex Hull</a></p>\r\n', 300, 4, '2009-04-06 15:17:51', '2009-04-06 15:17:51', 'convex.cpp', 'text/x-c++src', 9325, '2009-04-06 15:17:51'),
(503, '<p>Simple Simulation</p>', 299, 4, '2009-04-06 18:32:43', '2009-04-06 18:32:43', 'kitty.cpp', 'text/x-c++src', 4485, '2009-04-06 18:32:43'),
(504, 'Simple simulation', 284, 22, '2009-04-06 19:07:19', '2009-04-06 19:07:19', '2636.cc', 'text/x-c++src', 840, '2009-04-06 19:07:19'),
(505, 'Another approach to this problem using geometry and linear algebra to save us from doing the costly cos, sin and repetitive sqrt functions.<br/>\r\nThe idea is that the bisectors of the triangle intersect in the circumcenter, which is the center of the circle that passes trough the triangle vertices''s.<br/>\r\nHaving that point, the radius is the distance from it to any point, and with that we can calculate the circumference.', 302, 20, '2009-04-06 20:34:59', '2009-04-06 20:39:10', '1131_-_The_Circumference_of_the_Circle.cpp', 'text/x-c++src', 1774, '2009-04-06 20:39:10'),
(506, 'Uso un string del max de cartas y después es solo substring.', 284, 5, '2009-04-07 04:40:58', '2009-04-07 04:40:58', '2636.cc', 'application/octet-stream', 502, '2009-04-07 04:40:58'),
(507, 'Simple subsequence method. The letters have to be found in order and in each letter has to be found on a bigger index than the previous one.', 303, 38, '2009-04-07 22:48:50', '2009-04-07 22:48:50', 'a.cc', 'application/octet-stream', 658, '2009-04-07 22:48:50'),
(509, 'Ecuentro el circuncírculo con los tres puntos y como sabemos que es un poligono regular sabemos que partiendo del punto 1 como angulo 0, y recorriendo angulos iguales respecto al centro del circuncirculo, se deben coger los otros puntos.<br>\r\nEntonces hacemos fuerza bruta sobre el numero de lados (de 3 a 200), y hallamos el delta de angulo delta que se debe saltar y miramos si los angulos entre el centro y el punto 2 y 3 son multiplos de este delta (Mirar divisibilidad en doubles es complicado).', 305, 38, '2009-04-07 23:21:49', '2009-04-07 23:21:49', 'B.cc', 'text/x-c++src', 2358, '2009-04-07 23:21:49'),
(510, 'Consiste basicamente en buscar todos los posibles ''cubos'' dado que un cubo puede ser de tamaño n*m*l y luego asegurarse de que la suma sea la maxima, para eso la recursion es una herramienta muy util. ', 296, 37, '2009-04-08 02:16:37', '2009-04-08 02:18:40', 'B.MaxSum.cpp', 'application/octet-stream', 950, '2009-04-08 02:16:37'),
(511, 'Eratóstenes. Cuidado con los primos muy grandes.', 119, 22, '2009-04-08 16:01:06', '2009-04-08 16:01:06', '583.cc', 'text/x-c++src', 1741, '2009-04-08 16:01:06'),
(512, 'Que problema tan maluco :S', 306, 38, '2009-04-09 14:04:37', '2009-04-09 14:04:37', 'sales.cc', 'text/x-c++src', 1976, '2009-04-09 14:04:37'),
(513, 'Simulation', 304, 38, '2009-04-09 16:58:58', '2009-04-09 16:58:58', '508_c.cc', 'application/octet-stream', 1992, '2009-04-09 16:58:58'),
(514, 'Combinatorics.', 307, 12, '2009-04-09 20:16:31', '2009-04-09 20:16:31', 'clocks.cpp', 'application/octet-stream', 1514, '2009-04-09 20:16:31'),
(516, 'Que asco ese juez. No deja compilar nada =S... Hay que poner todos los arreglos con tamaño fijo desde el principio. <br><br>Explicación en el código.', 308, 22, '2009-04-11 00:41:35', '2009-04-11 00:41:35', '3509.cpp', 'text/x-c++src', 1833, '2009-04-11 00:41:35'),
(517, 'Que asco de simulación. Hay que tener cuidado pq entregan TODO al reves! Si uno lee X y Y, debe usar m[Y][X] ...', 309, 22, '2009-04-11 07:15:03', '2009-04-11 07:32:20', '517_10267.cc', 'text/plain', 2458, '2009-04-11 07:32:20'),
(518, 'Con la hermosa formula del señor Gauss, se buscan cuantos términos se tienen hasta el momento para encontrar la diagonal, después es sólo restar la diferencia entre el elemento de la esquina y el número que me piden.', 267, 38, '2009-04-15 01:07:26', '2009-04-15 01:07:26', '264.cc', 'text/x-c++src', 519, '2009-04-15 01:07:26'),
(519, 'Simulation. Two queues, one for every player and a vector for the table.', 299, 32, '2009-04-15 03:38:05', '2009-04-15 03:38:05', 'Card_Game_-_Kitty_Fishing.cpp', 'application/octet-stream', 3159, '2009-04-15 03:38:05'),
(520, 'Simulation, just have to follow the instructions for the commands. I did it using both stacks.', 304, 32, '2009-04-15 05:48:53', '2009-04-15 05:48:53', 'Web_Navigation.cpp', 'application/octet-stream', 1563, '2009-04-15 05:48:53'),
(521, 'First find the primes from 2 to 1000 (sqrt(1000000))<br>\r\nThen check if the input is a prime that is the sum of two squares, this is done with Fermat''s theorem, (the one given in the problem).<br>\r\nThen we know that every prime greater than 2 is odd, and we know that the sum of two integers is odd if and only if one is odd and the other is even. With this we can make the conclusión that either x is 2 or y is 2, so the other one must be sqrt(p - 4).<br>\r\nSo the last thing we have to do is check if that numbers is integer and then if its prime and we are done.\r\n\r\n', 310, 20, '2009-04-18 23:35:44', '2009-04-18 23:37:47', 'M.cpp', 'text/plain', 851, '2009-04-18 23:37:47'),
(522, 'Just implement the "A" operation and it''s done, it''s a common carring sum, but be careful, always have a copy of "num1" cause it can''t be change during the sum. The rest is just string manipulation.\r\nIt was done in a contest with "El Combo de las estrellas".', 311, 32, '2009-04-19 00:37:01', '2009-04-19 00:37:01', 'Cowculations.cpp', 'application/octet-stream', 3353, '2009-04-19 00:37:01'),
(523, 'Easy "math" problem. Anna wins = total games/2 (counting the anna games) - total wins. and the same for the losses games.', 312, 32, '2009-04-19 02:45:38', '2009-04-19 02:45:38', 'Euchre_Results.cpp', 'application/octet-stream', 1192, '2009-04-19 02:45:38'),
(524, 'difference between total games and total wins and losses of the other girls.\r\n"nothing fancy"', 312, 5, '2009-04-19 03:25:43', '2009-04-19 03:25:43', 'euchre.cc', 'application/octet-stream', 357, '2009-04-19 03:25:43'),
(525, 'Ah, que rabia el error que tenía. Me faltó poner if(index==-1) num = 0;', 313, 22, '2009-04-19 18:37:29', '2009-04-19 18:37:29', 'UnluckyNumbers.clean.cc', 'text/x-c++src', 988, '2009-04-19 18:37:29'),
(526, 'creates all possible finite intervals [A,B], each time choosing A with less potential intervals , exploiting symmetry increase A and decrease B. If ranges are terminate just the numbers on the infinite interval.\r\n\r\nSorry for bad English', 314, 35, '2009-04-20 05:16:31', '2009-04-20 05:16:31', 'srm438div1easy.cc', 'text/x-c++src', 2230, '2009-04-20 05:16:31'),
(527, 'Simulation.', 315, 32, '2009-04-21 00:28:48', '2009-04-21 00:28:48', 'Spin.cpp', 'application/octet-stream', 925, '2009-04-21 00:28:48'),
(529, 'Simulation.', 315, 27, '2009-04-21 00:30:49', '2009-04-21 00:30:49', 'Spin.cpp', 'text/x-c++src', 500, '2009-04-21 00:30:49'),
(530, 'The first link (n(n + 1)(2n + 1) / 6).', 68, 32, '2009-04-21 01:37:26', '2009-04-21 01:37:26', 'Feynman.cpp', 'application/octet-stream', 259, '2009-04-21 01:37:26'),
(531, 'heee... yes. bubble sort.', 5, 32, '2009-04-21 01:52:27', '2009-04-21 01:52:27', 'Train_swapping.cpp', 'application/octet-stream', 995, '2009-04-21 01:52:27'),
(532, 'String "Manipulation".', 95, 32, '2009-04-21 02:29:42', '2009-04-21 02:29:42', 'Cryptoquote.cpp', 'application/octet-stream', 953, '2009-04-21 02:29:42'),
(533, 'Es una fuerza bruta. Solo hay 4 casos (cada caso con dos subcasos). Miro todas las posibilidades y tomo la mejor.<br><br>Lo único medio complicado es cuando se dispara desde la misma parte.', 317, 22, '2009-04-21 18:52:19', '2009-04-21 18:52:19', 'FeudaliasBattle.cc', 'text/x-c++src', 2029, '2009-04-21 18:52:19'),
(534, 'If the graph is Bipartite then it is Bicolorable.\r\n<br/>\r\nYou can test the bipartiteness of a graph with a simple DFS.', 318, 27, '2009-04-24 05:11:06', '2009-04-24 05:11:49', '10004.cpp', 'text/x-c++src', 1576, '2009-04-24 05:11:49'),
(535, 'Just to test the bipartiteness of the graph using a DFS, and to re-check for vertex''s who aren''t connected to the graph.', 254, 27, '2009-04-24 06:38:09', '2009-04-24 06:41:37', '2492.cpp', 'text/x-c++src', 1988, '2009-04-24 06:41:37'),
(536, 'By far the awfullest code I have ever written.', 38, 27, '2009-04-24 13:11:15', '2009-04-24 13:11:15', '1567.cpp', 'text/x-c++src', 2007, '2009-04-24 13:11:15'),
(537, 'Basic Geometric Concepts.\r\n\r\nMy solution seems a little patchy but it works for this problem.', 38, 4, '2009-04-24 14:18:40', '2009-04-24 14:18:40', 'lines.cpp', 'text/x-c++src', 2349, '2009-04-24 14:18:40'),
(538, 'If you have two lines in the form ax + by = c, you can form a matrix equation AX = B, and then you apply Cramer''s rule<br>\r\nNote that if the lines are parallel The matrix A determinant will be 0.', 38, 20, '2009-04-25 01:21:07', '2009-04-25 01:21:07', 'Intersecting_Lines.cpp', 'text/plain', 1230, '2009-04-25 01:21:07'),
(539, 'Just to find the connected Components of a graph using DFS.', 319, 27, '2009-04-26 21:57:44', '2009-04-26 21:59:41', '572.cpp', 'text/x-c++src', 1198, '2009-04-26 21:59:41'),
(540, 'An old code, easy problem.', 320, 32, '2009-04-27 06:08:36', '2009-04-27 06:08:36', 'Cryptanalysis.cpp', 'application/octet-stream', 1708, '2009-04-27 06:08:36'),
(541, 'This problem is to find the shortest path from city a to b, since the graph is connected and undirected, I use a BFS to find that shortest path.\r\n<br/>\r\n<br/>\r\nThe tricky part is to find an easy way to represent the graph and to remember that the shortest path given by the BFS is always from the root.', 321, 27, '2009-04-27 07:31:35', '2009-04-27 07:31:35', '10009.cpp', 'text/x-c++src', 1408, '2009-04-27 07:31:35'),
(542, 'Classical problem.', 320, 4, '2009-04-27 13:01:53', '2009-04-27 13:01:53', 'crypt.cpp', 'application/octet-stream', 1541, '2009-04-27 13:01:53'),
(543, 'Code it in paper while asisting to the "Seminario nacional de Coyuntura economica Laboral y Sindical".', 322, 27, '2009-04-28 05:57:31', '2009-04-28 05:57:31', 'minesweeper.cpp', 'text/plain', 1557, '2009-04-28 05:57:31'),
(544, 'Similar to "counting stars".', 322, 32, '2009-04-28 06:00:09', '2009-04-28 06:00:09', 'Minesweeper.cpp', 'application/octet-stream', 2089, '2009-04-28 06:00:09'),
(545, '... :-)', 322, 22, '2009-04-28 10:06:01', '2009-04-28 10:06:01', '10189.cpp', 'text/x-c++src', 1679, '2009-04-28 10:06:01'),
(546, 'Simulation.', 322, 4, '2009-04-28 12:30:18', '2009-04-28 12:30:18', 'minesweeper.cpp', 'text/x-c++src', 2176, '2009-04-28 12:30:18'),
(547, 'Flood Fill', 319, 22, '2009-04-28 14:33:22', '2009-04-28 14:33:22', '572.cpp', 'text/x-c++src', 1659, '2009-04-28 14:33:22'),
(548, 'Simple DFS', 318, 22, '2009-04-28 14:33:59', '2009-04-28 14:33:59', '10004.cc', 'text/x-c++src', 1779, '2009-04-28 14:33:59'),
(549, 'I just have a array of strings and inside the letters that has a sundex digit, then I search in that array and print the position + 1.', 118, 32, '2009-04-29 02:23:52', '2009-04-29 02:23:52', 'Soundex.cpp', 'application/octet-stream', 1178, '2009-04-29 02:23:52'),
(550, 'Not fancy at all :-)', 315, 22, '2009-04-29 03:15:07', '2009-04-29 03:15:07', 'spin.cpp', 'text/x-c', 473, '2009-04-29 03:15:07'),
(551, 'I look into the second word for every letter of the first word, and if in the final i, the iterator, is equal to the second word size then print yes.', 303, 32, '2009-04-29 05:22:40', '2009-04-29 05:22:40', 'All_in_All.cpp', 'application/octet-stream', 700, '2009-04-29 05:22:40'),
(552, 'Bubble Sort.', 5, 4, '2009-04-29 12:36:24', '2009-04-29 12:36:24', 'swap.cpp', 'text/x-c++src', 892, '2009-04-29 12:36:24'),
(553, 'Ad hoc.', 118, 4, '2009-04-29 13:36:53', '2009-04-29 13:36:53', 'soundex.cpp', 'text/x-c++src', 745, '2009-04-29 13:36:53'),
(554, 'Brute Force. But I bet there is an easier way.', 323, 32, '2009-04-29 21:14:55', '2009-04-29 21:14:55', 'Doubles.cpp', 'application/octet-stream', 1007, '2009-04-29 21:14:55'),
(555, 'Ad hoc.', 323, 4, '2009-04-29 22:36:15', '2009-04-29 22:36:15', 'doubles.cpp', 'text/x-c++src', 563, '2009-04-29 22:36:15'),
(556, 'Simple simulation. Nasty output ;-)', 324, 22, '2009-04-30 00:07:09', '2009-04-30 00:07:09', 'bridge.cpp', 'text/x-c++src', 2640, '2009-04-30 00:07:09'),
(557, 'If the number is an odd number, the solution will be the same always, o has to be the number and p has to be 0. In the other case, we have to divide the number by 2, and repeat it with the new number (the number that was divided by 2), so the number of the times it was divided is "p", and the result number of the last division is "o".\r\nI realized this solution trying with the small numbers, I guess there is another faster solution by a math way. :)', 325, 32, '2009-04-30 03:08:11', '2009-04-30 05:19:33', 'A_Simple_Task.cpp', 'application/octet-stream', 526, '2009-04-30 03:08:11');
INSERT INTO `solutions` (`id`, `explanation`, `problem_id`, `user_id`, `created_at`, `updated_at`, `source_code_file_name`, `source_code_content_type`, `source_code_file_size`, `source_code_updated_at`) VALUES
(558, 'You really gotta love C++ sets', 323, 22, '2009-04-30 03:12:58', '2009-04-30 03:12:58', '1930.cpp', 'text/x-c++src', 776, '2009-04-30 03:12:58'),
(559, 'Just to play a little with the properties of logarithms.', 325, 27, '2009-04-30 06:39:59', '2009-04-30 06:39:59', '1476.cpp', 'text/x-c++src', 468, '2009-04-30 06:39:59'),
(560, 'You are asked to go from n to o and p such thar n = o * 2^p.\r\n\r\nIt''s relatively easy and fast to go from o and p for all 0 <= n <= 10e6\r\n\r\nIn the code I only stored p in a cache but given the restrictions I could have also stored o.', 325, 4, '2009-04-30 13:08:17', '2009-04-30 13:08:17', 'simple.cpp', 'text/x-c++src', 597, '2009-04-30 13:08:17'),
(561, 'Very easy problem.<br> Just reformulate the question to "How many times can you divide a number by 2?"', 325, 20, '2009-04-30 19:28:43', '2009-04-30 19:29:24', 'simple.cpp', 'text/plain', 250, '2009-04-30 19:29:24'),
(563, 'finally!!! :), I was having a problem declaring the vectors out of the main. :S.\r\nThe idea is the same, DFS.', 318, 32, '2009-05-01 06:21:15', '2009-05-01 06:21:15', 'Bicoloring.cpp', 'application/octet-stream', 1243, '2009-05-01 06:21:15'),
(564, 'Another backtracking problem, similar to red and black problem.\r\n:)', 319, 32, '2009-05-01 07:54:24', '2009-05-01 07:54:24', 'Oil_Deposits.cpp', 'application/octet-stream', 1970, '2009-05-01 07:54:24'),
(565, '<pre></pre>', 68, 34, '2009-05-01 15:19:09', '2009-05-01 15:19:09', 'Feynman.java', 'application/octet-stream', 571, '2009-05-01 15:19:09'),
(566, 'ahi vamos', 323, 44, '2009-05-01 18:02:40', '2009-05-01 18:02:40', '1930.cpp', 'application/octet-stream', 693, '2009-05-01 18:02:40'),
(567, 'Simple simulación', 7, 45, '2009-05-02 04:30:47', '2009-05-02 04:30:47', '11385_-_Da_Vinci_Code.cpp', 'text/x-c', 1313, '2009-05-02 04:30:47'),
(568, 'Voy guardando el resultado de la primera mitad de cada fila del triángulo, ya q la otra mitad es idéntica, y voy sobreescribiendo el vector a medida q voy mostrando.\r\nCada nueva línea sólo es la suma de los elementos de la anterior línea.', 326, 45, '2009-05-02 04:43:26', '2009-05-02 04:43:26', '485_-_Pascal_s_Triangle_of_Death.cpp', 'text/x-c', 1422, '2009-05-02 04:43:26'),
(569, 'Genero el triangulo de Pascal hasta la fila 210. Realmente solo se necesita hasta la fila 204, pero buehh, 6 más... 6 menos... Da igual ...', 326, 22, '2009-05-02 21:59:57', '2009-05-02 21:59:57', '485.cpp', 'text/x-c++src', 2158, '2009-05-02 21:59:57'),
(570, 'Genero los primeros 500 números de fibonacci en la forma que indica el problema, luego solo es contar en los intervalos y considerar si hay algún número de fibonacci en los extremos ', 328, 45, '2009-05-03 02:38:52', '2009-05-03 02:38:52', '10183_-_How_many_fibs.cpp', 'text/x-c', 1693, '2009-05-03 02:38:52'),
(571, 'Se trata de ordenar un campeonato de fútbol de acuerdo a los clásicos criterios de un torneo de futbol, entonces creo una clase que representa los equipos y sobrecargo el operador "<" para el momento de ordenarlos, eso es todo', 329, 45, '2009-05-03 02:47:26', '2009-05-03 02:47:26', '10194_-_Football_aka_Soccer_.cpp', 'text/x-c', 3730, '2009-05-03 02:47:26'),
(572, 'Simulación. Se fue creando cada linea del triangulo de pascal hasta cumplir la condición dada.\r\n\r\nSe utilizo BigInteger de java porque el triangulo de pascal podia contener elementos mayores a 2^64-1 (18446744073709551615) y este es el maximo valor que se puede almacenar en c++ con un Unsigned Long Long.', 326, 6, '2009-05-04 16:05:33', '2009-05-04 16:05:33', 'Main.java', 'application/octet-stream', 1039, '2009-05-04 16:05:33'),
(573, 'BFS. Finding the "shortest path".\r\n:)', 195, 32, '2009-05-05 03:44:17', '2009-05-05 03:44:17', 'Bombs_NO_they_are_Mines_.cpp', 'application/octet-stream', 2458, '2009-05-05 03:44:17'),
(574, 'BFS.', 195, 4, '2009-05-05 04:18:23', '2009-05-05 04:18:23', 'bombs.cpp', 'text/x-c++src', 2596, '2009-05-05 04:18:23'),
(575, 'mmm simple simulation.', 19, 32, '2009-05-05 04:48:16', '2009-05-05 12:44:25', 'Hangover.cpp', 'application/octet-stream', 469, '2009-05-05 04:48:16'),
(576, 'Simulation with memoization.', 19, 4, '2009-05-05 12:24:21', '2009-05-05 12:24:21', 'cards.cpp', 'text/x-c++src', 597, '2009-05-05 12:24:21'),
(577, 'Knowing that k=e^lon(p)/n is easy. And according to wikipedia e=2.71828182845904523536.', 105, 32, '2009-05-05 20:40:01', '2009-05-05 20:40:01', 'Power_of_Cryptography.cpp', 'application/octet-stream', 444, '2009-05-05 20:40:01'),
(578, 'Shortest Path using Dijkstra Algorithm.', 28, 27, '2009-05-06 01:20:26', '2009-05-06 01:24:24', '10986.cpp', 'text/x-c++src', 1501, '2009-05-06 01:24:24'),
(579, 'Brute Force, for all the possible lines', 9, 3, '2009-05-06 14:58:36', '2009-05-06 14:58:36', 'lines.cc', 'text/x-c++src', 1169, '2009-05-06 14:58:36'),
(580, 'max flow', 264, 3, '2009-05-06 16:32:42', '2009-05-06 16:32:42', '3031.cc', 'text/x-c++src', 1802, '2009-05-06 16:32:42'),
(581, 'Pre compute', 191, 3, '2009-05-06 16:38:26', '2009-05-06 16:38:26', '136.c', 'text/x-csrc', 97, '2009-05-06 16:38:26'),
(582, 'Easy geometric problem, if you use the sin''s law', 302, 3, '2009-05-06 16:48:07', '2009-05-06 16:48:07', 'circu.cpp', 'text/x-c++src', 518, '2009-05-06 16:48:07'),
(583, 'DFS', 318, 3, '2009-05-06 16:50:41', '2009-05-06 16:50:41', 'bicolor.cc', 'text/x-c++src', 884, '2009-05-06 16:50:41'),
(584, 'Ugly solution', 320, 3, '2009-05-06 16:52:08', '2009-05-06 16:52:08', '10008.cpp', 'text/x-c++src', 827, '2009-05-06 16:52:08'),
(585, 'My implementation of Maximum bipartite matching', 2, 3, '2009-05-07 01:14:10', '2009-05-07 01:14:10', '10080.cc', 'text/x-c++src', 2500, '2009-05-07 01:14:10'),
(586, 'Same Dijkstra thing', 28, 22, '2009-05-07 02:15:11', '2009-05-07 02:15:11', '10986.cpp', 'text/x-c++src', 2221, '2009-05-07 02:15:11'),
(587, 'Después de intentar mucho Dijkstra supe que no iba a ser capaz (realmente no sé si se pueda hacer con Dijkstra, demás que si) entonces me pasé para Floyd-Warshal. Pero como me piden el mayor de los menores hay que hacerle la pequeña modificación.', 333, 22, '2009-05-08 05:36:43', '2009-05-08 05:36:43', 'heavy.cpp', 'text/x-c++src', 1187, '2009-05-08 05:36:43'),
(588, 'Minimax Problem :-). Guardo el cuadrado de las distancias y solo saco la raiz al final.', 334, 22, '2009-05-09 00:23:28', '2009-05-09 00:25:02', '534.cpp', 'text/x-c++src', 1073, '2009-05-09 00:23:28'),
(589, 'Algoritmo de Ford-Fulkerson''s. \r\n\r\nTIP: Tener en cuenta que no es calcular todo el posible flujo que puede ir de la fuente al sumidero, si no el mayor de éstos.', 333, 6, '2009-05-09 04:05:31', '2009-05-09 04:05:31', 'cargo.cpp', 'text/x-c++src', 2764, '2009-05-09 04:05:31'),
(590, 'Algorithm to find the numbers of divisors of n; checking all the values from 1 to n^0.5.', 117, 32, '2009-05-09 04:19:09', '2009-05-09 04:19:09', 'Divisors.cpp', 'application/octet-stream', 966, '2009-05-09 04:19:09'),
(591, 'Simulación. Aprovechando que la rana no es muy inteligente, se puede simular empezando la rana con cada columna.\r\n\r\nTip 1: Primero se mueve la rana y despues los carros.\r\nTip 2: Cuidado calculando los movimientos de los carros, almacenar sus posiciones antes de operar con ellos.', 335, 6, '2009-05-10 17:14:32', '2009-05-10 17:14:32', 'frog.cpp', 'text/x-c++src', 2210, '2009-05-10 17:14:32'),
(592, 'Generate all the prime number using sieve method. Then bruteforce.', 135, 32, '2009-05-10 23:01:03', '2009-05-10 23:01:03', 'Goldbach_s_Conjecture_II_.cpp', 'application/octet-stream', 1149, '2009-05-10 23:01:03'),
(593, 'Ahora con BFS', 318, 22, '2009-05-11 01:16:22', '2009-05-11 01:16:22', 'bfs.cpp', 'text/x-c++src', 1331, '2009-05-11 01:16:22'),
(594, 'Simulación.\r\n\r\nTip: No dejar una linea en blanco al final del último caso :D.', 329, 6, '2009-05-11 04:45:16', '2009-05-11 04:45:16', 'soccer.cpp', 'text/x-c++src', 3611, '2009-05-11 04:45:16'),
(595, 'Sieve method. Then bruteforce. Got 4 place in top 20 :) 0.040.', 136, 32, '2009-05-11 05:33:32', '2009-05-11 05:34:07', 'Goldbach_s_Conjecture.cpp', 'application/octet-stream', 1023, '2009-05-11 05:33:32'),
(596, 'Se sabe que la distancia entre dos nodos debe ser menor a la suma del largo de los cables. <br><br>\r\nLo importante es caer en cuenta que debo construir el grafo Y buscar el camino más corto al mismo tiempo. Si construyo primero el grafo y después busco el camino da TLE.<br>', 336, 38, '2009-05-12 03:23:51', '2009-05-12 03:23:51', 'newA.cpp', 'text/x-c++src', 1748, '2009-05-12 03:23:51'),
(598, 'BFS', 336, 3, '2009-05-12 17:55:08', '2009-05-12 17:55:08', 'server.cc', 'text/x-c++src', 1281, '2009-05-12 17:55:08'),
(599, 'Simple math', 338, 38, '2009-05-13 01:21:24', '2009-05-13 01:21:24', '1006.cpp', 'text/x-c++src', 712, '2009-05-13 01:21:24'),
(600, 'Modular congruences', 338, 3, '2009-05-13 03:37:50', '2009-05-13 03:37:50', 'code.cc', 'text/x-c++src', 596, '2009-05-13 03:37:50'),
(601, 'Ad hoc.', 338, 6, '2009-05-14 04:22:00', '2009-05-14 04:22:00', 'untwist.cpp', 'text/x-c++src', 823, '2009-05-14 04:22:00'),
(602, 'Simple simulation', 339, 38, '2009-05-15 03:21:46', '2009-05-15 03:21:46', 'Parencoding.cpp', 'text/x-c++src', 1811, '2009-05-15 03:21:46'),
(603, 'BFS. Construir las aristas del grafo solo cuando sean necesarios en el BFS.', 336, 6, '2009-05-15 05:21:36', '2009-05-15 05:21:36', 'se.cpp', 'text/x-c++src', 1512, '2009-05-15 05:21:36'),
(604, 'Simulation', 339, 3, '2009-05-15 15:01:03', '2009-05-15 15:01:03', 'paren.cc', 'text/x-c++src', 1740, '2009-05-15 15:01:03'),
(605, 'Simulation', 340, 3, '2009-05-15 15:04:34', '2009-05-15 15:04:34', 'worm.cc', 'text/x-c++src', 2342, '2009-05-15 15:04:34'),
(606, 'It took me about 12 submissions for a stupid 5''th grade mistake.', 258, 27, '2009-05-18 20:43:31', '2009-05-18 20:43:31', '2892.cpp', 'text/x-c++src', 1015, '2009-05-18 20:43:31'),
(607, 'Just to count the connected components of a graph, using the simplest DFS', 341, 27, '2009-05-18 21:46:22', '2009-05-18 21:46:22', '2469.cpp', 'text/x-c++src', 796, '2009-05-18 21:46:22'),
(608, 'Basic Arithmetic. Huge Input use getchar', 342, 12, '2009-05-18 23:30:31', '2009-05-18 23:30:31', 'B.cpp', 'application/octet-stream', 839, '2009-05-18 23:30:31'),
(609, 'Primero se genera la matriz de n*n ordenada.\r\nLuego para cada anillo de la matriz de entrada se verifica si es consistente con el respectivo anillo de la matriz ordenada', 308, 12, '2009-05-18 23:37:33', '2009-05-18 23:37:33', 'abcd.cpp', 'application/octet-stream', 1854, '2009-05-18 23:37:33'),
(610, 'La misma idea de un gusano llamado gus =/', 340, 22, '2009-05-19 21:18:27', '2009-05-19 21:18:27', 'Worm.cpp', 'text/x-c', 2388, '2009-05-19 21:18:27'),
(611, 'Creo que el problema se explica solo. Es mirar cuantas relaciones transitivas diferentes hay...', 341, 22, '2009-05-20 00:46:17', '2009-05-20 00:46:17', '2469.cpp', 'text/x-c++src', 846, '2009-05-20 00:46:17'),
(612, 'Otro DFS', 258, 22, '2009-05-20 01:05:29', '2009-05-20 01:05:29', '2892.cpp', 'text/x-c++src', 1138, '2009-05-20 01:05:29'),
(613, '<p>Lo primero que hay que tener en cuenta es que los primos impares que buscamos son aquellos n&uacute;meros para los que n % 4 == 1</p>\r\n\r\n<p>Para hallar n&uacute;meros primos no hay mejor algoritmo que una Criba de Erat&oacute;stenes. Sin embargo aqu&iacute; no queremos saber si un n&uacute;mero es primo o no, sino contarlos.</p>\r\n\r\n<p>Tener la criba y para cada rango dado contar los primos y adem&aacute;s los "primos de Fermat" es muy lento, as&iacute; que al llenar la criba creamos dos caches donde llevamos la cuenta de cu&aacute;ntos n&uacute;meros hay entre 0 e i.</p>\r\n\r\n<p>Para contar los n&uacute;meros en el rango [a, b] simplemente hallamos cache[b] - cache[a - 1]</p>\r\n\r\n<p>Hay dos cascaritas:</p>\r\n\r\n<ol>\r\n<li>\r\nEl enunciado dice "U <= L <= 1000000" pero nunca dice que U > 0 as&iacute; que U y L pueden ser negativos, aunque el valor centila es U = -1 y L = -1. Obviamente no puede haber primos negativos y menos n&uacute;meros negativos que sean la suma de dos cuadrados, así que los ingoramos en nuestra cuenta en los caches.</li>\r\n\r\n<li>Hablan de que un n&uacute;mero primo impar que sea la suma de dos cuadrados es de la forma 4n + 1 pero luego dicen que lo que el programa pide son todos los números primos que se puedan expresar como la suma de dos cuadrados (es decir incluyendo 2) ¡Así que hay que no olvidar contar a 2!</li>\r\n</ol>', 343, 4, '2009-05-20 04:39:49', '2009-05-20 04:41:46', 'fernat.cpp', 'text/x-c++src', 1179, '2009-05-20 04:39:49'),
(614, '<p>Consideremos la multiplicacion de un numero de tres d&iacute;gitos a b y c:</p>\r\n\r\n<pre>  abc\r\n   11\r\n  ---\r\n  abc\r\n abc\r\n ----\r\n fedc\r\n</pre>\r\n\r\n<p>Es claro que d = b + c y que e = a + b (+ posible carry) y que f es a (+ un posible carry)</p>\r\n\r\n<p>Conocido fedc podemos hallar abc, porque d = b + c pero ya conozco c (que es el &uacute;ltimo d&iacute;gito del n&uacute;mero). Conocido b podemos hallar a porque e = b + a (+ posible carry) y puedo aplicar ese algoritmo sin importar cu&aacute;ntos d&iacute;gitos tenga el n&uacute;mero.</p>\r\n\r\n<p>Por &uacute;ltimo note que f no puede ser 0. Si f es 0, entonces a es 0 y eso contradice nuestra suposición inicial</p>', 342, 4, '2009-05-20 05:11:49', '2009-05-20 05:12:55', 'hide.cpp', 'text/x-c++src', 686, '2009-05-20 05:11:49'),
(615, '<p>Fuerza Bruta.</p>\r\n\r\n<p>Se lee el caso de prueba y se genera una matriz soluci&oacute;n. Luego se hacen los recorridos en espiral de la matriz y almaceno en un vector los n&uacute;meros del caso y la soluci&oacute;n. Si puedo rotar esa capa para ordenarla implica que es una rotaci&oacute;n de la soluci&oacute;n. Si no lo es detengo el algoritmo, si lo es continuo con la siguiente capa.</p>\r\n\r\n<p>Los primeros mil intentos al juez se quedaban por tiempo &iquest;Soluci&oacute;n? Utilizar variables globales, C "purito" y no usar funciones :S </p>', 308, 4, '2009-05-20 06:25:07', '2009-05-20 06:27:05', 'rings.cpp', 'text/x-c++src', 1931, '2009-05-20 06:25:07'),
(616, '<p>Ad hoc</p>', 344, 4, '2009-05-20 13:44:49', '2009-05-20 13:44:49', 'judge.cpp', 'text/x-c++src', 800, '2009-05-20 13:44:49'),
(617, '2 = 1^2 + 1^2 =S ...valen los 10 WAs =S', 343, 38, '2009-05-20 16:04:05', '2009-05-20 16:04:05', 'Fermat.cpp', 'text/x-c', 1157, '2009-05-20 16:04:05'),
(618, 'Nothing fancy', 344, 38, '2009-05-20 16:04:36', '2009-05-20 16:04:36', 'A.cpp', 'text/x-c', 965, '2009-05-20 16:04:36'),
(619, 'Provincia Express contest solution ', 345, 38, '2009-05-20 16:18:55', '2009-05-20 16:18:55', 'newF.cpp', 'text/x-c', 2117, '2009-05-20 16:18:55'),
(620, 'ad hoc.', 344, 32, '2009-05-21 00:56:14', '2009-05-21 00:56:14', 'Judging_Olympia.cpp', 'application/octet-stream', 657, '2009-05-21 00:56:14'),
(621, 'Programacion dinamica, hay dos opciones posibles tomar una carta de la izquierda o una de la derecha, se memoriza en la matriz B cada vez que se hace un calculo.', 228, 37, '2009-05-22 21:55:21', '2009-05-22 21:55:21', 'twoends.cpp', 'application/octet-stream', 1233, '2009-05-22 21:55:21'),
(622, 'Implemented the aritmetic plus (+) between strings, it manage the biginteger problem.', 328, 49, '2009-05-23 18:13:49', '2009-05-23 18:13:49', 'How_many_fibs.cpp', 'text/x-c++src', 4508, '2009-05-23 18:13:49'),
(623, 'The code explain how it works, i dont remember :)', 346, 49, '2009-05-23 18:16:17', '2009-05-23 18:16:17', 'Common.cpp', 'text/x-c++src', 1933, '2009-05-23 18:16:17'),
(624, 'Each day of the week is represented by a number (friday jumps from 8 to 8 day number). Travel trough the week days and if any number of the day correspond with the given, it is a lose day.', 347, 49, '2009-05-23 19:12:07', '2009-05-23 19:12:07', 'hartals.cpp', 'text/x-c++src', 1269, '2009-05-23 19:12:07'),
(625, 'We had two arrays, one with the real button and the other with the correspond button to the i pos of the first array. And for each button we search what button correspond to it.', 348, 49, '2009-05-23 19:14:58', '2009-05-23 19:14:58', 'WERTYU.cpp', 'text/x-c++src', 892, '2009-05-23 19:14:58'),
(626, 'The task is to find any fib, so there was a biginteger problem. We had a func that add one string to other represented ass strings. So we resolve the biginteger problem, and for each fib we find we save the others fibs finded, to evite recalculate them', 349, 49, '2009-05-23 19:19:05', '2009-05-23 19:19:05', 'Fibonacci_Freeze.cpp', 'text/x-c++src', 4859, '2009-05-23 19:19:05'),
(627, 'Same thing I guess.', 348, 22, '2009-05-23 20:11:53', '2009-05-23 20:11:53', '10082.cpp', 'text/x-c++src', 935, '2009-05-23 20:11:53'),
(629, 'Minimum Spanning Tree', 350, 38, '2009-05-23 22:22:16', '2009-05-23 22:22:16', 'electric.cpp', 'text/x-c++src', 2078, '2009-05-23 22:22:16'),
(630, 'I think I did it more complex.', 348, 32, '2009-05-24 12:23:01', '2009-05-24 12:23:01', 'WERTY.cpp', 'application/octet-stream', 1613, '2009-05-24 12:23:01'),
(631, '<p>BFS</p>\r\n\r\n<p>Primero calculamos la menor distancia entre la Tierra y los demás planetas. Luego con esa distancia calculamos la mayor ganancia posible de conseguir con cada planeta y escogemos el planeta con mayor ganancia.</p>', 351, 4, '2009-05-26 15:19:07', '2009-05-26 15:19:07', 'galactic.cpp', 'text/x-c++src', 2087, '2009-05-26 15:19:07'),
(632, 'Que mierda que ese juez saque WA porque uno imprime (o no) un \\n... <br><br>\r\nEncuentro la distancia entre todos los puntos y después aplico Kruskal', 352, 22, '2009-05-27 04:16:39', '2009-05-27 04:17:29', '10034.cpp', 'text/x-c++src', 1794, '2009-05-27 04:16:39'),
(633, 'Change sort function', 170, 22, '2009-05-27 04:23:40', '2009-05-27 04:23:40', 'SequenceOfNumbers.cc', 'text/x-c++src', 336, '2009-05-27 04:23:40'),
(634, 'Greedy Algorithm. Si encuentro alguien a quien le debo y no le debo a nadie más atras y tengo plata para pagarle, le pago. Si le debo a alguien de atras o no tengo plata, guardo ese valor (sumado a las otras deudas) y solo me devuelvo cuando tenga plata suficiente para pagarle a todos los de atras. Algoritmo O(n).\r\n<br><br>\r\nAdemás tengo que terminar al final de la fila.', 330, 22, '2009-05-28 00:33:56', '2009-05-28 00:33:56', '3203.cpp', 'text/x-c++src', 1276, '2009-05-28 00:33:56'),
(635, 'La idea es la siguiente. Tenemos una permutación que por una de sus propiedad tenemos que los elementos del 0 al N-1 son diferentes. Esto implica que hay una relacion para todo i = 0...N-1, con P[i] única. Mirandolo de este modo una permutacion la podremos convertir en n grupos donde cada elemento del grupo es un i, pero a la vez son P[i] del i anterior. Por lo tanto la permutación perfecta más cercana sería equivalente al número de grupos que tenemos en la premutación, con exepción de que si nos da un solo grupo quiere decir que estamos en una permutación perfecta (se retorna 0).', 353, 6, '2009-05-28 21:01:56', '2009-05-28 21:01:56', 'PerfectPermutation.cpp', 'application/octet-stream', 522, '2009-05-28 21:01:56'),
(636, 'String Manipulation', 354, 6, '2009-05-30 03:08:38', '2009-05-30 03:08:38', 'DifferentStrings.cpp', 'application/octet-stream', 486, '2009-05-30 03:08:38'),
(637, 'with map, is more clearly a trivial solution. ', 356, 35, '2009-05-31 05:52:46', '2009-05-31 05:52:46', 'B.cpp', 'text/x-c++src', 1302, '2009-05-31 05:52:46'),
(638, 'Trivial solution', 355, 35, '2009-05-31 05:54:47', '2009-05-31 05:54:47', 'A.cpp', 'text/x-c++src', 1029, '2009-05-31 05:54:47'),
(639, 'First encode the chain in binary and with directions of snake {x,y}  {{0,1},{1,0},{0,-1},{-1,0}} put each character in order of snake and extract and move in the correct order to output. Codificar la cadena en binario con las direcciones en orden de la serpiente {x,y}  {{0,1},{1,0},{0,-1},{-1,0}} poniendo caracter en su posicion en la matrix y extrayendo por ultimo los caracteres en el orden correcto.', 357, 35, '2009-05-31 06:07:48', '2009-05-31 06:07:48', 'C.cpp', 'text/x-c++src', 3024, '2009-05-31 06:07:48'),
(640, 'Put the characters in the usual order in matrix, later move in matrix with snake moves and group bits of 4 bits and decode in letter and finish deleting spaces at the end of chain. Se ponen los caracteres en el orden usual de la matrix, se recorre con los movimientos de la serpiente sacando grupos de 4 bits que se codifican armando una cadena y por ultimo se eliminan los espacios al final de la cadena.', 358, 35, '2009-05-31 06:25:26', '2009-05-31 06:25:26', 'D.cpp', 'text/x-c++src', 2870, '2009-05-31 06:25:26'),
(641, 'In this problem each {x} doubled the num in x. If x is empty the number is 1, and if {a}{b} then obtain the lcm (a,b) how answer and make this recursively. En est problema se aplica {x} es igual a x*2 si x es vacio retorna 1 como caso base si se tienen de la forma {a}{b} se saca el minimo comun multiplo entre a y b y esa es la respuesta se aplica esta idea recursivamente sobre la cadena de entrada.\r\n\r\nO tambien en otra posible aproximacion se mira la mayor profundidad posible y el resultado es igual a 2^MAXprofundidad', 360, 35, '2009-05-31 06:35:55', '2009-05-31 06:35:55', 'F.cpp', 'text/x-c++src', 1600, '2009-05-31 06:35:55'),
(642, 'simple look the distance of (width,height) is less than ratio, for delete precision errors power 2 to both sides of equation obtain ratio*ratio*4>=(width*width)+(height*height)\r\n\r\nSimplemente miramos la distancia al punto (ancho,alto) si es menor que el radio,para eliminar errores de precision elevamos ambos lados de la ecuacion al cuadrado obteniendo radio*radio*4>=(ancho*ancho)+(alto*alto).', 364, 35, '2009-05-31 06:44:58', '2009-05-31 06:44:58', 'J.cpp', 'text/x-c++src', 1138, '2009-05-31 06:44:58'),
(643, 'An easy one, a simple "regla de tres".', 356, 32, '2009-05-31 06:49:53', '2009-05-31 06:49:53', 'Conversions.cpp', 'application/octet-stream', 771, '2009-05-31 06:49:53'),
(644, '	\r\nmaintaining pointers to begin at end of string possible iterate. if the character not belongs to chain sum to variable characters in chain and store the position of the last occurrence of this. if the number of characters is most than m then iterate begin and find a character to delete and maintain the number of characters less than m.\r\nO(n) \r\nSe mantienen punteros al principio y al final de la cadena que esta siendo explorada. si al insertar un caracter sobrepasa la capacidad maxima de m se elimina del puntero del principio los caracteres que sean necesarios para que se sirva conservando valida la cadena con un numero de caracteres menores que m almacenando siempre la ultima ocurrencia de la letra.', 365, 35, '2009-05-31 06:53:05', '2009-05-31 06:53:05', '3014.cc', 'text/x-c++src', 1754, '2009-05-31 06:53:05'),
(645, 'string::erase. Just that.', 355, 32, '2009-05-31 06:57:18', '2009-05-31 06:57:18', 'Mispelling.cpp', 'application/octet-stream', 412, '2009-05-31 06:57:18'),
(646, 'with greedy approximation calculate the representation binary and shift to right the number in binary latter converts in decimal representation.\r\n\r\nCon una aproximacion avara se obtiene la representacion en binario se hace un corrimiento a la derecha y por ultimo se convierte a su representacion en base decimal ', 366, 35, '2009-05-31 06:59:29', '2009-05-31 07:00:13', 'L.cpp', 'text/x-c++src', 1305, '2009-05-31 07:00:13'),
(647, 'for each letter independent. Calculate the size of sequence before repeat this and apply module calculate the correspondent position in the string. \r\n\r\nPara cada letra independientemente notamos que se repite la secuencia por donde pasa de forma ciclica con una secuencia maxima de 80 que es que pase por todas las posiciones, por lo tanto simulamos cada posicion mirando su secuencia de posiciones despues hasta encontrar que se repiten se almacena la longitud de esta secuencia de tal forma que sacamos modulo a m con esta secuencia y nos da la posicion a la cual estara en un rango de 1 a 80 como maximo.', 367, 35, '2009-05-31 07:08:59', '2009-05-31 07:08:59', '3016.cc', 'text/x-c++src', 1802, '2009-05-31 07:08:59'),
(648, 'simple is a dynamic programming(dp) with states (nums[i],k ) and relation of recurrence dp[i][k]=sum(dp[j][k-1]) with j iterate over 1<j<i and number[i]>number[j].\r\n\r\nSimplemente es un problema de programacion dinamica(dp) con estados (numero[i],k) y relacion de recurrencia dp[i][k]=sum(dp[j][k-1]) con j iterando alrededor de 1<j<i y con la restriccion de  numero[i]>numero[j].', 368, 35, '2009-05-31 07:14:54', '2009-05-31 07:14:54', 'N.cpp', 'text/x-c++src', 1434, '2009-05-31 07:14:54'),
(649, 'Habia que matar un poquito el desparchesito =S', 355, 22, '2009-05-31 07:15:19', '2009-05-31 07:15:19', 'Untitled1.cpp', 'text/x-c', 712, '2009-05-31 07:15:19'),
(650, 'Small changes to tha naive string matching algorithm...', 369, 22, '2009-05-31 07:21:11', '2009-05-31 07:21:11', 'Untitled2.cpp', 'text/x-c', 2209, '2009-05-31 07:21:11'),
(651, 'mmmm nice way with "the naive string matching algorithm", I did not know that one. I did it in a less complex way but not in a efficient one. Just compare each charater of the string with the other one and safe that num, then move the one of the strings one position and do the same, finally we have the maximun common letters (brute force :P jajaja). Then to simplificate the fraction Euclides algorithm and it''s done :). (A wierd explenation sorry, it''s late now. :p)', 369, 32, '2009-05-31 07:54:21', '2009-05-31 07:55:28', 'String_Matching.cpp', 'application/octet-stream', 1575, '2009-05-31 07:54:21'),
(652, 'I really had troubles with this problem, jejeje, All of then trying to put the characters in the matrix, crossing it in spiral way. But it''s done :). Just pass the words to binary, put it into the matrix and then show it in the classic way.', 357, 32, '2009-05-31 21:53:51', '2009-05-31 21:58:52', 'Encoding.cpp', 'application/octet-stream', 4380, '2009-05-31 21:53:51'),
(653, 'Carry sum using vectors.', 370, 32, '2009-05-31 23:05:54', '2009-05-31 23:05:54', 'Super_long_sums.cpp', 'application/octet-stream', 1617, '2009-05-31 23:05:54'),
(654, 'Big integer sums.', 370, 27, '2009-05-31 23:10:32', '2009-05-31 23:10:32', '10013.cpp', 'text/x-c++src', 958, '2009-05-31 23:10:32'),
(655, 'Another "Super long sum". Two strings and carry sum. ', 371, 32, '2009-05-31 23:20:25', '2009-05-31 23:21:02', 'Integer_Inquiry.cpp', 'application/octet-stream', 1711, '2009-05-31 23:20:25'),
(656, 'Ad hoc.', 372, 32, '2009-05-31 23:26:55', '2009-05-31 23:26:55', 'Haiku_Review.cpp', 'application/octet-stream', 1354, '2009-05-31 23:26:55'),
(657, 'Ad hoc, string matipulation.', 373, 32, '2009-05-31 23:32:57', '2009-05-31 23:32:57', 'Word_Scramble.cpp', 'application/octet-stream', 1041, '2009-05-31 23:32:57'),
(658, 'More and more strings... :) practicing. Ad hoc, and obviously string manipulation.', 374, 32, '2009-05-31 23:37:18', '2009-05-31 23:37:18', 'Automatic_Poetry.cpp', 'application/octet-stream', 1780, '2009-05-31 23:37:18'),
(659, '"Remember : Result can not be more than 100 % . Take the ratio carefully to avoid this problem." I had problems trying to fix that. But is not too hard, just do what they want, play with the digits and it''s done. And my love calculation is 75.00% mmmmm :S.', 375, 32, '2009-05-31 23:42:55', '2009-05-31 23:42:55', 'Love_Calculator.cpp', 'application/octet-stream', 2362, '2009-05-31 23:42:55'),
(660, 'just print the subsequence which has maximum summation value from the given sequence. mmmm Wierd problem. just print all the numbers that they give you (no cero). ', 376, 32, '2009-05-31 23:57:22', '2009-05-31 23:57:22', 'Maximum_Sum_II.cpp', 'application/octet-stream', 933, '2009-05-31 23:57:22'),
(661, 'Simplemente debemos probar que el grafo sea "bipartible"\r\n\r\nEl "gotcha" es que el grafo no tiene que ser fuertemente conectado así que un sólo DFS no basta:\r\n\r\nRecorremos todos los nodos, para cada nodo sin color, lo coloreamos de un color arbitario (p.j. blanco) y usamos DFS para colorear todos los nodos alcanzables desde ese nodo con el color contrario a su antecesdor. Si en cualquier momento uno de los vecinos del nodo actual es del mismo color, sabemos que la condición no se cumple.', 254, 4, '2009-06-01 05:35:16', '2009-06-01 05:35:16', 'bugs.cpp', 'text/x-c++src', 1620, '2009-06-01 05:35:16'),
(662, 'God!! After 6 wa''s and 3 PE''s, I got Ac! :). I fixed the last algorithm to cross the matrix in spiral, this is much efficient, clear and better. :) DON''T FORGET, don''t print white spaces at the final(PE).:P ', 358, 32, '2009-06-01 08:19:36', '2009-06-01 09:02:22', 'Decoding.cpp', 'application/octet-stream', 3745, '2009-06-01 09:02:22'),
(663, 'Simulación', 376, 22, '2009-06-01 21:25:22', '2009-06-01 21:25:22', '10656.cpp', 'text/x-c++src', 520, '2009-06-01 21:25:22'),
(664, 'Simulation.', 375, 6, '2009-06-02 22:25:33', '2009-06-02 22:25:33', 'love.cpp', 'application/octet-stream', 1168, '2009-06-02 22:25:33'),
(665, 'Simplemente es imprimir la subsecuencia ignorando el mòdulo de la suma.', 376, 6, '2009-06-04 03:39:08', '2009-06-04 03:39:08', 'msum.cpp', 'application/octet-stream', 516, '2009-06-04 03:39:08'),
(666, 'In downward order, move on pancakes always putting the pancake in the top. Manipulate the sign and put in the correct position. Hence reduced the problem to N-1 pancakes recursively. My english suckssssssssssssssssss. Recorremos los pankekes en orden descendente desde el N-esimo pankeke y por cada uno lo ponemos en la primera posicion donde podemos manipular su signo a gusto de tal forma que al ponerlo en su posicion quede con el signo correcto. Luego de cambiar su signo ponemos en su posicion correcta. Por lo tanto reducimos el problema a N-1 pankekes cada vez', 359, 35, '2009-06-04 04:04:16', '2009-06-04 04:04:16', '3008.cpp', 'text/x-c++src', 2691, '2009-06-04 04:04:16'),
(667, 'String Manipulation', 374, 6, '2009-06-05 05:17:03', '2009-06-05 05:17:03', 'poet.cpp', 'application/octet-stream', 1059, '2009-06-05 05:17:03'),
(668, 'String Manipulation.', 373, 6, '2009-06-06 05:04:28', '2009-06-06 05:04:28', 'word.cpp', 'application/octet-stream', 467, '2009-06-06 05:04:28'),
(669, 'String Manipulation.', 372, 6, '2009-06-06 06:38:18', '2009-06-06 06:38:18', 'haiku.cpp', 'application/octet-stream', 805, '2009-06-06 06:38:18'),
(670, 'BigInteger', 371, 6, '2009-06-07 05:51:14', '2009-06-07 05:51:14', 'Main.java', 'application/octet-stream', 471, '2009-06-07 05:51:14'),
(671, 'Provincia Express Solution.\r\n\r\nJust realize that the ''A'' operation it''s a base 4 sum... Nothing fancy actually...', 311, 38, '2009-06-07 07:36:27', '2009-06-07 07:36:27', 'A.cpp', 'text/x-c++src', 3237, '2009-06-07 07:36:27'),
(672, 'Que rabia este problema. 3 presentation errors pq no explican el output sino que dicen ''mire el output de abajo'' y había líneas que uno se tenía que imaginar =S.\r\n<br><br>\r\nEl algoritmo es un BFS básico.', 377, 38, '2009-06-07 07:38:52', '2009-06-07 07:38:52', 'F.cpp', 'text/x-c++src', 2707, '2009-06-07 07:38:52'),
(673, 'El parser más rápido del mundo.', 378, 38, '2009-06-07 07:40:37', '2009-06-07 07:40:37', 'G.cpp', 'text/x-c++src', 2715, '2009-06-07 07:40:37'),
(674, 'Simulación. Solución de PE en el torneo.', 379, 38, '2009-06-07 07:41:37', '2009-06-07 07:41:37', 'I.cpp', 'text/x-c++src', 2073, '2009-06-07 07:41:37'),
(675, 'Nah! Pero con BigInteger no vale!', 371, 22, '2009-06-07 18:56:07', '2009-06-07 18:56:07', '424.cpp', 'text/x-c++src', 1614, '2009-06-07 18:56:07'),
(676, 'Simulation', 337, 6, '2009-06-07 19:07:27', '2009-06-07 19:07:27', 'mybad.cpp', 'application/octet-stream', 5228, '2009-06-07 19:07:27'),
(677, 'String sums.\r\n\r\nNote: with Java BigInteger I got ''Time limit exceeded'' ;)', 370, 6, '2009-06-07 19:39:11', '2009-06-07 19:39:11', 'sums.cpp', 'application/octet-stream', 955, '2009-06-07 19:39:11'),
(678, 'Simple string sum', 370, 22, '2009-06-07 19:49:08', '2009-06-07 19:49:08', '10013.cpp', 'text/x-c++src', 1115, '2009-06-07 19:49:08'),
(679, 'Now with arrays', 370, 22, '2009-06-07 19:49:22', '2009-06-07 19:49:22', 's.cc', 'text/x-c++src', 1384, '2009-06-07 19:49:22'),
(680, 'String Manipulation.', 118, 6, '2009-06-07 23:36:23', '2009-06-07 23:36:23', 'sound.cpp', 'application/octet-stream', 942, '2009-06-07 23:36:23'),
(681, 'Simulation.', 173, 6, '2009-06-08 01:15:48', '2009-06-08 01:15:48', 'Time.cpp', 'application/octet-stream', 421, '2009-06-08 01:15:48'),
(682, 'Search with special order and memorization. ', 362, 35, '2009-06-08 02:05:30', '2009-06-08 02:06:08', '3011.cc', 'text/x-c++src', 3514, '2009-06-08 02:05:30'),
(683, 'String Manipulation', 251, 6, '2009-06-08 04:13:45', '2009-06-08 04:13:45', 'waldorf.cpp', 'application/octet-stream', 3871, '2009-06-08 04:13:45'),
(684, 'DFS. You can''t use maps to represent the graph. That won''t get through the time limit. <br><br>\r\nOnly print each relation once.', 380, 22, '2009-06-08 04:31:50', '2009-06-08 04:31:50', '1589.cpp', 'text/x-c++src', 1252, '2009-06-08 04:31:50'),
(685, 'Trivial solution, only have carefully', 311, 35, '2009-06-08 04:54:13', '2009-06-08 04:54:13', '1556.cc', 'text/x-c++src', 2973, '2009-06-08 04:54:13'),
(686, 'Basic Geometry, but have carefully with division.', 38, 35, '2009-06-08 06:28:17', '2009-06-08 06:28:17', '1567.cc', 'text/x-c++src', 1914, '2009-06-08 06:28:17'),
(687, 'Floyd-Warshall implementation.', 377, 53, '2009-06-08 18:45:09', '2009-06-08 18:45:09', '1572.cpp', 'application/octet-stream', 1681, '2009-06-08 18:45:09'),
(688, 'D = max deep of the brackets.<br/>\r\nResult = 2^D', 360, 53, '2009-06-08 19:00:43', '2009-06-08 19:01:16', 'monkey.cpp', 'application/octet-stream', 738, '2009-06-08 19:00:43'),
(689, '<b>Input:</b> Parse the pancakes order and theirs states (''+''=1, ''-''=0).<br/>\r\n<b>Process:</b> S = {}<br/>\r\nStart flipping from the Nth-pancake to the second-pancake, do:<br/>\r\np = actual position of the ith-pancake<br/>\r\nIf the ith-pancake is 0-state then do S += {p, 1, i}.<br/>\r\nElse if the ith-pancake is NOT in the correct position then do S += { p, i }<br/>\r\nElse do nothing.<br/>\r\nDo state correction to first p-pancakes and first i-pancakes<br/>\r\n<br/>\r\nAfter, If the first-pancake is 0-state the do S += {1}<br/><br/>\r\n<b>Output:</b> print S.', 359, 53, '2009-06-08 19:18:10', '2009-06-10 07:45:17', '3008.cpp', 'application/octet-stream', 1807, '2009-06-08 19:18:10'),
(690, '<b>AC</b> without precision correction. But, It is not recommended.', 364, 53, '2009-06-08 19:25:32', '2009-06-08 19:25:32', 'pizza.cpp', 'application/octet-stream', 737, '2009-06-08 19:25:32'),
(691, 'It''s <b>Dynamic Programming</b><br/>\r\nSame like "Hansen Gonzalez." but C-like code.<br/>', 368, 53, '2009-06-08 19:37:57', '2009-06-08 19:37:57', 'dorado.cpp', 'application/octet-stream', 1019, '2009-06-08 19:37:57'),
(692, 'Just do a <b>floodfill</b> algorithm.<br/>\r\nC-like code.', 18, 53, '2009-06-08 19:43:07', '2009-06-08 19:43:07', 'bitmap.cpp', 'application/octet-stream', 1511, '2009-06-08 19:43:07'),
(693, '<b>DP</b> implementation of <a href="http://es.wikipedia.org/wiki/Coeficiente_binomial">binomial coeff</a> <b>C(n,k)</b>.<br/>\r\nWith n-marbles and k-colors the possibilities are <b>C(n-1,n-k)</b>.', 381, 53, '2009-06-08 19:57:00', '2009-06-08 19:57:00', 'marbles.cpp', 'application/octet-stream', 1088, '2009-06-08 19:57:00'),
(694, 'Same idea but using <b>Atkin''s Sieve</b> instead of <b>Eratosthenes'' Sieve</b>.', 17, 53, '2009-06-08 20:02:43', '2009-06-08 20:02:43', 'prime1.cpp', 'application/octet-stream', 1596, '2009-06-08 20:02:43'),
(695, 'A basic <a href="http://www.topcoder.com/tc?module=Static&d1=tutorials&d2=binaryIndexedTrees#2d">2D Binary Indexed Tree</a> implementation.<br/>', 382, 53, '2009-06-08 20:07:24', '2009-06-08 20:08:29', '2409988-src.cpp', 'application/octet-stream', 1297, '2009-06-08 20:08:29'),
(696, 'A harder <a href="http://www.topcoder.com/tc?module=Static&d1=tutorials&d2=binaryIndexedTrees">Binary Indexed Tree</a> implementation.<br/>\r\nA proper explanation is debt, I''ll do it later.<br/>', 383, 53, '2009-06-08 20:13:22', '2009-06-08 20:13:22', '2434834-src.cpp', 'application/octet-stream', 2396, '2009-06-08 20:13:22'),
(697, 'An easy <b>Dijkstra''s Shortest Path</b> modification.<br/>', 384, 53, '2009-06-08 20:18:37', '2009-06-08 20:18:37', '2424249-src.cpp', 'application/octet-stream', 1438, '2009-06-08 20:18:37'),
(698, 'Same idea.', 365, 53, '2009-06-08 20:19:45', '2009-06-08 20:19:45', 'keyboard.cpp', 'application/octet-stream', 1748, '2009-06-08 20:19:45'),
(699, '<b>Parser</b>.<br/>', 378, 53, '2009-06-08 21:16:46', '2009-06-08 21:16:46', '1573.cpp', 'application/octet-stream', 1634, '2009-06-08 21:16:46'),
(700, 'Dijkstra Modification', 384, 6, '2009-06-09 02:23:41', '2009-06-09 02:23:41', 'chicago.cpp', 'application/octet-stream', 1375, '2009-06-09 02:23:41'),
(701, 'This algorithm used an offset variable to change the cars positions on the belt.<br/>\r\nRuns in <i>O</i>(number of cars).', 379, 53, '2009-06-10 07:52:57', '2009-06-10 07:52:57', '3037.cpp', 'application/octet-stream', 809, '2009-06-10 07:52:57'),
(702, 'Overrided sorting comparator with the Manhattan distance.', 385, 53, '2009-06-10 08:03:52', '2009-06-10 08:03:52', '2322.cpp', 'application/octet-stream', 1609, '2009-06-10 08:03:52'),
(703, 'Easy problem just do a function to map each position (i,j) of the ''A'' matrix to (x,y)''s coordinates of your drawing space then draw a cube starting from there.<br/>', 386, 53, '2009-06-10 08:09:28', '2009-06-10 08:09:28', '2323.cpp', 'application/octet-stream', 1970, '2009-06-10 08:09:28'),
(704, 'A <b>BFS</b> with a bitwise approach to handle the states.<br/>\r\nMy apologise for the cycles'' abnormal termination (break statements) but I was too lazy to change the cycles headers.<br/>', 387, 53, '2009-06-10 08:12:59', '2009-06-10 08:17:52', '2324.cpp', 'application/octet-stream', 2128, '2009-06-10 08:17:52'),
(705, '"Read problem statement."', 388, 53, '2009-06-10 08:25:43', '2009-06-10 08:25:43', '2327.cpp', 'application/octet-stream', 905, '2009-06-10 08:25:43'),
(706, 'Floyd Warshall Modification', 384, 22, '2009-06-11 03:42:20', '2009-06-11 03:42:20', '381.cpp', 'text/x-c++src', 677, '2009-06-11 03:42:20'),
(707, 'Dynamic Programming.', 391, 53, '2009-06-11 08:28:44', '2009-06-11 08:34:26', '1808.cpp', 'application/octet-stream', 1727, '2009-06-11 08:34:26'),
(708, 'Simulation.', 389, 53, '2009-06-11 08:30:40', '2009-06-11 08:30:40', '1801.cpp', 'application/octet-stream', 2532, '2009-06-11 08:30:40'),
(709, '=P', 390, 53, '2009-06-11 08:35:47', '2009-06-11 08:35:47', '1805.cpp', 'application/octet-stream', 809, '2009-06-11 08:35:47'),
(710, 'Bueno, y ya que Daniel me regañó pq mi solución no pasa si se pudieran poner 10mil nodos, entonces aquí está mi sol con Dijkstra...', 384, 22, '2009-06-11 18:46:02', '2009-06-11 18:46:02', 'dij.cpp', 'text/x-c++src', 2147, '2009-06-11 18:46:02'),
(711, 'Euclidean = PI*R*R<br/>\r\nTaxicab = 2*R*R', 285, 53, '2009-06-12 07:36:01', '2009-06-12 07:36:01', '2945.cpp', 'application/octet-stream', 226, '2009-06-12 07:36:01'),
(712, 'Just print!, no more.', 288, 53, '2009-06-12 07:38:48', '2009-06-12 07:38:48', '2946.cpp', 'application/octet-stream', 1420, '2009-06-12 07:38:48'),
(713, 'BFS:<br/>\r\nIn every step for each flood boundary cell (in the current-floods-queue)  update the adjacent cells and add them to the next-floods-queue.<br/>\r\nThen try to move each available painter (in the current-painters-queue) and add them to the next-painters-queue.<br/>\r\nRepeat this until you get the target.', 392, 53, '2009-06-12 07:48:15', '2009-06-12 07:50:05', '2947.cpp', 'application/octet-stream', 2332, '2009-06-12 07:48:15'),
(714, 'Testing the 2^9 possible cases using bitwise approach.<br/>', 393, 53, '2009-06-12 07:52:33', '2009-06-12 07:52:33', '2950.cpp', 'application/octet-stream', 1061, '2009-06-12 07:52:33'),
(715, 'Basic math.', 394, 53, '2009-06-12 07:54:28', '2009-06-12 07:54:28', '2951.cpp', 'application/octet-stream', 1129, '2009-06-12 07:54:28'),
(716, 'Find the missing coordinates with frequency less than 2.', 395, 53, '2009-06-12 07:56:45', '2009-06-12 07:56:45', '2955.cpp', 'application/octet-stream', 1191, '2009-06-12 07:56:45'),
(717, 'Dijkstra.', 396, 27, '2009-06-13 00:27:36', '2009-06-13 00:27:36', '2819.cpp', 'text/x-c++src', 1626, '2009-06-13 00:27:36'),
(718, 'Dijkstra', 396, 22, '2009-06-13 01:18:11', '2009-06-13 01:18:11', 'travel.cpp', 'text/x-c++src', 2137, '2009-06-13 01:18:11'),
(719, 'Dijkstra''s Shortest Path.', 396, 53, '2009-06-13 01:42:26', '2009-06-13 01:42:26', '2819.cpp', 'application/octet-stream', 1705, '2009-06-13 01:42:26'),
(720, 'Simulation (I think).', 397, 53, '2009-06-13 01:48:25', '2009-06-13 01:48:25', '2818.cpp', 'application/octet-stream', 968, '2009-06-13 01:48:25'),
(721, 'Same idea, another way.', 397, 53, '2009-06-13 02:00:06', '2009-06-13 02:00:06', '2818.cpp', 'application/octet-stream', 436, '2009-06-13 02:00:06'),
(722, 'Simulation.', 398, 53, '2009-06-13 02:02:35', '2009-06-13 02:02:35', '2805.cpp', 'application/octet-stream', 774, '2009-06-13 02:02:35'),
(723, 'Math.', 399, 53, '2009-06-13 02:04:45', '2009-06-13 02:04:45', '2803.cpp', 'application/octet-stream', 767, '2009-06-13 02:04:45'),
(724, 'Flood Fill + BFS', 392, 27, '2009-06-14 00:16:18', '2009-06-14 00:16:18', '2947.cpp', 'text/x-c++src', 2366, '2009-06-14 00:16:18'),
(725, 'DFS??', 286, 27, '2009-06-14 07:01:00', '2009-06-14 07:01:00', '2637.cpp', 'text/x-c++src', 905, '2009-06-14 07:01:00'),
(726, 'Same idea: "How many times can you divide a number by 2?."', 325, 53, '2009-06-14 07:49:25', '2009-06-14 07:49:25', '1476.cpp', 'application/octet-stream', 297, '2009-06-14 07:49:25'),
(727, 'Perform an AND operation to get bit''s states.', 400, 53, '2009-06-14 07:54:03', '2009-06-14 07:54:03', '1477.cpp', 'application/octet-stream', 431, '2009-06-14 07:54:03'),
(728, 'Validate Round Table Date and find the year of this date in the Classic Period.<br/>\r\nThen process all dates between the year calculated above and year 1439999 (date 9.19.19.17.19) with steps of 18980 (LCM of 260 and 365).<br/>', 402, 53, '2009-06-14 08:04:26', '2009-06-14 08:06:24', '1480.cpp', 'application/octet-stream', 1975, '2009-06-14 08:04:26'),
(729, 'Flood-Fill.', 286, 53, '2009-06-14 10:24:52', '2009-06-14 10:24:52', '2637.cpp', 'application/octet-stream', 1096, '2009-06-14 10:24:52'),
(730, 'Matando el aburrimiento...', 363, 53, '2009-06-14 14:29:44', '2009-06-14 14:29:44', '3012.cpp', 'application/octet-stream', 3687, '2009-06-14 14:29:44'),
(731, 'las abejas hembras en un momento dado seran igual en cantidad a la cantidad de abejas macho que habian anteriormente; machos en este mismo instante seran igual a la cantidad de abejas hembras y machos que habian anteriormente mas 1, pues la abeja madre ninca muere y siempre aportara un macho\r\n\r\nEs asi de sencillo\r\n\r\n', 35, 56, '2009-06-15 02:37:51', '2009-06-15 02:37:51', 'bee.java', 'text/x-java', 462, '2009-06-15 02:37:51'),
(732, 'BFS - Top 20 - :)', 403, 27, '2009-06-15 19:03:50', '2009-06-15 19:03:50', '924.cpp', 'text/x-c++src', 1273, '2009-06-15 19:03:50'),
(733, 'BFS is my best friend. :D', 274, 27, '2009-06-16 05:44:26', '2009-06-16 05:44:26', '1915.cpp', 'text/x-c++src', 1360, '2009-06-16 05:44:26'),
(734, 'Simple Simulation.', 404, 27, '2009-06-17 00:42:31', '2009-06-17 00:42:31', '1571.cpp', 'text/x-c++src', 938, '2009-06-17 00:42:31'),
(735, 'BFS. Cada nodo debe estar compuesto por i,j,dir. Utilizo priority_queue para sacar el nodo con menor distancia.', 85, 6, '2009-06-17 05:34:25', '2009-06-17 05:34:25', 'lphone.cpp', 'application/octet-stream', 2589, '2009-06-17 05:34:25'),
(736, 'Una simple conversión a forma general o implícita de la ecuación de la recta\r\n\r\n<center><b>AX + BY +C = 0</b></center>\r\n\r\nEspero les sirva.', 38, 55, '2009-06-17 06:27:18', '2009-06-18 18:05:16', 'Intersecting.java', 'application/octet-stream', 3110, '2009-06-18 18:05:16'),
(737, 'Teoria de Numeros', 404, 6, '2009-06-17 16:19:48', '2009-06-17 16:19:48', 'per.cpp', 'application/octet-stream', 590, '2009-06-17 16:19:48'),
(738, 'BFS', 403, 6, '2009-06-18 01:53:22', '2009-06-18 01:53:22', 'news.cpp', 'application/octet-stream', 1399, '2009-06-18 01:53:22'),
(739, 'String Manipulation.', 405, 6, '2009-06-18 02:29:09', '2009-06-18 02:29:09', 'SimpleWordGame.cpp', 'application/octet-stream', 611, '2009-06-18 02:29:09'),
(740, 'Teoria de Números.', 406, 6, '2009-06-18 02:33:30', '2009-06-18 02:33:30', 'Underprimes.cpp', 'application/octet-stream', 928, '2009-06-18 02:33:30'),
(741, 'Simple String', 405, 22, '2009-06-18 02:44:06', '2009-06-18 02:44:06', 'SimpleWordGame.cc', 'text/x-c++src', 1029, '2009-06-18 02:44:06'),
(742, 'Prime Factorization and Sieve', 406, 22, '2009-06-18 02:45:42', '2009-06-18 02:45:42', 'Underprimes.cc', 'text/x-c++src', 1539, '2009-06-18 02:45:42'),
(743, 'dp[i][j] = La torre más alta que podemos formar con i ladrillos (no se tienen que usar todos desde 0...i) donde la diferencia entre la más grande y la más pequeña es de j.\r\n\r\nTener en cuenta las 3 condiciones que debemos evaluar.\r\n\r\n1. Decidimos no utilizar el ladrillo i.\r\n2. Decidimos utilizar el ladrillo i en la torre más alta.\r\n3. Decidimos utilizar el ladrillo i en la torre más pequeña\r\n\r\nSe utiliza un dp de 2x5000001 porque realmente nos interesan el esttado anterior de las torres y al que iremos. Por lo tanto no necesitamos 50x500001', 407, 6, '2009-06-20 06:02:15', '2009-06-20 06:02:15', 'EqualTowers.cpp', 'application/octet-stream', 1439, '2009-06-20 06:02:15'),
(744, 'Simulation.', 408, 6, '2009-06-20 21:16:24', '2009-06-20 21:16:24', 'hay.cpp', 'application/octet-stream', 367, '2009-06-20 21:16:24'),
(745, 'Simulation.', 409, 6, '2009-06-20 21:17:53', '2009-06-20 21:17:53', 'depth.cpp', 'application/octet-stream', 814, '2009-06-20 21:17:53'),
(746, 'Simulation.', 410, 6, '2009-06-20 21:19:29', '2009-06-20 21:19:29', 'cow.cpp', 'application/octet-stream', 473, '2009-06-20 21:19:29'),
(747, 'DP[i] = # de formas para devolver i cantidad de dinero.', 411, 6, '2009-06-20 21:21:43', '2009-06-20 21:21:43', 'queen.cpp', 'application/octet-stream', 476, '2009-06-20 21:21:43'),
(748, 'Math. T = sum(sqrt(do...dn-1))/sqrt(0.5*g)', 412, 6, '2009-06-21 07:09:12', '2009-06-21 07:09:12', 'IncredibleMachineEasy.cpp', 'application/octet-stream', 932, '2009-06-21 07:09:12'),
(749, 'Problema de geometría. Hice soluciones particulares para los ángulos cuadrantales.\r\nLos demas ángulos los tire siempre a traingulos congruentes en el intervalo -Pi/2, Pi/2, pero debe ser de esta manera, primer cuadrante +, segundo -, tercero + y 4 -.', 413, 20, '2009-06-22 19:28:02', '2009-06-22 19:28:02', '1493_-_Hansel_and_Gretel.cpp', 'text/plain', 1464, '2009-06-22 19:28:02'),
(750, 'Just brute force through all the tiles checking if they do not overlap and are inside the floor.', 414, 20, '2009-06-22 19:32:29', '2009-06-22 19:32:50', '1498_-_Tiles.cpp', 'text/plain', 1685, '2009-06-22 19:32:50'),
(751, 'Precalculate the number of digit primes so dprimes[i] would be the number of digit primes from 0 to i (i included), then the answer would be primes[top] - primes[bottom], and if the lower bound is also a digit prime add 1.', 332, 20, '2009-06-23 20:32:25', '2009-06-23 20:33:54', '10533_-_Digit_Primes.cpp', 'text/plain', 1000, '2009-06-23 20:33:54'),
(752, 'En realidad el problema es fácil. No importa cuanta distancia recorra desde que no cruce un círculo que no TENGO que cruzar. Entonces es mirar cuales TENGO que cruzar. <br><br>\r\nLos que tengo que cruzar son todos esos que me rodean completamente y que NO rodean el punto a donde voy... una especie de inclusión-exclusión sólo que no es A + B - AB sino A + B - 2*AB donde A y B son los círculos que rodean al primer y segundo punto respectivamente...', 415, 22, '2009-06-24 03:42:18', '2009-06-24 03:42:18', 'mid.cpp', 'text/x-c', 1080, '2009-06-24 03:42:18'),
(753, 'Memoization ', 228, 35, '2009-06-25 02:52:18', '2009-06-25 02:52:18', '2009.cpp', 'text/x-c++src', 2031, '2009-06-25 02:52:18'),
(754, 'Para cada circulo C verificamos si un punto esta dentro y el otro fuera o viceversa, de ser asi incrementamos el numero de bordes', 415, 12, '2009-06-25 16:51:37', '2009-06-25 16:51:37', 'CirclesCountry.cpp', 'application/octet-stream', 609, '2009-06-25 16:51:37'),
(755, 'I think Top-Down DP.', 228, 53, '2009-06-25 22:29:28', '2009-06-25 22:32:35', '2009.cpp', 'application/octet-stream', 1281, '2009-06-25 22:32:35'),
(756, 'DFS', 416, 22, '2009-06-26 03:31:47', '2009-06-26 03:31:47', 'friends.cpp', 'text/x-c', 956, '2009-06-26 03:31:47'),
(757, 'Just mark mines as visited paths and look for the shortest path using BFS :-)', 195, 22, '2009-06-26 04:37:33', '2009-06-26 04:37:33', 'bombs.cpp', 'text/x-c', 1755, '2009-06-26 04:37:33'),
(758, 'BFS contando cuantas personas escuchan la noticia el día i...', 403, 22, '2009-06-26 05:28:29', '2009-06-26 05:28:29', 'news.cpp', 'text/x-c', 1394, '2009-06-26 05:28:29'),
(759, 'Simulation', 417, 6, '2009-06-27 15:58:59', '2009-06-27 15:58:59', 'SoccerLeagues.cpp', 'application/octet-stream', 1151, '2009-06-27 15:58:59'),
(760, 'Math', 415, 6, '2009-06-27 16:02:09', '2009-06-27 16:02:09', 'CirclesCountry.cpp', 'application/octet-stream', 1130, '2009-06-27 16:02:09'),
(761, 'DP[i][j][k] = número de formas que puedo armar un convex con las condiciones dadas usando exactamente k segmentos entre 0..i donde la suma de los segmentos seleccionados es j.\r\n\r\nHay dos optimizaciones para este problema. 1. i solo necesita tener 2 estados ya que solo necesitamos el estado anterior donde e usado de 0...i-1 de los segmentos.\r\n2. teniendo encuenta las restricciones del problema no vale la pena almacenar la suma de los segmentos seleccionados > 50000 dado que el maximo segmento es de 50000.', 418, 6, '2009-06-28 03:51:07', '2009-06-28 03:51:07', 'Polygons2.cpp', 'application/octet-stream', 1700, '2009-06-28 03:51:07'),
(762, 'Uno de los más fáciles de 250 =/', 417, 22, '2009-06-29 02:14:52', '2009-06-29 02:14:52', 'soccer.cpp', 'text/x-c', 866, '2009-06-29 02:14:52');
INSERT INTO `solutions` (`id`, `explanation`, `problem_id`, `user_id`, `created_at`, `updated_at`, `source_code_file_name`, `source_code_content_type`, `source_code_file_size`, `source_code_updated_at`) VALUES
(763, 'Math', 412, 22, '2009-06-29 02:26:41', '2009-06-29 02:26:41', 'Simple.cpp', 'text/x-c', 881, '2009-06-29 02:26:41'),
(764, 'Floyds Warshall Algorithm. Tengo que determinar que si g[i][i] > 1. Es decir, si pasando por un(unos) nodo(s) K puedo hacer que con 1 peso compro más de 1 peso...', 419, 22, '2009-06-30 02:24:15', '2009-06-30 02:24:15', 'arbitrage.cpp', 'text/x-c++src', 1201, '2009-06-30 02:24:15'),
(765, '""', 343, 37, '2009-07-01 01:20:13', '2009-07-01 01:20:13', 'Main.java', 'application/octet-stream', 1481, '2009-07-01 01:20:13'),
(766, 'Generate all lines with slope and point of cut, sort all segments and count with the most repetitions', 420, 35, '2009-07-01 02:51:52', '2009-07-01 02:51:52', '2008.cc', 'text/x-c++src', 2295, '2009-07-01 02:51:52'),
(767, 'Just Merge Sort', 331, 45, '2009-07-03 23:25:14', '2009-07-03 23:25:14', '10810_-_Ultra_Quicksort.cpp', 'text/x-c++src', 1101, '2009-07-03 23:25:14'),
(768, 'Leo los números, y calculo la suma de BigInts', 370, 45, '2009-07-04 22:22:19', '2009-07-04 22:22:19', '10013_-_Super_long_sums.cpp', 'text/x-c++src', 927, '2009-07-04 22:22:19'),
(769, 'Simulación', 140, 45, '2009-07-04 22:24:53', '2009-07-04 22:24:53', '10018_-_Reverse_and_add.cpp', 'text/x-c++src', 575, '2009-07-04 22:24:53'),
(770, 'Simulation', 322, 45, '2009-07-04 22:42:57', '2009-07-04 22:42:57', '10189_-_Minesweepher.cpp', 'text/x-c++src', 1545, '2009-07-04 22:42:57'),
(771, 'Haciendo las conversiones al método clásico...', 147, 45, '2009-07-04 22:56:56', '2009-07-04 22:56:56', '10473_-_Simple_base_conversion.cpp', 'text/x-c++src', 1661, '2009-07-04 22:56:56'),
(772, 'Igual al anterior', 332, 45, '2009-07-04 22:58:15', '2009-07-04 22:58:15', '10533.cpp', 'text/x-c++src', 1000, '2009-07-04 22:58:15'),
(773, 'Simplemente ignorar los ceros', 376, 45, '2009-07-04 23:02:42', '2009-07-04 23:02:42', '10656_-_Maximum_Sum_II_.cpp', 'text/x-c++src', 687, '2009-07-04 23:02:42'),
(774, 'Simulación', 129, 45, '2009-07-04 23:07:31', '2009-07-04 23:07:31', '10924_-_Prime_Words.cpp', 'text/x-c++src', 800, '2009-07-04 23:07:31'),
(775, 'La misma idea', 139, 45, '2009-07-04 23:08:56', '2009-07-04 23:08:56', '10929_-_You_can_say_11.cpp', 'text/x-c++src', 842, '2009-07-04 23:08:56'),
(776, 'uno más con logaritmos', 105, 45, '2009-07-04 23:18:21', '2009-07-04 23:18:21', '113_-_Power_of_Cryptography.c', 'text/x-csrc', 237, '2009-07-04 23:18:21'),
(777, 'conteo con fuerza bruta', 117, 45, '2009-07-04 23:46:32', '2009-07-04 23:46:32', '294_-_Divisors.cpp', 'text/x-c++src', 720, '2009-07-04 23:46:32'),
(778, 'ordenamiento', 5, 45, '2009-07-04 23:47:17', '2009-07-04 23:47:17', '299_-_Train_swapping.cpp', 'text/x-c++src', 640, '2009-07-04 23:47:17'),
(779, 'la misma idea', 146, 45, '2009-07-04 23:49:57', '2009-07-04 23:49:57', '343_-_What_base_is_this.java', 'text/x-java', 2030, '2009-07-04 23:49:57'),
(780, 'calmanejo de puntos de interseccion, con la ecuación general de rectas', 38, 45, '2009-07-04 23:51:34', '2009-07-04 23:51:34', '378_-_Intersecting_lines.c', 'text/x-csrc', 925, '2009-07-04 23:51:34'),
(781, 'teoría de números', 404, 45, '2009-07-05 00:04:20', '2009-07-05 00:04:20', '382_-_Perfection.cpp', 'text/x-c++src', 710, '2009-07-05 00:04:20'),
(782, 'utilizo un vector de primos, y muestro lo q se pide, creo q me compliqué demasiado :(', 121, 45, '2009-07-05 00:07:24', '2009-07-05 00:07:24', '406_-_Prime_Cuts.cpp', 'text/x-c++src', 1480, '2009-07-05 00:07:24'),
(783, 'Sumas de números grandes', 371, 45, '2009-07-05 00:16:54', '2009-07-05 00:16:54', '424_-_Integer_Inquiry.cpp', 'text/x-c++src', 1038, '2009-07-05 00:16:54'),
(784, 'manejo de cadenas', 373, 45, '2009-07-05 00:17:45', '2009-07-05 00:17:45', '483_-_Word_Scramble.cpp', 'text/x-c++src', 752, '2009-07-05 00:17:45'),
(785, 'La idea es la misma q el anterior', 349, 45, '2009-07-05 00:34:00', '2009-07-05 00:34:00', '495_-_Fibonacci_freeze.cpp', 'text/x-c++src', 1119, '2009-07-05 00:34:00'),
(786, 'ups, está igual al anterior', 136, 45, '2009-07-05 01:20:21', '2009-07-05 01:20:21', '543_-_Goldbach_s_Conjecture.cpp', 'text/x-c++src', 672, '2009-07-05 01:20:21'),
(787, 'Descomposición, usando un vector de primos', 119, 45, '2009-07-05 02:16:27', '2009-07-05 02:16:27', '583_-_Prime_factors.cpp', 'text/x-c++src', 1128, '2009-07-05 02:16:27'),
(788, 'Simulación de lo q nos dice el problema', 135, 45, '2009-07-05 02:17:58', '2009-07-05 02:17:58', '686_-_Goldbach_s_Conjecture_II_.cpp', 'text/x-c++src', 1042, '2009-07-05 02:17:58'),
(789, 'The idea is that prime numbers have a perfection level of 0, so any number that is the multiplication of four prime numbers has a perfection level of 1, a number that is the multiplication 16 prime numbers has a perfection level of 2, etc.<br/>\r\nSo the perfection level of a number would be floor(log4(numberOfPrimeFactors)).', 421, 20, '2009-07-08 15:59:49', '2009-07-08 16:05:43', 'perfectionLevel.cpp', 'text/plain', 326, '2009-07-08 16:05:43'),
(790, 'The log solution.<br><br>\r\nlog4 (x) = ln(x) / ln(4)', 421, 22, '2009-07-08 16:22:12', '2009-07-08 16:23:02', 'NumericalPerfectionLevel.cpp', 'text/plain', 1001, '2009-07-08 16:23:02'),
(791, 'la idea es la misma, pero uso Prim(para variar)', 352, 45, '2009-07-22 21:02:35', '2009-07-22 21:02:35', '10034_-_Freckles.cpp', 'text/plain', 1272, '2009-07-22 21:02:35'),
(792, 'La raiz cubica de un numero se puede ver como una funcion x^3-k=0 donde x es la raiz de k, ahora el problema plantea que se necesitan 10 cifras decimales por lo que abs(x^3-k)<10^-10, utilizando el metodo de Newton-Raphson se puede aproximar la raiz de k rapidamente sin lugar a excesos de tiempo.', 263, 37, '2009-07-29 02:52:04', '2009-07-29 02:52:04', 'code.java', 'text/x-java-source', 808, '2009-07-29 02:52:04'),
(793, 'Se utilizan dos matrices M y N para guardar el maximo movimiento hacia la derecha (N) y hacia abajo (M). Una vez calculadas todas las posiciones de las matrices se prueban cuales tinen el area maxima, bastara con revisar el lado mas corto x o y; En el peor de los casos tiene costo O(n^3)', 262, 37, '2009-07-29 03:04:05', '2009-07-29 03:18:40', 'city.java', 'text/x-java-source', 841, '2009-07-29 03:18:40'),
(794, 'El trabajo mamerto lo hace BigDecimal...', 344, 37, '2009-07-29 03:11:39', '2009-07-29 03:11:39', 'olympia.java', 'text/x-java-source', 1157, '2009-07-29 03:11:39'),
(795, 'En java el problema resulta simplemente aritmetico...', 371, 37, '2009-07-29 03:17:17', '2009-07-29 03:17:17', 'IntegerInquiry.java', 'text/x-java-source', 526, '2009-07-29 03:17:17'),
(796, 'Ad hoc', 344, 16, '2009-07-29 20:09:51', '2009-07-29 20:09:51', 'LA4084.cpp', 'text/x-c++src', 339, '2009-07-29 20:09:51'),
(797, 'We try to find every biconnected component in the graph, for each biconnected component, if it has odd circle then all the vertexes of it are inside at least one odd circle.\r\n<BR />\r\nWe use tarjan algorithm to find every biconnected component and DFS or BFS to mark them for odd circles.\r\n<BR />\r\nBecause recursive DFS may cause stack overflow, so I wrote a non-recursive version.', 58, 65, '2009-08-17 07:53:34', '2009-08-17 08:01:12', 'D.cpp', 'application/octet-stream', 4010, '2009-08-17 07:53:34'),
(798, 'Hacer lo que pide el porgrama, si es n primo entonces n = n/2 sino n = 3n-1 pero hay que tener en cuenta que se puede guardar las soluciones en un vector para futuras soluciones y asi minimizar el tiempo, ambienhay que fijarse su a > b o b > a en el caso de las entradas.', 423, 64, '2009-08-18 00:43:51', '2009-08-18 00:43:51', 'Problema1.java', 'application/octet-stream', 2012, '2009-08-18 00:43:51'),
(799, '#include<stdio.h>\r\n#include<stdlib.h>\r\n\r\nint main()\r\n{\r\n  int i,cases,n;\r\n  long long sum=0;\r\n  //scanf("%d ",&cases);\r\n  while(1){\r\n     scanf("%d",&n);\r\n     if(n==0) break;\r\n     sum=0;\r\n     for(i=0;i<n;i++)\r\n      {\r\n       sum+=(i+1)*(i+1);\r\n      }\r\n      printf("%lld\\n",sum);\r\n  }\r\n\r\nreturn 0;\r\n}\r\n\r\n', 68, 66, '2009-08-22 12:30:55', '2009-08-22 12:30:55', 'feynman.c', 'text/plain', 288, '2009-08-22 12:30:55'),
(800, '//spoj AC', 19, 66, '2009-08-22 12:34:50', '2009-08-22 12:34:50', 'hang.c', 'text/plain', 234, '2009-08-22 12:34:50'),
(801, 'A small floyds warshall modification.', 424, 22, '2009-08-28 17:37:31', '2009-08-28 17:37:31', 'B.cpp', 'text/x-c++src', 2553, '2009-08-28 17:37:31'),
(802, 'Minimal enclosing circle O(n) =).<br/>\r\nThis is based on Emo Welzl algorithm.<br/>\r\n<a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1450">Smallest Enclosing Disks</a>', 297, 20, '2009-08-28 20:13:49', '2009-08-28 20:15:48', 'minimal_circle.cpp', 'application/octet-stream', 3286, '2009-08-28 20:15:48'),
(804, 'Backtracking', 295, 6, '2009-08-30 06:10:07', '2009-08-30 06:10:07', 'match2.cpp', 'application/octet-stream', 3868, '2009-08-30 06:10:07'),
(805, 'Very nice problem!\r\n<br /><br />\r\nThe basic idea is dynamic programming, with state &lt;m, f, c, r&gt; where m stands for the number of males who haven''t been assigned a room, f is the same but for females, c is the same but for couples and r is the number of rooms that we have used so far.\r\n<br /><br />\r\nThis will time out, though, since it''s O(n^4) with n = 500. The nice idea is to notice that in any perfect assignation of rooms, at most one room will have a couple (Think about it, it''s awesome!). This means that c can be either 0 or 1, reducing the number of states from 500^4 to 2 * 500^3.\r\n<br /><br />\r\nBe careful! My recursive solution timed out and I had to implement this iterative version, which was actually very tricky.', 425, 1, '2009-08-30 23:15:25', '2009-08-30 23:18:42', '2901.2.cpp', 'text/x-c++src', 2266, '2009-08-30 23:15:25'),
(806, 'Since the maximum numbers of cities is only 10, I''ve could use Djikstra or event a brute force search, but I prefer to use Floyd-Warshall for practicing and because it is easier to code. :) ', 426, 27, '2009-08-31 05:53:16', '2009-08-31 05:53:16', '341.cpp', 'text/x-c++src', 1392, '2009-08-31 05:53:16'),
(807, 'Really nice problem. If the script i requires script j and also script k, I have to check if script k requires j... if K does require J, I don''t have to import J in the script i. <br><br>\r\n\r\nIt is a small modification to the Floyds Warshall Transitive Hull', 427, 22, '2009-08-31 16:16:16', '2009-08-31 16:16:16', 'importList.cpp', 'text/x-c', 931, '2009-08-31 16:16:16'),
(808, 'My First DP, using Top-Down Method, dp[0][0] stores the numbers of valid paths for going from (0,0) to (n,n).', 190, 27, '2009-09-01 01:38:04', '2009-09-01 01:38:04', '2704.cpp', 'text/x-c++src', 913, '2009-09-01 01:38:04'),
(809, 'Simulation of a bookshelf using a vector.', 428, 27, '2009-09-01 02:00:01', '2009-09-01 02:00:01', '1885.cpp', 'text/x-c++src', 1037, '2009-09-01 02:00:01'),
(810, 'Un problema simple pero me pareció muy chimba, lo hice con una funcioncilla recursivilla pero realmente creo que hay forma de hacerlo con una fórmula... ', 429, 22, '2009-09-04 03:04:45', '2009-09-04 03:04:45', 'ftree.cpp', 'text/x-c++src', 1640, '2009-09-04 03:04:45'),
(811, 'Mierda, no sabía que podía poner el %2d y me puse a hacer un stringstream :-P...\r\n<br><br>\r\nFloyds Warshall', 26, 22, '2009-09-04 04:20:14', '2009-09-04 04:20:14', 'risk.cpp', 'text/x-c++src', 1426, '2009-09-04 04:20:14'),
(812, 'Just translate the pattern to a valid Regex.', 430, 41, '2009-09-04 13:17:08', '2009-09-04 13:17:08', 'AlienLanguage.java', 'application/octet-stream', 1610, '2009-09-04 13:17:08'),
(813, 'A bit more efficient than to use regex.\r\nComplexity O(L * D * C)', 430, 16, '2009-09-04 18:18:52', '2009-09-04 18:18:52', 'AlienLanguage.java', 'text/x-java', 1235, '2009-09-04 18:18:52'),
(814, 'BFS. Same as the one that is already here but with a small diference in the input/output.', 431, 22, '2009-09-05 01:28:33', '2009-09-05 01:28:33', '439.cpp', 'text/x-c++src', 2228, '2009-09-05 01:28:33'),
(815, 'Be carefull with the output. You can''t print a blank line at the end of the last test case...', 432, 22, '2009-09-05 02:51:05', '2009-09-05 02:51:05', '10048.cpp', 'text/x-c++src', 1812, '2009-09-05 02:51:05'),
(816, 'Kind of tricky MST problem, but a really nice one...', 433, 22, '2009-09-05 03:28:38', '2009-09-05 03:28:38', 'nc.cpp', 'text/x-c++src', 2985, '2009-09-05 03:28:38'),
(817, '<strong>Warning:</strong> This solution gives a time limit exceeded. The one that is fast enough is posted below.\r\n<br />\r\nNothing better than a fresh sunday morning to solve a problem.<br />\r\n<br />\r\nThe ideas for this solution are the following facts, which can be easily proven using induction:<br />\r\n<ul>\r\n<li>\r\nThe first string of G(n) is always "0"^n (that is, n 0''s concatenated: 0000...0000)\r\n</li>\r\n<li>\r\nThe last string of G(n) is always "1" + "0"^(n-1)\r\n(That is, a 1 followed by n - 1 zeros: 1000...0000)\r\n</li>\r\n<li>\r\nThe last string that starts with 0 in G(n) is "01" + "0"^(n-2).\r\n</li>\r\n<li>\r\nThe first string that starts with 1 in G(n) is "11" + "0"^(n-2).\r\n</li>\r\n</ul>\r\n\r\nBased on these, I was able to come with this recursive solution, which times out, but gives correct answers. The algorithm is O(m * n), but due to the massive amount of string operations it becomes too slow. The idea is to have two functions, next(s) and prev(s), that return the next/previous string in the Gray code for a given s.<br />\r\nWith these functions, the answer to the problem would be to do s = next(s) m times.', 434, 1, '2009-09-06 20:45:22', '2009-09-06 20:47:37', '11663.cpp', 'text/x-c++src', 1906, '2009-09-06 20:45:22'),
(818, 'The optimization that made the previous solution pass within the time limit is the following. next(s) and prev(s) return the index of the bit that should be toggled in s in order to produce the next/previous string for s in the Gray-code.<br />\r\nThis one got accepted.', 434, 1, '2009-09-06 20:50:45', '2009-09-06 20:51:10', '11663.2.cpp', 'text/x-c++src', 1849, '2009-09-06 20:50:45'),
(819, 'If you find a D between a D and an R you know its distance will be lower. Same thing happen when you find an R between an R and a D.<br/>So you just need to calculate the distances when you find a D immediately after an R, or an R immediately after a D and just take the minimum.', 435, 20, '2009-09-07 01:34:09', '2009-09-07 01:40:56', '11661_-_Burger_Time.cpp', 'application/octet-stream', 585, '2009-09-07 01:40:56'),
(820, 'Very Nice problem. First my brute-force O(n^6) solution got Time limit exceeded.\r\n<br/>\r\n<br/>\r\nSo this O(n^4) solutions stores on a matrix all the subrectangles starting at (0,0) and ending at (i,j), and uses this precalculations for finding the sum of every single subrectangle.', 436, 27, '2009-09-07 07:07:23', '2009-09-07 07:08:12', '108.cpp', 'text/x-c++src', 781, '2009-09-07 07:08:12'),
(822, 'la solucion es bastante simple.\r\n\r\nhay dos funciones, una que genera el i-esimo termino de la sequencia partiendo de un primer termino dado. y la otra funcion hace el llamado a la primera funcion e imprime el respuesta.', 437, 68, '2009-09-12 14:52:54', '2009-09-12 14:52:54', 'lookAndSaySequences.cpp', 'application/octet-stream', 1122, '2009-09-12 14:52:54'),
(823, 'bfs basico', 195, 68, '2009-09-12 14:58:32', '2009-09-12 14:58:32', 'bombs_no_they_are_mines.cpp', 'application/octet-stream', 2107, '2009-09-12 14:58:32'),
(824, 'simulacion', 299, 68, '2009-09-12 15:23:24', '2009-09-12 15:23:24', 'KittyFishing.cpp', 'application/octet-stream', 2658, '2009-09-12 15:23:24'),
(825, 'En este ejercicio hay que tener en cuenta hasta que punto se necesita que cresca un numero dependiendo del digito que piden en    una iteracion o tener en cuenta la maxima cantidad que seria 1000 para optimizar tiempo. Habria que hayar la posicion donde cortar la cadena ( siguiente.size() >= digito * 2) o (siguiente.size() >= 1000)', 437, 26, '2009-09-12 17:50:29', '2009-09-12 17:50:29', 'lookandsay2.cpp', 'application/octet-stream', 1038, '2009-09-12 17:50:29'),
(826, 'Simulation', 439, 6, '2009-09-12 21:26:52', '2009-09-12 21:26:52', 'b2.cpp', 'application/octet-stream', 569, '2009-09-12 21:26:52'),
(827, 'Simulacion', 439, 19, '2009-09-14 14:49:18', '2009-09-14 14:49:18', 'problemab.cpp', 'text/x-c++src', 482, '2009-09-14 14:49:18'),
(828, 'dp[i][j] how many ways can you form the value j using coins from coins[0] to coins[i] (The coins are supposed to be in ascending order).<br>\r\n* First notice that if you have to take a coin x to form j, the number of ways to form j will be number of ways of forming j-x.<br>\r\nAlso notice that the ways you can form the value j with coins from coins[0] to coins[i-1] are different that the ways that you can form the value j-coins[i] using coins from coins[0] to coins[i] (Remember *).<br>\r\nBoth ways form the value j but in the first case you didn''t use coins[i] and in the second one you do.<br>\r\nAnd also if j = 0 there is only one way to form it and that is using 0 from each coin.<br>\r\nSo with that in mind we can say that dp[i][j] = dp[i-1][j] + dp[i][j-coins[i]], keep in mind that j-coins[i] must be greater or equal than 0.', 440, 20, '2009-09-15 01:33:44', '2009-09-15 01:37:10', '674_-_Coin_Change.cpp', 'application/octet-stream', 573, '2009-09-15 01:37:10'),
(829, 'Geometry problem.<br>\r\nBecause the triangle is isosceles we know that the height is also a bisector so the in-center would be in the intersection of the height with any of the two bisectors and can be easy calculated with some trigonometry.<br>\r\nNow to calculate the upper tangent circles you just need to draw a second triangle with its base tangent to the lower in-circle and the other two sides contained in the bigger triangles sides.<br>\r\nBecause of this the bases of the two triangles are parallel and by Thales'' first theorem we know that the two triangles are similar so bm/b = hm/h, where h and hm are heights, and b and bm are bases.<br>\r\nWith that in mind we can calculate the new base and height and also the new radius.', 441, 20, '2009-09-15 14:39:38', '2009-09-15 14:40:03', '375_-_Inscribed_Circles_and_Isosceles_Triangles.cpp', 'application/octet-stream', 1046, '2009-09-15 14:40:03'),
(830, 'To be able to handle the big numbers we use modulus to keep just the last 5 non-zero digits of the factorial, this because the max n is 10000 which will add 4 zeroes, so we will need the fifth digit in order to find the last non-zero digit.', 442, 20, '2009-09-15 14:51:04', '2009-09-15 14:51:04', '568_-_Just_the_Facts.cpp', 'application/octet-stream', 640, '2009-09-15 14:51:04'),
(831, 'Kadane Algorithm', 436, 22, '2009-09-18 02:54:34', '2009-09-18 02:54:34', 'test.cpp', 'application/octet-stream', 737, '2009-09-18 02:54:34'),
(832, 'Big Integer + O(Log n) Fibonacci', 349, 27, '2009-09-18 19:55:50', '2009-09-18 19:55:50', '495.java', 'text/x-java', 1000, '2009-09-18 19:55:50'),
(833, 'Solucion Utilizando el Algoritmo de Floyd-Warshall.\r\n\r\nAunque segun entendi en el enunciado, las tuplas se leen  &lt;padre,hijo&gt;, en realidad se deben leer &lt;hijo,padre&gt;.', 444, 67, '2009-09-20 00:07:42', '2009-09-20 00:10:32', 'Main.java', 'text/x-java', 3033, '2009-09-20 00:10:32'),
(834, 'Math(Base Conversion) + Brute Force.', 146, 27, '2009-09-20 14:43:16', '2009-09-20 14:45:03', '279.cpp', 'text/x-c++src', 1329, '2009-09-20 14:45:03'),
(835, 'Math(Base Number) + Big Integer.', 445, 27, '2009-09-20 14:50:57', '2009-09-20 14:50:57', '355.cpp', 'text/x-c++src', 1420, '2009-09-20 14:50:57'),
(836, 'Math(Base Number) + Big Integer.', 446, 27, '2009-09-20 14:54:05', '2009-09-20 14:54:05', '389.cpp', 'text/x-c++src', 1075, '2009-09-20 14:54:05'),
(837, 'Standard Big Mod Algorithm. ', 447, 27, '2009-09-20 18:49:04', '2009-09-20 18:49:04', '374.cpp', 'text/x-c++src', 433, '2009-09-20 18:49:04'),
(838, 'Programacion Dinamica', 448, 67, '2009-09-20 19:14:48', '2009-09-20 19:14:48', 'Main.java', 'text/x-java', 2493, '2009-09-20 19:14:48'),
(839, 'Simulacion sencilla', 449, 67, '2009-09-20 19:31:52', '2009-09-20 19:31:52', 'Main.java', 'text/x-java', 2156, '2009-09-20 19:31:52'),
(840, 'Dynamic programming.\r\ndp[i][j] = min value to cell (i,j) from column j', 448, 12, '2009-09-20 21:17:39', '2009-09-20 21:17:39', 'unidir.cpp', 'application/octet-stream', 1238, '2009-09-20 21:17:39'),
(841, 'Calculo sencillo, un arreglo que mantenga la cuenta de ganancias/perdidas de cada persona. <br/>\r\n\r\nUna Estructura LinkedHashMap que preserve el orden de insercion.\r\n<br/>\r\nWarning: no dejar doble fin-de-linea al final de la salida.', 450, 67, '2009-09-21 00:14:16', '2009-09-21 00:14:16', 'Main.java', 'text/x-java', 1432, '2009-09-21 00:14:16'),
(842, 'Fuerza bruta, (opcionalmente) permutaciones', 451, 67, '2009-09-21 01:27:18', '2009-09-21 01:27:18', 'Main.java', 'text/x-java', 2295, '2009-09-21 01:27:18'),
(843, 'Programacion Dinamica (LIS); ordenamiento.', 452, 67, '2009-09-21 01:33:58', '2009-09-21 01:33:58', 'Main.java', 'text/x-java', 2083, '2009-09-21 01:33:58'),
(844, 'Programacion Dinamica (LIS)', 453, 67, '2009-09-21 02:38:33', '2009-09-21 02:38:33', 'Main.java', 'text/x-java', 1995, '2009-09-21 02:38:33'),
(845, 'Arboles, recursion.', 454, 67, '2009-09-21 02:42:44', '2009-09-21 02:42:44', 'Main.java', 'text/x-java', 2770, '2009-09-21 02:42:44'),
(846, 'Big Integer Problem, I though it would time out, but it ran pretty fast.', 326, 27, '2009-09-21 03:14:35', '2009-09-21 03:14:35', '485.cpp', 'text/x-c++src', 1211, '2009-09-21 03:14:35'),
(847, 'Catalan Formula + Dynamic Programming with state dp[i] = How many different binary search trees can be constructed with a set of numbers of size i.\r\n<br/>\r\n<br/>\r\nTip: Multiply before divide.', 455, 27, '2009-09-23 05:37:21', '2009-09-23 05:37:21', '10303.java', 'text/x-java', 858, '2009-09-23 05:37:21'),
(848, 'My second ugliest Code, Brute Force.', 451, 27, '2009-09-23 06:04:20', '2009-09-23 06:04:20', '102.cpp', 'text/x-c++src', 2281, '2009-09-23 06:04:20'),
(849, 'Brute force simulation ', 281, 75, '2009-09-23 07:10:00', '2009-09-23 07:10:00', 'egaer.cpp', 'application/octet-stream', 556, '2009-09-23 07:10:00'),
(850, 'A medida que se van sumando los dos numeros se va preguntando si tamaño es 61, cuando es verdad llegamos al final.\r\n\r\nel problema del bigint lo solucione representandolos como strings ', 326, 49, '2009-09-23 14:17:02', '2009-09-23 14:17:02', 'pascal.cpp', 'text/x-c++src', 3596, '2009-09-23 14:17:02'),
(851, 'Dynamic Programming with state dp[i][j] = Number of ways that can be taken J elements from a set of I elemens.', 457, 27, '2009-09-23 21:19:11', '2009-09-23 21:19:11', '369.cpp', 'text/x-c++src', 597, '2009-09-23 21:19:11'),
(852, 'Some memoization.', 117, 27, '2009-09-27 06:58:54', '2009-09-27 06:58:54', '294.cpp', 'text/x-c++src', 759, '2009-09-27 06:58:54'),
(853, 'Mary gana siempre que ella y John usen el mismo tipo de número (par/par o impar/impar) mientras que pierde cuando son mixtos.\r\n\r\nSi Mary tiene un número x de pares y John tiene un número menor de impares, la diferencia de juegos los gana Mary sin lugar a dudas (porque John no tendría como contrarrestarlos) Igual con los números impares.\r\n\r\nPara totalizar los juegos entonces sólo debemos buscar el máximo número de Mary (par o impar) y hallar la diferencia con el contrario de John.', 458, 4, '2009-09-27 22:01:18', '2009-09-27 22:01:18', 'oddOrEven.cpp', 'application/octet-stream', 770, '2009-09-27 22:01:18'),
(854, 'La idea es saber en que grupo (elementos de n^p digitos) se encuentra el numero que nos preguntan, hay que llevar la sumatoria puesto que nos preguntan una posicion especifica. A partir de hay y determinando en que termino de ese grupo se encuentra el elemento que buscamos pasamos de decimal a base n.\r\n\r\n', 459, 12, '2009-09-27 22:34:33', '2009-09-27 23:19:23', 'compudj.cpp', 'application/octet-stream', 1053, '2009-09-27 22:34:33'),
(855, 'Ugly code.\r\n<br/>\r\n<br/>\r\nJust simulate using a stack.', 460, 27, '2009-09-27 22:46:37', '2009-09-27 22:46:37', '727.cpp', 'text/x-c++src', 1037, '2009-09-27 22:46:37'),
(856, 'Factorization Tree.\r\n<br/>\r\n<br/>\r\nUgly printing but does the job.', 119, 27, '2009-09-28 02:59:19', '2009-09-28 02:59:19', '583.cpp', 'text/x-c++src', 619, '2009-09-28 02:59:19'),
(857, 'Since the Fib to find could be very big, we need the - divide and conquer O(log n) method to compute Fibonacci numbers.', 257, 27, '2009-09-30 03:22:31', '2009-09-30 03:22:31', '10229.cpp', 'text/x-c++src', 543, '2009-09-30 03:22:31'),
(858, '<p>Tenemos un sistema numerico en base N (1 <= N <= 26) usando los digitos [''A''-''Z''] en donde un numero es menor que otro si tiene menor cantidad de digitos y en igual de digitos si es menor lexicograficamente.</p>\r\n<p>Por ejemplo, si N = 3 los primeros numeros serian: A, B, C, AA, AB, AC, BA, BB, BC, CA, CB, CC, AAA, AAB, AAC, ABA, ...</p>\r\n<p>Queremos saber si colocamos todos esos numeros, como una secuencia infinita de digitos, cual es el k-esimo digito</p>\r\n<p>Para N = 3 la secuencia seria: ABCAAABACBABBBCCACBCCAAAAABAACABA...</p>\r\n<p>Si escribimos los numeros por cantidad de digitos:\r\nA, B, C<br />\r\nAA, AB, AC, BA, BB, BC, CA, CB, CC<br />\r\nAAA, AAB, AAC, ABA, ...<br />\r\nPodemos ver que hay N numeros con 1 digito, N^2 numeros con 2 digitos y en general hay N^M numeros con M digitos.<br />\r\nPrimero hallamos el indice p que genera el menor numero tal que tenga el mismo numero de digitos que el termino que tiene el k-esimo digito. Luego hallamos cuantos terminos mas adeltante esta ese termino y por ultimo devolvemos el digito que lo compone y por ultimo la cancion asociada a ese digito.\r\n</p>\r\n<p>Por ejemplo si N = 3 y k = 31.<br />\r\nLa cantidad de digitos que hay entre los numeros de un solo digito es 3 (A, B, C). La cantidad de digitos que hay entre los numeros de dos digitos es 18 (2 para 3^2 terminos) Asi que llevo 3 + 18 = 21. La cantidad de digitos que hay entre los numeros de tres digitos es 81 (3 para 3^3 termino] Como ya nos pasamos de k, entonces p = 3 (el termino que contiene el k-esimo digito tiene 3 digitos).\r\n</p>\r\n<p>El primer numero de los numeros con 2 digitos es AA ahora queremos hallar cuantos numeros mas adelante esta el termino con el digito k.<br />\r\nEste desplazamiento es techo((k - digitos) / p), la cantidad de digitos que faltan divido la cantidad de digitos que tienen todos los numeros, en este caso techo((31 - 21 / 3)) = 4 por lo tanto hallamos AAA + 4 = ABA. Por el desplazamientos entonces corrimos 3 * (4 - 1) = 9 digitos, en total 21 + 9 = 30. Por lo tanto devolvemos devolver el primer digito del termino ABA.\r\n</p>', 459, 4, '2009-10-01 00:48:53', '2009-10-01 00:48:53', 'dj.cpp', 'application/octet-stream', 1972, '2009-10-01 00:48:53'),
(859, 'Bubble sort counting numbers of swaps.', 461, 27, '2009-10-05 05:40:07', '2009-10-05 05:40:07', '10327.cpp', 'text/x-c++src', 542, '2009-10-05 05:40:07'),
(860, 'Simple Number Theory', 406, 76, '2009-10-11 05:06:10', '2009-10-11 05:06:10', 'primes.cpp', 'application/octet-stream', 1054, '2009-10-11 05:06:10'),
(861, 'va contando los ciclos en "longitudCiclo()" e informa el mayor', 423, 70, '2009-10-23 18:01:37', '2009-10-23 18:01:37', 'problema1conFor.cpp', 'application/octet-stream', 860, '2009-10-23 18:01:37'),
(862, 'What an awesome problem.<br />\r\nCan be solved using dynamic programming, with state: dp[i][last_jump] = Maximum number of coins that can be picked landing on the "i"-th coin such that the last jump taken had length "last_jump".<br />\r\n', 463, 1, '2009-10-23 21:20:24', '2009-10-23 21:20:24', 'BaronsAndCoins.clean.cpp', 'text/x-c++src', 1714, '2009-10-23 21:20:24'),
(863, 'Remember, the guide goes on each tour!', 465, 22, '2010-03-14 20:55:31', '2010-03-14 20:55:31', '10099.cpp', 'application/octet-stream', 860, '2010-03-14 20:55:31'),
(864, 'LIS O(n log n) with the algorithm library', 55, 22, '2010-03-14 21:20:39', '2010-03-14 21:20:39', '4183.2.cpp', 'application/octet-stream', 647, '2010-03-14 21:20:39'),
(866, 'I solved it with dynamic programming, using: dp[i][j] = Minimum number of operations to have j more opening braces in the first i characters of the string.', 466, 1, '2010-03-14 22:47:23', '2010-03-14 22:47:23', 'source.cpp', 'text/x-c++src', 1651, '2010-03-14 22:47:23'),
(868, 'Please read problem statement.', 467, 22, '2010-03-14 22:58:34', '2010-03-14 22:58:34', 'b.cpp', 'application/octet-stream', 1138, '2010-03-14 22:58:34'),
(869, 'BFS Algorithm to find the longest path!', 464, 22, '2010-03-14 23:52:31', '2010-03-14 23:52:31', 'MazeMaker.cpp', 'application/octet-stream', 1495, '2010-03-14 23:52:31'),
(870, '...', 104, 85, '2010-03-15 02:16:44', '2010-03-15 02:16:44', '10161_-_Ant_on_a_Chessboard.cpp', 'application/octet-stream', 568, '2010-03-15 02:16:44'),
(871, 'Hook:Remember, the guide goes on each tour!\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!', 465, 85, '2010-03-15 02:32:23', '2010-03-15 02:32:23', '10099_-_The_Tourist_Guide2.cpp', 'application/octet-stream', 1218, '2010-03-15 02:32:23'),
(872, 'a "new" solution', 68, 85, '2010-03-15 03:31:11', '2010-03-15 03:31:11', 'fernay.c', 'application/octet-stream', 135, '2010-03-15 03:31:11'),
(873, 'simulation, easy with java', 140, 85, '2010-03-15 03:38:12', '2010-03-15 03:38:48', 'Main.java', 'application/octet-stream', 767, '2010-03-15 03:38:48'),
(874, 'You need to be careful with the input! The same corners may be connected by more than one road (get the minimum of them!)', 468, 22, '2010-03-15 04:54:34', '2010-03-15 04:54:34', '10171.cpp', 'application/octet-stream', 1704, '2010-03-15 04:54:34'),
(875, 'the fastest solution I ever found\r\n\r\nAccepted ANSI C 0.008 ', 322, 85, '2010-03-17 02:56:19', '2010-03-17 02:57:05', 'minesweeper.c', 'application/octet-stream', 1354, '2010-03-17 02:56:19'),
(876, 'Basic ad hoc problem, just simulate to process.\r\n', 469, 87, '2010-03-19 05:46:16', '2010-03-19 05:46:16', '4168.cpp', 'application/octet-stream', 1368, '2010-03-19 05:46:16'),
(877, 'Es increible. Mandé el MISMO código al Live Archive y pasó (este que adjunto) pero en el torneo de ACIS/REDIS no pasaba porque no tenían validador =S...', 470, 22, '2010-03-21 02:29:01', '2010-03-21 02:29:01', 'g.cpp', 'application/octet-stream', 2873, '2010-03-21 02:29:01'),
(878, 'I finally got rid of the Memory Limit Exceeded thanks to C++ sets! The algorithm is really easy, just a simple BFS. Notice that the board has an integer F that says the position of the frog to make the solution faster.', 471, 22, '2010-03-24 01:18:46', '2010-03-24 01:18:46', 'e.cpp', 'application/octet-stream', 2196, '2010-03-24 01:18:46'),
(879, 'Floyds Warshall transitive closure. Really easy for a 1000 pointer!', 472, 22, '2010-03-30 03:43:08', '2010-03-30 03:43:08', 'TeamBuilder.clean.cpp', 'application/octet-stream', 934, '2010-03-30 03:43:08'),
(880, 'Solution made today while we were training', 303, 22, '2010-03-30 22:55:47', '2010-03-30 22:55:47', 'allInAll.cpp', 'application/octet-stream', 839, '2010-03-30 22:55:47'),
(881, 'El problema se reduce a saber si es mejor meter primero el DVD1 o el DVD2 (¿Por qué?)\r\n\r\nPrimero encontramos el orden topológico de los paquetes a instalar. Después utilizamos programación dinámica para encontrar, desde cada nodo, el camino con más cambios. Elegimos el mayor resultado de estos. Esto se hace para ambos casos (DVD1 / DVD2) y al final se elige el menor de estos resultados.\r\n\r\nMás claro en el código', 473, 22, '2010-03-30 23:57:05', '2010-05-19 03:10:09', 'a.cpp', 'application/octet-stream', 3212, '2010-03-30 23:57:05'),
(882, 'Really tricky problem. First, notice that the only numbers that will have an odd number of divisors are the perfect squares (Why?). Then, you just have to make the distance between the number and the squares. <br /><br />\r\n\r\nThe problem is that you can''t use any square but the ones that have at most n digits where n is the size of the string given. I honestly didn''t understand this part and that''s where my solution failed.', 474, 22, '2010-04-04 00:44:03', '2010-04-04 00:44:03', 'Lottery.clean.cpp', 'application/octet-stream', 1774, '2010-04-04 00:44:03'),
(883, 'Lo mas importante es ser conscientes que el código T9 que ingresa el rey siempre es válido, entonces podemos simplemente obtener el código T9 de cada palabra del DICCIONARIO (y no todas las posibles combinaciones del código ingresado).\r\n\r\nDespués, el problema se vuelve "maluco". Saber como representar el código T9 y hacer muchos strings.\r\n\r\nDejo comentada la parte para debuggiar el T9', 475, 22, '2010-04-24 17:36:30', '2010-04-24 17:36:30', 'T9.clean.cpp', 'application/octet-stream', 2524, '2010-04-24 17:36:30'),
(884, 'Simplemente en el momento en el que se encuentre una mina se le sumara una unidad a cada vecino hasta completar todas las minas.\r\n\r\nlenguaje: java\r\ntiempo: 0.444', 322, 64, '2010-05-03 02:55:44', '2010-05-03 02:59:19', 'Buscaminas.java', 'text/x-java', 2571, '2010-05-03 02:55:44'),
(885, '<p>Lo peor del problema era leerlo. Bueno, si uno lo simulaba el problema era HORRIBLE, pero en tenis quién gana un partido? (SIEMPRE) ... Siempre es el que ganó el último punto, ¿por qué? Pues porque sino, no habría ganado y si ya alguien había ganado para qué seguir jugando?</p>\r\n\r\n<p>Entonces, el problema es, simplemente imprimir la última letra del string.</p>\r\n\r\n<script> \r\nalert("Hola");\r\n</script>', 476, 22, '2010-05-09 03:33:32', '2010-05-15 19:29:15', '885_a.cpp', 'application/octet-stream', 207, '2010-05-15 18:57:45'),
(886, '...', 476, 85, '2010-05-09 04:33:31', '2010-05-09 04:33:31', 'Main.java', 'application/octet-stream', 416, '2010-05-09 04:33:31'),
(887, '</p>Muy bueno este problema. Programación dinámica. </p>\r\n\r\n<p>Explicación en el código.</p>', 477, 22, '2010-05-15 18:51:37', '2010-05-15 18:53:09', 'wordencoding.cpp', 'application/octet-stream', 3694, '2010-05-15 18:53:09'),
(888, 'Se deben promediar los gastos de los viajeros y posteriormente se debe guardar los gastos negativos y los positivos cada uno en un fondo de gastos.\r\n\r\nAl final el mayor valor entero de los dos fondos es el resultado.\r\n\r\nSe debe convertir los valores a entero multiplicando por 100 y dividiendo por 100 al obtener los resultados.', 478, 64, '2010-05-16 19:48:20', '2010-05-16 19:48:20', 'viaje.java', 'text/x-java', 2171, '2010-05-16 19:48:20'),
(889, 'Tener en cuenta que la linea de separación solo se debe colocar entre los digitos.\r\n\r\nutilice una matriz plantilla para usarla imprimir los números.', 479, 64, '2010-08-20 03:46:38', '2010-08-20 15:17:32', 'main.cpp', 'text/x-c++src', 1247, '2010-08-20 03:46:38'),
(890, 'Dijkstra con un giro:\r\n\r\nMantenemos una matriz de n x n, en la posicion i almacenamos el vector resultante de correr dijkstra usando como origen el nodo i.\r\n\r\nDe esta manera no recalculamos la distancia que nos toma ir a una misma ciudad. ', 422, 4, '2010-09-01 20:19:25', '2010-09-01 20:19:25', 'one.cpp', 'application/octet-stream', 3157, '2010-09-01 20:19:25'),
(891, 'Floyds Warshall Implementation. Our solution from the competition.', 422, 22, '2010-09-01 20:40:45', '2010-09-01 20:40:45', 'f.cpp', 'application/octet-stream', 3489, '2010-09-01 20:40:45'),
(892, 'Longest Common Subsequence O(n^2)', 453, 22, '2010-09-03 02:57:46', '2010-09-03 02:57:46', '111.cpp', 'application/octet-stream', 1374, '2010-09-03 02:57:46'),
(893, 'Programación Dinámica', 480, 22, '2010-09-03 22:35:40', '2010-09-03 22:35:40', 'HandsShaking.clean.cpp', 'application/octet-stream', 478, '2010-09-03 22:35:40'),
(894, 'Programación Dinámica. Simplemente miro si es mejor subir o bajar el volumen (si puedo).', 481, 22, '2010-09-03 22:37:57', '2010-09-03 22:37:57', 'ChangingSounds.clean.cpp', 'application/octet-stream', 976, '2010-09-03 22:37:57'),
(895, 'Típica programación dinámica, muy parecido al clásico problema de la mochila.\r\n\r\nLlamemos actual[i] al mínimo valor que podemos garantizar en un cochinito con un peso de monedas que no exceda a i.\r\n\r\nPara cada i posible, miramos cuáles de las monedas que tenemos podría caber por su peso. Para cada candidato, miramos cuál es el mínimo del peso restante si usamos el candidato, sumado con su valor. Si es mejor que el que ya hemos almacenado, actualizamos el mejor. ', 482, 4, '2010-09-06 02:01:34', '2010-09-06 02:01:34', 'piggybank.cpp', 'application/octet-stream', 1242, '2010-09-06 02:01:33'),
(896, 'aplicar nociones de combinatoria.', 483, 64, '2010-09-06 03:12:09', '2010-09-06 03:12:09', 'game.cpp', 'text/x-c++src', 265, '2010-09-06 03:12:09'),
(898, 'Aplicando criba únicamente para múltiplos de 3.', 136, 64, '2010-09-07 08:00:10', '2010-09-07 08:02:05', 'goldbach.cpp', 'text/x-c++src', 654, '2010-09-07 08:02:05'),
(899, 'String manipulation', 484, 22, '2010-09-08 18:17:32', '2010-09-08 18:17:32', 'b.cpp', 'application/octet-stream', 2225, '2010-09-08 18:17:32'),
(900, 'Small coin-change modification', 482, 22, '2010-09-08 21:28:03', '2010-09-08 21:28:03', 'f.cpp', 'application/octet-stream', 587, '2010-09-08 21:28:03'),
(901, 'aplicar la criba e ir sumando con los demás primos.  ;)', 135, 64, '2010-09-09 03:30:41', '2010-09-09 03:30:41', 'main.cpp', 'text/x-c++src', 682, '2010-09-09 03:30:41'),
(902, 'aplicar programación dinámica.', 482, 64, '2010-09-10 15:27:45', '2010-09-10 15:27:45', 'main.cpp', 'application/octet-stream', 1041, '2010-09-10 15:27:45'),
(903, 'codificar y decodificar.', 485, 64, '2010-09-10 23:07:52', '2010-09-10 23:08:52', 'main.cpp', 'text/x-c++src', 1138, '2010-09-10 23:08:52'),
(904, '<p>Es mas o menos facil convencerse que una estrategia que minimiza los cortes es: el primer día corta un pedazo de 1 unidad, el siguiente día cortar un pedazo de 2 unidades dar ese pedazo y pedir el pedazo de 1 unidad, el tercer día dar el pedazo de 1 unidad, el siguiente día partir un pedazo 4 unidades y pedir de vuelta los pedazos de 1 y 2 unidades, etc.</p>\r\n\r\n<p>Es decir, cada vez que me quedo sin pedazos cortar un pedazo de una unidad mayor al total de unidades de los pedazos que ya existen.</p>\r\n\r\n<p>Con esta estrategia uno puede comenzar a buscar un patron en los resultados y se da cuenta que los incrementos en los cortes ocurren justamente en las potencias de dos. Por lo tanto la respuesta esta dada por una simple formula: el piso del logaritmo de n (la longitud de la barra) en base 2.</p>', 489, 4, '2010-09-22 16:47:43', '2010-09-22 16:49:24', 'silver.cpp', 'application/octet-stream', 220, '2010-09-22 16:47:43'),
(905, 'La idea es hacer un bfs que maneje dos tipos de estados.\r\nEl primero es cuando visito un nodo y las puertas están cerradas y el segundo cuando las puertas están abiertas', 490, 3, '2010-10-03 22:11:51', '2010-10-03 22:11:51', '7422.cc', 'text/x-c++src', 3347, '2010-10-03 22:11:51'),
(906, 'La explicación esta en el código', 491, 3, '2010-10-06 16:05:25', '2010-10-06 16:07:37', '7386.cc', 'text/x-c++src', 4238, '2010-10-06 16:07:37'),
(907, '<p>Using KMP''s failure function we can have the length of the longest prefix that is also suffix that is not the whole string. Let''s call that overlap.</p>\r\n\r\nThen, we just need to find how many times we can fit the string. Notice that if it overlaps itself, you only have the whole word once, then the real size of the word is N-overlap (where N is the word''s length).', 492, 22, '2010-10-07 00:19:32', '2010-10-07 00:19:32', 'kmp.cpp', 'application/octet-stream', 938, '2010-10-07 00:19:32'),
(908, 'DP. Fácil. Para el semillero del viernes. Explicación en el código.', 493, 22, '2010-10-13 03:05:04', '2010-10-13 03:05:04', '3885.cpp', 'application/octet-stream', 1257, '2010-10-13 03:05:04'),
(909, '<p>KMP Table Function. You know that pi[i] is the LONGEST PROPER SUFFIX THAT IS ALSO A PREFIX of the string. So now, for each prefix check if such proper suffix is periodic. But, how?</p>\r\n\r\n<p>We''re looking at prefix i, that means, S[0 .. i] and pi[i]!=0 (it has some proper suffix that''s also a prefix). Then, check if i-pi[i] divides i. Because pi[i] has the LONGEST suffix/prefix i-pi[i] is "minimum" and that way you''ll get the longest K</p>', 259, 22, '2010-10-16 02:52:40', '2010-10-16 02:52:40', '1961.cpp', 'application/octet-stream', 684, '2010-10-16 02:52:39'),
(910, 'Sigue utilizando (i-b[i]) para econtrar el minimo pref/Suf con el cual se pueda armar cierto substring. la diferencia basicamente solo esta en la forma en la que se precalcula la tabla de KMP', 259, 103, '2010-10-18 01:29:31', '2010-10-18 01:29:31', 'bigInteger.cpp', 'text/x-c++src', 797, '2010-10-18 01:29:31'),
(911, 'The game can be solved by looking for its equivalent game of Nim. The problem says that on each turn, a player chooses a row and divides 1 or more of its elements by any number; when every number becomes 1, there are no more possible moves, so the player loses. This can be seen as, on each turn, a player takes away any number of divisors from each row; when every divisor has been taken, there are no more moves. Then, each row is put in terms of the total number of prime factors, and the XOR rule of the game of Nim is used to determine if the first player can win or not.', 494, 102, '2010-10-18 03:50:14', '2010-10-18 03:50:14', 'division.cpp', 'text/x-c++src', 1423, '2010-10-18 03:50:14'),
(912, 'BFS.', 318, 102, '2010-10-18 17:31:28', '2010-10-18 17:31:28', 'bicoloring.cpp', 'text/x-c++src', 897, '2010-10-18 17:31:28'),
(913, 'Ad hoc. Se hace más sencillo si se utiliza un istringstream para hacer un parse sobre el poema (en Java se podría usar Scanner para el mismo fin)', 495, 4, '2010-10-25 13:23:06', '2010-10-25 13:23:06', 'tau.cpp', 'application/octet-stream', 766, '2010-10-25 13:23:06'),
(914, 'Fuerza bruta. \r\n\r\nSon sólo 47 cartas posibles, y para cada carta hay que mirar las 6 permutaciones posibles para ver todos los desenlaces posibles del juego.', 496, 4, '2010-10-27 22:08:00', '2010-10-27 22:08:00', 'j.cpp', 'application/octet-stream', 1257, '2010-10-27 22:08:00'),
(915, '<p>Bottom up DP. I have a function f(i,j) that returns the length of the largest palindrome I can create from i to j (inclusive).</p>\r\n\r\n<p>If I have a word then, I obviously one (and only one for the excluded middle''s laws sake):</p>\r\n\r\n<ol>\r\n<li>\r\n<p>The first and last letters are the same, so maybe I can create a palindrome of length 2+f(i+1, j+1).</p>\r\n\r\n<p>\r\nThis is when I have a word aXXXa.\r\n</p>\r\n</li>\r\n\r\n<li>\r\n<p>\r\nThe first and last letters are different, so, just try to remove the first one and then the last one and get the maximum of that.\r\n</p>\r\n</li>\r\n</ol>\r\n\r\n<p>The result is the maximum of the 3 possibilities (or maybe 2 if the first and last letter did not match).</p>', 497, 22, '2010-11-04 22:54:00', '2010-11-04 23:18:40', 'longestPal.cpp', 'application/octet-stream', 799, '2010-11-04 22:54:00'),
(916, 'A dynamic programming on an aho corasick, a non easy but frequent string problem\r\nThe solution is to traverse a string through the aho corasick tree and always try one of two things: advance in the string or replace a char with a space. Obviously, we never pass through a final or terminal node, in terms of the aho corasick matching.', 316, 104, '2010-11-05 04:33:21', '2010-11-05 04:33:21', '3931.cpp', 'text/x-c++src', 1737, '2010-11-05 04:33:21'),
(917, 'Explicación en el código', 486, 22, '2010-11-05 06:25:18', '2010-11-05 06:25:18', 'aliens.cpp', '', 4930, '2010-11-05 06:25:18'),
(918, 'Topological Sort.', 498, 4, '2010-11-07 01:20:26', '2010-11-07 01:24:07', 'TopologicalSort.java', '', 2259, '2010-11-07 01:24:07'),
(919, 'Simple BFS topological sort...', 498, 22, '2010-11-09 02:22:55', '2010-11-09 02:22:55', '10305.cpp', '', 829, '2010-11-09 02:22:55'),
(920, 'Our contest solution... It''s ugly, we know ...', 496, 22, '2010-11-11 22:30:56', '2010-11-11 22:30:56', 'j.cpp', '', 2390, '2010-11-11 22:30:56'),
(921, 'Given the suffix array of the text and the LCP function the problem is really easy...', 487, 22, '2010-11-16 00:21:54', '2010-11-16 00:21:54', 'file_recover.cpp', '', 583, '2010-11-16 00:21:54'),
(923, 'Otro de suffix arrays... Explicación en el código.', 488, 22, '2010-11-16 00:39:51', '2010-11-16 00:39:51', 'smallest.cpp', '', 739, '2010-11-16 00:39:51'),
(924, 'our contest solution', 495, 22, '2010-11-16 00:49:46', '2010-11-16 00:49:46', 'F.cpp', '', 604, '2010-11-16 00:49:46'),
(925, 'Same solution as Nicolas, with LCP (longest common prefix) and SA (suffix array)', 487, 108, '2010-11-24 04:07:48', '2010-11-24 04:07:48', 'file.cpp', 'text/x-c++src', 3595, '2010-11-24 04:07:48'),
(926, 'La solución "real" al problema de los strings. Si bien el time limit en Colombia y Venezuela por alguna razón se modifico, en Argentina, Brazil y el resto de suramerica la solución simple por dp - fuerza bruta no funcionaba (mientras que en Colombia si).\r\n\r\nLa solución optima es utilizando el algoritmo Aho–Corasick para localizar los substrings en O(n + m) en donde n es la longitud de todas las palabras y m es el numero de matches. Aun asi, como esta implementado en este momento, da MLE en el live archive.', 499, 108, '2010-11-24 04:25:12', '2010-11-24 04:25:52', 'growing_real (1).cpp', 'text/x-c++src', 5462, '2010-11-24 04:25:52'),
(927, 'La solución sencilla que si corre en el live archive, porque le dan 30 segundos en vez de los 15 segundos que dieron en la mayor parte de latinoamerica y en el concurso en vivo en el online judge. Al parecer en Colombia tambien dieron ese time limit (30 s), o incluso uno mayor.\r\n\r\nAlgo interesante de este problema es que, por los casos de prueba, el strstr de c es muchisimo mas lento que el contains de java, incluso aun cuando el worst case del contains es O(n * m) mientras que el del strstr es O(n). La razón es que ningun caso de prueba le ocasiona un comportamiento cuadratico al contains, y la constante oculta se vuelve significativa, pues el contains esta implementado con un algoritmo simple que no utiliza memoria, mientras que el strstr esta implementado con KMP (Knuth–Morris–Pratt).', 499, 108, '2010-11-24 04:36:41', '2010-11-24 04:40:55', 'growing.cpp', 'text/x-c++src', 2650, '2010-11-24 04:36:41'),
(928, 'Este es un problema en que simplemente hay que implementar el algoritmo que nos dan.\r\n\r\nObviamente el algoritmo es sobre árboles binarios así que hay que tener familiaridad con el tema, pero un árbol binario sólo require conocer sobre recursión.\r\n\r\nDel problema sólo hay un potencial problema y es que en la forma en que nos dan los nodos es imposible reconstruir el árbol, pero si se recorre la entrada al revés ya es fácil.\r\n\r\nEn el juez tuve un problema con la función atoi() y es que me daba 0, después de implementar mi propia función, obtuve un AC.\r\n\r\nEl problema no hace mención de que la primera línea tenga algo distinto de un entero así que supongo que es un bug (ojalá aislado)', 503, 4, '2011-02-25 20:45:56', '2011-02-25 20:45:56', 'newton.cpp', 'text/x-c++src', 2317, '2011-02-25 20:45:56'),
(929, 'The problem here is precision\r\nI solved by multiply by 100, make operations and then divide by 100 on print', 478, 85, '2011-03-21 00:47:34', '2011-03-21 00:47:34', '10137.c', 'text/x-csrc', 578, '2011-03-21 00:47:34'),
(930, 'import java.math.BigInteger;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Main{\r\n\r\n	public static void main(String[] args) {\r\n		Scanner s=new Scanner(System.in);\r\n		while(s.hasNext()){\r\n			int n=Integer.parseInt(s.nextLine());\r\n			BigInteger p=new BigInteger(s.nextLine());\r\n			 \r\n			double dd=1.0/n;\r\n			double res=Math.pow(p.doubleValue(), dd);\r\n			System.out.println((int)Math.round(res));\r\n			\r\n		}\r\n	}\r\n\r\n}\r\n', 105, 124, '2011-04-24 22:19:41', '2011-04-24 22:19:41', 'PowerOfCryptography_113.java', 'application/octet-stream', 433, '2011-04-24 22:19:41'),
(931, '<p><strong>Otra forma de hacer lo mismo</strong></p>', 105, 64, '2011-04-26 16:05:09', '2011-04-26 16:05:09', 'power.cpp', 'text/x-c++src', 276, '2011-04-26 16:05:09'),
(932, 'La idea es encontrar cuánto vale ir del nodo A, al nodo B...\r\n\r\nComo es un árbol, entonces, la distancia entre A y B es la distancia entre la raíz hasta A+ distancia entre la raíz hasta B  -  2* distancia entre raíz y LCA(A,B).\r\n\r\nLCA es el Lowest Common Ancestor. Es decir, es el papá de A y B que esté más abajo en el árbol (tenga un nivel superior).', 500, 22, '2011-04-30 00:52:06', '2011-04-30 00:52:06', '4805.cpp', 'application/octet-stream', 2598, '2011-04-30 00:52:06'),
(933, 'No sabria decir si esto es fuerza bruta pero bueh.\r\nComo seran 6 cartas, creo las posibles combinaciones.\r\nLas 3 (A,B,C) de la vieja y las 2 (D,E) del man, la tercera del man es un iterador (X) (osea, probar con 1, con 2, con 3 y asi)\r\n\r\nEntonces las posibles son:\r\nA-D B-E C-X\r\nA-D B-X C-E\r\nA-E B-D C-X\r\nA-E B-X C-D\r\nA-X B-D C-E\r\nA-X B-E C-D\r\n \r\nEn cada caso gana el man con tal de que 2 de sus parejas ganen. Para que el man gane al final, tiene que ser que en los 6 casos haya ganado, entonces apenas se llegue a la condicion donde X es minimo y cumple para que gane, imprimir X (a menos que sea igual a una de las otras 5 cartas, por lo que se calcula otra ves con el siguiente)\r\n\r\nSi al final de todo no hubo un numero que cumpliera las condiciones que hiciera al man ganar en las 6 simulaciones, se imprime -1.', 496, 126, '2011-05-03 21:56:38', '2011-05-03 21:56:38', 'jollo.cpp', 'application/octet-stream', 1078, '2011-05-03 21:56:38');
INSERT INTO `solutions` (`id`, `explanation`, `problem_id`, `user_id`, `created_at`, `updated_at`, `source_code_file_name`, `source_code_content_type`, `source_code_file_size`, `source_code_updated_at`) VALUES
(934, 'Una solución un poquito rustica ^^\r\nVeo el numero en que rango esta contenido de una suma acumulada (1, 1+2, 1+2+3, etc)\r\nentonces adonde este contenido creo dos arreglos de espacios igual a el ultimo iterador sumado.\r\n\r\nPor ejemplo, el 8 esta en 1+2+3+4, por lo que hago 2\r\narreglos de 4 espacios, y los lleno uno para abajo (1,2,3,4) y el otro al revés (4,3,2,1)\r\n\r\nLuego, dependiendo si es una columna par o impar se lee de arriba hacia abajo o de abajo hacia arriba (las pares bajan, las impares suben)\r\n\r\nSe obtiene la diferencia entre el acumulado y el numero pedido. Si es columna par, con ese numero se coje la posición del arreglo desde abajo,  (por ejemplo el 8, 10-8=2, se coje la posición 2 leido desde abajo)\r\n\r\nEn el caso del 12, como esta en columna impar, se coje la diferencia (acum = 15) - 12, 3, y se imprime\r\nesa posición desde arriba.', 267, 126, '2011-05-04 02:33:41', '2011-05-04 02:33:41', 'cantor.cpp', 'application/octet-stream', 550, '2011-05-04 02:33:41'),
(935, 'It''s easy, it only check (character by character) if the previous "{" can pair actual "}", and, at the end, adds the half of remaining "{" (only half of them need to be changed for matching the other half)', 466, 128, '2011-06-27 06:45:56', '2011-06-27 06:53:43', 'ANARC09A.cpp', 'application/octet-stream', 797, '2011-06-27 06:45:56'),
(937, 'Ir sumando todos los números impares hasta llegar al numero solicitado.', 504, 64, '2011-06-27 23:28:36', '2011-06-27 23:28:36', 'OddSum.cpp', 'text/x-c++src', 363, '2011-06-27 23:28:36'),
(939, 'Actually there''s a greedy algorithm to solve the problem.\r\n\r\nFirst delete all duplicate emoticons and all emoticons that contain a smaller emoticon inside them (Why is it correct to do that?)\r\n\r\nThen, find all matches of all emoticons in the text (you can use Aho-Corasick''s to do that efficiently) and store them as [i, j] pairs that represent the starting and ending indexes where the emoticons occurs in the original string.\r\n\r\nFor example, if the emoticons are "abc" and "bcd" and the string is "-abcd-abc-", you would store the following pairs of indexes:\r\n\r\n[0, 2] // matches abc\r\n[1, 3] // matches bcd\r\n[5, 7] // matches abc\r\n\r\nThe problem can be now restated as follows: Pick the smallest set of numbers such that each interval contains one of those numbers. In this case, a solution is {2, 7}, because [0,2] contains 2, [1,3] contains 2 and [5,7] contains 7 and there''s not a smaller set with this property.\r\n\r\nTo find this set, there''s an easy greedy algorithm: Sort the intervals in lexicographically order. For each interval, add the rightmost number to the set unless it''s already covered by one of the numbers you added before.\r\n\r\nIn the example, you would first look at the [0,2] interval and select 2. Then you would look at the [1,3] interval and select nothing because it''s already covered by that 2 you just picked. Then you would look at the [5,7] interval and select 7.', 316, 1, '2011-09-22 21:27:56', '2011-09-22 21:29:44', 'emoticon.cpp', 'application/octet-stream', 8382, '2011-09-22 21:27:56'),
(940, 'Dado el Suffix Array de un string y el LCP entre los sufijos adyacentes (ordenados lexicográficamente), es muy fácil resolver el problema.', 505, 22, '2011-09-26 19:52:58', '2011-09-26 19:52:58', 'gattacca.cc', 'application/octet-stream', 1058, '2011-09-26 19:52:57'),
(941, 'La idea es minimizar la arista más grande de cualquier camino. Es decir, encontrar de todos los caminos cual es la arista más grande y elegir el camino donde esa arista sea la más pequeña (maximin). \r\n\r\nEsto se hace muy fácil con Floyds Warshall, pero como el grafo es grande y el input es gigante, da TLE.\r\n\r\nEntonces, es necesario realizar una pequeña extensión del algoritmo LCA.\r\n\r\nHay una observación MUY importante. Dado un MST (Kruskal), se tiene que para CUALQUIER par de nodos, la arista más grande del camino en el arbol, es la arista equivalente al maximin del gráfico original. (Pruebenlo, es fácil).\r\n\r\nTeniendo esto, el problema es fácil! En vez de guardar solo el LCA(a, b), guardamos también la arista más grande entre (a, LCA(a,b) ) y (b, LCA(a,b) ) y se elige la mayor entre ellas.', 506, 22, '2011-09-28 04:26:51', '2011-09-28 04:28:02', '7425.cpp', 'application/octet-stream', 4227, '2011-09-28 04:26:51'),
(942, 'Same solution as Hock''s: using KMP, we find the length of the longest border of the whole string (a border of a string is a shorter string that is both a prefix and a suffix of the original string).\r\n\r\nWith this, we easily know how many characters we need to add to form a new repetition of the string.', 492, 1, '2011-09-30 03:18:48', '2011-09-30 03:18:48', 'filrtest.cpp', 'application/octet-stream', 636, '2011-09-30 03:18:48'),
(943, 'Precomputé el mapa para que diera el número asignado a cada string.', 513, 138, '2011-10-05 23:41:55', '2011-10-05 23:41:55', 'wordIndex.cpp', 'application/octet-stream', 2476, '2011-10-05 23:41:55'),
(944, 'Es un problema sencillo, sólo hay que determinar el atacante más cercano a la línea de gol y también los dos defensores más cercanos para poder determinar así si hay o no offside.', 443, 116, '2011-11-24 05:21:51', '2011-11-24 05:21:51', 'he.cpp', 'text/x-c++src', 565, '2011-11-24 05:21:51'),
(945, 'DP solution:\r\n\r\ndp[i][j] is how many space I''m wasting using the first i songs.', 514, 22, '2011-12-01 15:18:10', '2011-12-01 15:18:10', 'f.cpp', 'application/octet-stream', 1476, '2011-12-01 15:18:10'),
(946, 'Complete search solution', 514, 22, '2011-12-01 15:18:27', '2011-12-01 15:18:27', '624.cc', 'application/octet-stream', 1628, '2011-12-01 15:18:27'),
(947, 'L1 = Side 1 of the triangle\r\nL2 = Side 2 of the triangle\r\n\r\nP1 = Line passing trough middle point of L1 and perpendicular to L1\r\nP2 = Line passing trough middle point of L2 and perpendicular to L2\r\n\r\nThe center of the circle is the intersection between P1 and P2, and the radius is the distance between the center of the circle and any of the vertex of the triangle.', 515, 144, '2012-01-07 17:37:06', '2012-01-07 17:37:06', 'main2.cpp', 'text/plain', 1703, '2012-01-07 17:37:06'),
(949, 'Simplemente, después de mucho tiempo entendiendo la construcción del árbol, me di cuenta que si se van devolviendo las operaciones hechas, empezando por la primera, siempre sucede que si se va a la derecha, resulta un numero mayor, y a la izquierda, un numero menor.', 516, 128, '2012-01-07 19:15:20', '2012-01-07 19:15:20', 'BIRD_TREE.cpp', 'application/octet-stream', 469, '2012-01-07 19:15:20'),
(950, 'Generate all the permutations from 0 to N of the posible choices that Gogo has. Then just check if the book in the position ''possible[i]'' is in the array of already eaten books. I used ''next_permutation'' to generated all the possible choices.', 517, 32, '2012-03-17 22:32:56', '2012-03-17 22:48:00', 'PrinceXToastbook.cpp', 'application/octet-stream', 1146, '2012-03-17 22:48:00'),
(951, 'Ad Hoc', 518, 32, '2012-03-17 22:47:03', '2012-03-17 22:47:03', 'KingXNewBaby.cpp', 'application/octet-stream', 774, '2012-03-17 22:47:03'),
(952, 'Just check all the conditions in the statement, including the size of the name.', 518, 116, '2012-03-17 22:53:19', '2012-03-17 22:53:19', 'temp.cpp', 'text/x-c++src', 1118, '2012-03-17 22:53:19'),
(953, 'You can use the linearity of the expected value, <pre>E(X + Y) = E(X) + E(Y)</pre> to solve the problem. Where <pre>E(X) = P(X1) + P(X2) + ... + P(XN) </pre> and P(Xi) means the probability to <b>understand</b> a book. So, to understand a book <i>i</i> you have to understand books prerequisite[i], prerequisite[prerequisite[i]], prerequisite[prerequisite[prerequisite[i]]]... until prerequisite[x] = -1. Then, the probability to understand a book <i>i</i> is 1 / (number of prerequisite for this book)!. So, you just have to calculate for each book the amount of books you have had understood, you can do this by building a graph and with depth first search assign this, starting from each -1 (book with no prerequisite).', 517, 116, '2012-03-20 05:28:45', '2012-03-20 05:34:06', 'prince.cpp', 'text/x-c++src', 1468, '2012-03-20 05:28:45'),
(954, 'First just saved the string into the matriz in the ''encode'' order, is the same as say that the even rows will be reversed. Then seeing the way that the matrix of characters it''s formed and knowing that the number of rows is s.size()/n print it by columns.', 519, 32, '2012-03-23 03:19:49', '2012-03-23 03:19:49', '400 - To and Fro.cpp', 'application/octet-stream', 971, '2012-03-23 03:19:49'),
(955, 'This problem could have multiple approaches, the first that I took was, stay in the middle of the array, then see where are more people, left side or right side, and move all the people that is in the other side, and repeat it until all positions are contiguous. With this approach I got TLE, obviously cause it''s O(n^2). So here''s a better approach "Take the ith person from the left and the ith person from the right. The steps they must walk is their current distance minus their desired distance.", this one is O(n).\r\n', 520, 32, '2012-03-23 04:17:11', '2012-03-23 04:17:11', '10399 - Conga line.cpp', 'application/octet-stream', 821, '2012-03-23 04:17:11'),
(957, 'This is a ''simple'' BFS or DFS problem, at the beginning I approached it by using DFS but I got TLE so I change it to BFS and result easier. First, for the read I had to use a map, cuz'' the nodes could be greater than the total number of nodes. (Ej. 3 nodes = 20233,892832,3289), then I used another map to count the number of moves from the query node to every other node in the graph and finally I count the number of nodes where the moves are less than the ''ttl''. BUT, There could be no-connected nodes so you have to verify that you''re counting all the nodes.', 521, 32, '2012-03-26 04:41:27', '2012-03-26 04:41:27', '336 - A Node Too Far.cpp', 'application/octet-stream', 2990, '2012-03-26 04:41:27'),
(958, 'Organize both strings and compare them, if a[i]==b[j] add it to the string ''k'' (response), if not, then increment the string where a[i]<b[j] or viceversa.', 346, 32, '2012-03-28 04:48:13', '2012-03-28 04:48:13', '10252 - Common Permutation.cpp', 'application/octet-stream', 1391, '2012-03-28 04:48:13'),
(959, '"The graph here is harder to see. Each location on the chessboard represents a vertex. There is an edge between two positions if it is a legal knight move. Graph Problem: Single Source Shortest Path." (Art of programming contest)\r\nThere is no need to construct the graph at all, just BFS, check the valid moves for the knight and return the sum of visited at the position asked.', 431, 32, '2012-03-30 02:40:24', '2012-03-30 02:40:24', '439 - Knight Moves.cpp', 'application/octet-stream', 1929, '2012-03-30 02:40:24'),
(962, 'Fenwick tree. \r\nMake a new array of size ''MaxElement'' of the given array, then, back to front get the sum of each until inv[i]-1 (not include i), and add 1 to postion inv[i]. Then get the sum and if it''s odd print "Marcelo" otherwise print "Carlos".', 1, 32, '2012-03-30 03:34:04', '2012-03-30 03:34:04', '11495 -  Bubbles and Buckets.cpp', 'application/octet-stream', 1152, '2012-03-30 03:34:04'),
(963, 'BFS, but you have to do it once, otherwise if you try doing BFS for each position it''ll be TLE (I know :P), so basically put into the queue each white (1) pixel and and set it''s distance equals to 0, and the distance for the black pixels equals to something BIG, then just do the normal BFS. :)', 18, 32, '2012-03-31 07:02:32', '2012-03-31 07:02:47', '206 - Bitmap.cpp', 'application/octet-stream', 2337, '2012-03-31 07:02:32'),
(964, '\r\nSe empieza en los nodos blancos\r\n\r\nEl costo de un nodo blanco a otro nodo blanco es 0\r\nEl costo del resto de nodos se inicializa en MAXN\r\n\r\nCada ves que llama a un vecino, compara el costo del vecino a un nodo blanco con el costo del nodo actual a un nodo blanco + 1. Si el primero es mayor, entonces se le guarda a este vecino el costo nuevo, y se mete a la cola del BFS.\r\n\r\nDe esta manera, si en el BFS se encuentra un vecino con un costo menor al del costo del nodo actual + 1, se deja intacto puesto que este vecino ya tiene un camino mas optimo', 18, 126, '2012-03-31 07:33:13', '2012-03-31 07:37:29', 'BFS.cpp', 'application/octet-stream', 3644, '2012-03-31 07:37:29'),
(965, 'Classic BFS, I had some problems clearing the graph (vector< vector <int>>) a simple graph.clear() does not work, I had to clean each vector in the graph :S.', 26, 32, '2012-04-05 06:48:12', '2012-04-05 06:48:39', '567 - Risk.cpp', 'application/octet-stream', 1624, '2012-04-05 06:48:12'),
(966, 'Got WA until I found (on http://www.algorithmist.com/index.php/UVa_195) that I had to write my own compare function. because the alphabet order is ''A -> a -> B -> b -> C -> c ..... -> Y -> y -> Z -> z''', 523, 32, '2012-04-05 16:14:02', '2012-04-05 16:14:02', '195 - Anagram.cpp', 'application/octet-stream', 1240, '2012-04-05 16:14:02'),
(967, 'Ad Hoc, I used a map (string, pair<string,int>) to count how many times appears one letter and then just print those that appears once.\r\n\r\nNote.\r\nDidn''t know how to convert a string to upper or lower case. <a href="http://notfaq.wordpress.com/2007/08/04/cc-convert-string-to-upperlower-case/">How to... :P</a>', 524, 32, '2012-04-05 16:52:07', '2012-04-05 16:52:07', '156 - Ananagrams.cpp', 'application/octet-stream', 1238, '2012-04-05 16:52:07'),
(968, 'BFS, nice graph in ''3d'' :p.\r\n', 194, 32, '2012-04-05 22:03:18', '2012-04-05 22:03:18', '532 - Dungeon Master.cpp', 'application/octet-stream', 2440, '2012-04-05 22:03:18'),
(969, 'BFS, printing the Single-Source Shortest Paths (SSSP). "To reconstruct the actual shortest path we can do a simple recursive backtracking from the last vertex until we hit the source vertex"(Competitive Programming 2).\r\nThe reading it isn''t classic cause you have to deal with strings. I used stringstream to split it.', 525, 32, '2012-04-06 03:06:33', '2012-04-06 03:12:45', '627 - The Net.cpp', 'application/octet-stream', 2368, '2012-04-06 03:06:33'),
(970, 'Cute problem about recursion. Since all left descendants are smaller than the current node and all  right descendants are greater than the current node you can exactly determine what''s the left and right subtree and recurse there.\r\n\r\n', 526, 1, '2012-04-07 06:01:43', '2012-04-07 06:03:52', 'tree.2.cpp', 'application/octet-stream', 890, '2012-04-07 06:03:52'),
(971, 'In this problem I got hacked twice :(, until I realized that you don''t have to simulate the process all the n rounds (TLE), so if sequenceA.length*sequenceB.lentgh is greater or equals to rounds simulate the process until round otherwise simulate the process until sequenceA.length*sequenceB.lentgh rounds and then it will be the same cyclic, then it''s just a math problem.\r\n', 527, 32, '2012-04-07 23:27:39', '2012-04-07 23:28:25', 'Rock-Paper-Scissors.cpp', 'application/octet-stream', 1752, '2012-04-07 23:27:39'),
(973, 'The idea is simple (BFS and SSSP), the tricky part (for me) was printing the moves, I used a vector to save the movements and another vector to save the route itself, and both are related.\r\n=>route[i]=j -> j is the parent of i and i and j have their moves respectively on moves vector.\r\n\r\nSimilar to <a href="http://comovamos.factorcomun.org/problems/431-knight-moves">this</a> but I''d say little harder.', 529, 32, '2012-04-07 23:30:15', '2012-04-07 23:34:27', '3A - Shortest path of the king.cpp', 'application/octet-stream', 2194, '2012-04-07 23:30:15'),
(974, 'Ad-hoc\r\n', 530, 32, '2012-04-07 23:31:32', '2012-04-07 23:31:32', '158A - Next Round.cpp', 'application/octet-stream', 793, '2012-04-07 23:31:32'),
(975, 'If a and b leave the same remainder when divided by d, then d divides a - b.\r\n\r\nTherefore we are interested in finding a common divisor of a[i] - a[j], where i and j run over all possible pairs in the array. Furthermore, we are interested in finding the greatest common divisor of these integers.', 532, 1, '2012-04-08 06:14:49', '2012-04-08 06:14:49', 'simple.cpp', 'application/octet-stream', 1035, '2012-04-08 06:14:49'),
(976, 'More BFS :P, printing the Single-Source Shortest Path (SSSP). Classic BFS, the output it''s kind of tricky, I got PE once. (Don''t print a blank line on the last test case :P.)', 533, 32, '2012-04-09 03:47:51', '2012-04-09 03:47:51', '762 - We Ship Cheap.cpp', 'application/octet-stream', 1767, '2012-04-09 03:47:51'),
(977, 'Solution using MST (Maximum Spanning Tree). Build the MST (using Kruskal), then find the minimum road in the path from city A to city B.', 333, 116, '2012-04-09 23:18:32', '2012-04-10 04:08:25', 'heavycargo.cpp', 'text/x-c', 2969, '2012-04-10 04:08:25'),
(978, 'If two words differ by one letter then connect them. Then BFS. *Remember to clear the visited map! :P', 534, 32, '2012-04-10 04:03:55', '2012-04-10 04:03:55', '429 - Word Transformation.cpp', 'application/octet-stream', 2129, '2012-04-10 04:03:55'),
(979, 'Simulation. Just read carefully, you have to save the position from where the robot gets off of the map and not the position that it will be after he gets off.', 449, 32, '2012-04-16 02:06:40', '2012-04-16 02:06:40', '118 - Mutant Flatworld Explorers.cpp', 'application/octet-stream', 1838, '2012-04-16 02:06:40'),
(980, 'Graph Traversal with DFS.', 535, 32, '2012-04-16 03:49:28', '2012-04-16 03:49:28', '280 - Vertex.cpp', 'application/octet-stream', 1496, '2012-04-16 03:49:28'),
(981, 'Simulation, from the last saturday ''''ACIS/REDIS" contest, I couldn''t participate :(.', 536, 32, '2012-04-16 23:29:12', '2012-04-16 23:29:12', '5934 - Sokoban.cpp', 'application/octet-stream', 3443, '2012-04-16 23:29:12'),
(982, 'DP - Coin Change', 537, 22, '2012-04-17 22:27:19', '2012-04-17 22:27:19', '147.cpp', 'application/octet-stream', 798, '2012-04-17 22:27:19'),
(983, 'Como la de Hock, pero iterativa.\r\n\r\nY que gonorrea de salida.', 537, 1, '2012-04-18 04:15:57', '2012-04-18 04:15:57', '147.2.cpp', 'application/octet-stream', 433, '2012-04-18 04:15:57'),
(984, 'SSSP on Weighted Graph, I used ''Competitive Programming 2'' Dijkstra implementation.\r\n', 28, 32, '2012-04-18 20:41:45', '2012-04-18 20:41:45', '10986 - Sending email.cpp', 'application/octet-stream', 1975, '2012-04-18 20:41:45'),
(985, 'SSSP on Weighted graph and print the route. Actually solvable using Floyd-Warshall''s. I used Dijkstra :).', 426, 32, '2012-04-18 22:26:51', '2012-04-18 22:26:51', '341 - Non-Stop Travel.cpp', 'application/octet-stream', 2187, '2012-04-18 22:26:51'),
(986, 'Graph on a 2D grid, a little changes on the classic Dijsktra implementation to store the position (x,y) and weight. Then straightforward.\r\n', 39, 32, '2012-04-19 19:32:06', '2012-04-19 19:33:39', '929 - Number Maze.cpp', 'application/octet-stream', 2353, '2012-04-19 19:33:39'),
(987, 'The problem here is building the graph, then it''s just SSSP (BFS).', 538, 32, '2012-04-20 14:41:14', '2012-04-20 14:41:14', '11352 - Crazy King.cpp', 'application/octet-stream', 2788, '2012-04-20 14:41:14'),
(988, 'BFS, the graph representation is nothing tricky at all, just usa a map < string, vector< string >> that''s all.', 321, 32, '2012-04-22 19:08:33', '2012-04-22 19:10:11', '10009 - All Roads Lead Where.cpp', 'application/octet-stream', 1794, '2012-04-22 19:09:40'),
(989, '1. Get the number of repetitions of each digit in m.\r\n<pre>\r\nint digits[10];\r\n</pre>\r\n2. Iterate over n replacing n_i by the greatest digit if it is greater than n_i', 531, 144, '2012-07-05 04:15:36', '2012-07-05 04:16:03', 'replacingDigits.cpp', 'text/x-c++src', 820, '2012-07-05 04:15:35'),
(990, 'Problem Type : Math, some optimization\r\nComplexity : O(N * 2^4)\r\n\r\nFor simplicity, think on 2-dimensional. Manhattan distance between (x1,y1) and (x2,y2) is \r\nmax( (x1+y1)-(x2+y2),(-x1+y1)-(-x2+y2),(-x1-y1)-(-x2-y2),(x1-y1)-(x2-y2) ).\r\n\r\nso we want to find\r\n\r\nmax(\r\n(A[i]+B[i]+C[i]+D[i])-(A[j]+B[j]+C[j]+D[j]) (1)\r\n(-A[i]+B[i]+C[i]+D[i])-(-A[j]+B[j]+C[j]+D[j]) (2),\r\n.\r\n.\r\n.\r\n(-A[i]-B[i]-C[i]-D[i])-(-A[j]-B[j]-C[j]-D[j]) (2^4)\r\n)\r\n\r\nThat is, We want to find maxF[i]-minF[i]. (0<= i < 2^4)\r\nThen "i" is the states. For example,\r\nmaxF[0] = max(A[i]+B[i]+C[i]+D[i])\r\nmaxF[12] = max(A[i]+B[i]-C[i]-D[i]) ,(12(10) = 1100(2)\r\n\r\nWe can find maxF[] and minF[] in O(N).\r\n\r\nSorry for my poor English.', 539, 158, '2012-07-31 06:27:05', '2012-07-31 06:51:51', 'code.cpp', 'text/plain', 1340, '2012-07-31 06:31:39'),
(991, 'Easy', 540, 158, '2012-07-31 09:23:43', '2012-07-31 09:24:31', 'code.cpp', 'text/plain', 893, '2012-07-31 09:24:31'),
(992, 'Problem Type : Math\r\nComplexity : O(n) (n is length of a given string)\r\n\r\n1 :\r\nWe can think as follows.\r\n\r\n00..00 = 0\r\n11..11 = 1\r\n\r\n1110000 = 10, 01110001100 = 01010\r\n\r\n2:\r\nThe previous state of "00..00" is 0..01..1\r\n\r\n\r\nFrom the above, it is only necessary to count the minimum number of operations from 01010101 to 01.\r\n\r\nSorry for my poor English.', 541, 158, '2012-07-31 12:30:59', '2012-07-31 12:33:12', 'code.cpp', 'text/plain', 609, '2012-07-31 12:32:35'),
(995, 'Ad hoc', 542, 158, '2012-08-04 01:49:29', '2012-08-04 01:49:29', 'code.cpp', 'application/octet-stream', 699, '2012-08-04 01:49:29'),
(996, 'Game theory, Dynamic Programming', 493, 158, '2012-08-04 03:43:07', '2012-08-04 03:43:07', 'code.cpp', 'text/plain', 630, '2012-08-04 03:43:07'),
(998, 'Binary Indexed Tree, Dynamic Programming, Longest increasing subsequence', 543, 158, '2012-08-04 11:41:11', '2012-08-04 11:41:11', 'code.cpp', 'application/octet-stream', 772, '2012-08-04 11:41:11'),
(1000, 'Divide a big integer by a 32-bit integer.', 544, 158, '2012-08-04 11:47:51', '2012-08-04 11:47:51', 'code.cpp', 'application/octet-stream', 525, '2012-08-04 11:47:51'),
(1001, 'Heavy-light decomposition, Segment tree , LCA\r\n\r\nPre-computation in O(N log N)\r\nOperation of "CHANGE" in O(log N).\r\nOperation of "QUERY"  in O(log^2 N).', 545, 158, '2012-08-13 12:12:33', '2012-08-13 12:18:46', 'code.cpp', 'text/x-c++src', 3663, '2012-08-13 12:18:46'),
(1002, 'Dijkstra on a grid, O( (V+E) log V )', 522, 158, '2012-08-17 09:21:42', '2012-08-24 13:35:08', 'comosvamos.cpp', 'text/x-c++src', 1632, '2012-08-17 09:24:02'),
(1003, 'I''m still trying to understand the solution, but the idea is as follows:\r\n\r\n\r\nUsing the Knuth-Morris-Pratt (KMP) precomputed failure function of the input string, we can see if there is a substring repeating itself:\r\n\r\nSuppose S is a minimal repeating substring (it doesn''t have any proper substring, or to put in terms of the problem, it doesn''t have a root)\r\n\r\nIf S'' = S S S ... S = S^k then\r\nThe failure function f() will be:\r\n| S  |  S  |  S  |  S  |\r\n **** 0 1 2 3 4 ..... (it doesn''t matter the first part, but notice that since S is minimal, f(|S|*i) = |S|*(i-1) for all i > 0\r\n(the failure function of the end of a S dives the previous end..)\r\n\r\nThen the failure function on the last position of the big string ''points'' to the previous copy of S. And of course |S| divides the length of the big string.\r\nAlso, because of the way it''s made, it has to be a root of the big string..', 546, 162, '2012-09-26 05:10:46', '2012-09-26 05:10:46', 'findsr.cpp', 'text/x-c++src', 543, '2012-09-26 05:10:46');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `login` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `crypted_password` varchar(128) NOT NULL DEFAULT '',
  `salt` varchar(128) NOT NULL DEFAULT '',
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `remember_token` varchar(255) DEFAULT NULL,
  `remember_token_expires_at` datetime DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `is_admin` tinyint(1) DEFAULT NULL,
  `is_moderator` tinyint(1) DEFAULT NULL,
  `wants_emails` tinyint(1) DEFAULT NULL,
  `persistence_token` varchar(255) DEFAULT NULL,
  `login_count` int(11) NOT NULL DEFAULT '0',
  `last_login_at` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=179 ;
